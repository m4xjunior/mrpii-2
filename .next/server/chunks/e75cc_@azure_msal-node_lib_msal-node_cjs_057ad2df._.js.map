{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/Downloads/mrpii 2/node_modules/@azure/msal-node/lib/msal-node.cjs","sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/cache/serializer/Serializer.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/utils/Constants.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/error/AuthErrorCodes.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/error/AuthError.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/error/ClientAuthErrorCodes.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/error/ClientAuthError.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/crypto/ICrypto.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/logger/Logger.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/packageMetadata.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/authority/AuthorityOptions.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/error/ClientConfigurationErrorCodes.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/error/ClientConfigurationError.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/utils/StringUtils.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/request/ScopeSet.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/account/AccountInfo.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/account/AuthToken.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/utils/UrlUtils.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/url/UrlString.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/authority/AuthorityMetadata.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/error/CacheErrorCodes.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/error/CacheError.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/cache/CacheManager.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/authority/ProtocolMode.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/telemetry/performance/PerformanceEvent.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/telemetry/performance/StubPerformanceClient.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/config/ClientConfiguration.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/account/CcsCredential.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/account/ClientInfo.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/constants/AADServerParamKeys.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/request/RequestParameterBuilder.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/authority/AuthorityType.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/authority/OpenIdConfigResponse.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/authority/CloudInstanceDiscoveryResponse.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/authority/CloudInstanceDiscoveryErrorResponse.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/utils/FunctionWrappers.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/authority/RegionDiscovery.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/utils/TimeUtils.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/cache/utils/CacheHelpers.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/authority/Authority.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/authority/AuthorityFactory.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/error/ServerError.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/network/RequestThumbprint.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/network/ThrottlingUtils.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/error/NetworkError.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/client/BaseClient.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/account/TokenClaims.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/cache/entities/AccountEntity.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/error/InteractionRequiredAuthErrorCodes.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/error/InteractionRequiredAuthError.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/utils/ProtocolUtils.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/crypto/PopTokenGenerator.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/cache/persistence/TokenCacheContext.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/response/ResponseHandler.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/utils/ClientAssertionUtils.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/client/AuthorizationCodeClient.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/client/RefreshTokenClient.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/client/SilentFlowClient.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/protocol/Authorize.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/msal-common/dist/telemetry/server/ServerTelemetryManager.mjs","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/cache/serializer/Deserializer.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/internals.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/utils/Constants.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/utils/NetworkUtils.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/network/HttpClient.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/error/ManagedIdentityErrorCodes.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/error/ManagedIdentityError.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/config/ManagedIdentityId.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/error/NodeAuthError.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/config/Configuration.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/crypto/GuidGenerator.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/utils/EncodingUtils.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/crypto/HashUtils.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/crypto/PkceGenerator.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/crypto/CryptoProvider.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/cache/CacheHelpers.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/cache/NodeStorage.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/cache/TokenCache.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/ClientAssertion.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/packageMetadata.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/UsernamePasswordClient.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/protocol/Authorize.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/ClientApplication.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/network/LoopbackClient.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/DeviceCodeClient.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/PublicClientApplication.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/ClientCredentialClient.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/OnBehalfOfClient.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/ConfidentialClientApplication.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/utils/TimeUtils.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/network/HttpClientWithRetries.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/ManagedIdentitySources/BaseManagedIdentitySource.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/retry/LinearRetryStrategy.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/retry/DefaultManagedIdentityRetryPolicy.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/config/ManagedIdentityRequestParameters.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/ManagedIdentitySources/AppService.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/ManagedIdentitySources/AzureArc.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/ManagedIdentitySources/CloudShell.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/retry/ExponentialRetryStrategy.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/retry/ImdsRetryPolicy.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/ManagedIdentitySources/Imds.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/ManagedIdentitySources/ServiceFabric.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/ManagedIdentitySources/MachineLearning.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/ManagedIdentityClient.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/client/ManagedIdentityApplication.ts","file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/%40azure/src/cache/distributed/DistributedCachePlugin.ts"],"sourcesContent":["unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/cache/serializer/Serializer.ts","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst Constants = {\r\n    LIBRARY_NAME: \"MSAL.JS\",\r\n    SKU: \"msal.js.common\",\r\n    // default authority\r\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\r\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\r\n    DEFAULT_COMMON_TENANT: \"common\",\r\n    // ADFS String\r\n    ADFS: \"adfs\",\r\n    DSTS: \"dstsv2\",\r\n    // Default AAD Instance Discovery Endpoint\r\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\r\n    // CIAM URL\r\n    CIAM_AUTH_URL: \".ciamlogin.com\",\r\n    AAD_TENANT_DOMAIN_SUFFIX: \".onmicrosoft.com\",\r\n    // Resource delimiter - used for certain cache entries\r\n    RESOURCE_DELIM: \"|\",\r\n    // Placeholder for non-existent account ids/objects\r\n    NO_ACCOUNT: \"NO_ACCOUNT\",\r\n    // Claims\r\n    CLAIMS: \"claims\",\r\n    // Consumer UTID\r\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\r\n    // Default scopes\r\n    OPENID_SCOPE: \"openid\",\r\n    PROFILE_SCOPE: \"profile\",\r\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\r\n    EMAIL_SCOPE: \"email\",\r\n    CODE_GRANT_TYPE: \"authorization_code\",\r\n    RT_GRANT_TYPE: \"refresh_token\",\r\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\r\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\r\n    AUTHORIZATION_PENDING: \"authorization_pending\",\r\n    NOT_DEFINED: \"not_defined\",\r\n    EMPTY_STRING: \"\",\r\n    NOT_APPLICABLE: \"N/A\",\r\n    NOT_AVAILABLE: \"Not Available\",\r\n    FORWARD_SLASH: \"/\",\r\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\r\n    IMDS_VERSION: \"2020-06-01\",\r\n    IMDS_TIMEOUT: 2000,\r\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\r\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\r\n    KNOWN_PUBLIC_CLOUDS: [\r\n        \"login.microsoftonline.com\",\r\n        \"login.windows.net\",\r\n        \"login.microsoft.com\",\r\n        \"sts.windows.net\",\r\n    ],\r\n    SHR_NONCE_VALIDITY: 240,\r\n    INVALID_INSTANCE: \"invalid_instance\",\r\n};\r\nconst HttpStatus = {\r\n    SUCCESS: 200,\r\n    SUCCESS_RANGE_START: 200,\r\n    SUCCESS_RANGE_END: 299,\r\n    REDIRECT: 302,\r\n    CLIENT_ERROR: 400,\r\n    CLIENT_ERROR_RANGE_START: 400,\r\n    BAD_REQUEST: 400,\r\n    UNAUTHORIZED: 401,\r\n    NOT_FOUND: 404,\r\n    REQUEST_TIMEOUT: 408,\r\n    GONE: 410,\r\n    TOO_MANY_REQUESTS: 429,\r\n    CLIENT_ERROR_RANGE_END: 499,\r\n    SERVER_ERROR: 500,\r\n    SERVER_ERROR_RANGE_START: 500,\r\n    SERVICE_UNAVAILABLE: 503,\r\n    GATEWAY_TIMEOUT: 504,\r\n    SERVER_ERROR_RANGE_END: 599,\r\n    MULTI_SIDED_ERROR: 600,\r\n};\r\nconst HttpMethod = {\r\n    GET: \"GET\",\r\n    POST: \"POST\",\r\n};\r\nconst OIDC_DEFAULT_SCOPES = [\r\n    Constants.OPENID_SCOPE,\r\n    Constants.PROFILE_SCOPE,\r\n    Constants.OFFLINE_ACCESS_SCOPE,\r\n];\r\nconst OIDC_SCOPES = [...OIDC_DEFAULT_SCOPES, Constants.EMAIL_SCOPE];\r\n/**\r\n * Request header names\r\n */\r\nconst HeaderNames = {\r\n    CONTENT_TYPE: \"Content-Type\",\r\n    CONTENT_LENGTH: \"Content-Length\",\r\n    RETRY_AFTER: \"Retry-After\",\r\n    CCS_HEADER: \"X-AnchorMailbox\",\r\n    WWWAuthenticate: \"WWW-Authenticate\",\r\n    AuthenticationInfo: \"Authentication-Info\",\r\n    X_MS_REQUEST_ID: \"x-ms-request-id\",\r\n    X_MS_HTTP_VERSION: \"x-ms-httpver\",\r\n};\r\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */\r\nconst PersistentCacheKeys = {\r\n    ACTIVE_ACCOUNT_FILTERS: \"active-account-filters\", // new cache entry for active_account for a more robust version for browser\r\n};\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nconst AADAuthorityConstants = {\r\n    COMMON: \"common\",\r\n    ORGANIZATIONS: \"organizations\",\r\n    CONSUMERS: \"consumers\",\r\n};\r\n/**\r\n * Claims request keys\r\n */\r\nconst ClaimsRequestKeys = {\r\n    ACCESS_TOKEN: \"access_token\",\r\n    XMS_CC: \"xms_cc\",\r\n};\r\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\r\nconst PromptValue = {\r\n    LOGIN: \"login\",\r\n    SELECT_ACCOUNT: \"select_account\",\r\n    CONSENT: \"consent\",\r\n    NONE: \"none\",\r\n    CREATE: \"create\",\r\n    NO_SESSION: \"no_session\",\r\n};\r\n/**\r\n * allowed values for codeVerifier\r\n */\r\nconst CodeChallengeMethodValues = {\r\n    PLAIN: \"plain\",\r\n    S256: \"S256\",\r\n};\r\n/**\r\n * Allowed values for response_type\r\n */\r\nconst OAuthResponseType = {\r\n    CODE: \"code\",\r\n    IDTOKEN_TOKEN: \"id_token token\",\r\n    IDTOKEN_TOKEN_REFRESHTOKEN: \"id_token token refresh_token\",\r\n};\r\n/**\r\n * allowed values for server response type\r\n * @deprecated Use ResponseMode instead\r\n */\r\nconst ServerResponseType = {\r\n    QUERY: \"query\",\r\n    FRAGMENT: \"fragment\",\r\n};\r\n/**\r\n * allowed values for response_mode\r\n */\r\nconst ResponseMode = {\r\n    QUERY: \"query\",\r\n    FRAGMENT: \"fragment\",\r\n    FORM_POST: \"form_post\",\r\n};\r\n/**\r\n * allowed grant_type\r\n */\r\nconst GrantType = {\r\n    IMPLICIT_GRANT: \"implicit\",\r\n    AUTHORIZATION_CODE_GRANT: \"authorization_code\",\r\n    CLIENT_CREDENTIALS_GRANT: \"client_credentials\",\r\n    RESOURCE_OWNER_PASSWORD_GRANT: \"password\",\r\n    REFRESH_TOKEN_GRANT: \"refresh_token\",\r\n    DEVICE_CODE_GRANT: \"device_code\",\r\n    JWT_BEARER: \"urn:ietf:params:oauth:grant-type:jwt-bearer\",\r\n};\r\n/**\r\n * Account types in Cache\r\n */\r\nconst CacheAccountType = {\r\n    MSSTS_ACCOUNT_TYPE: \"MSSTS\",\r\n    ADFS_ACCOUNT_TYPE: \"ADFS\",\r\n    MSAV1_ACCOUNT_TYPE: \"MSA\",\r\n    GENERIC_ACCOUNT_TYPE: \"Generic\", // NTLM, Kerberos, FBA, Basic etc\r\n};\r\n/**\r\n * Separators used in cache\r\n */\r\nconst Separators = {\r\n    CACHE_KEY_SEPARATOR: \"-\",\r\n    CLIENT_INFO_SEPARATOR: \".\",\r\n};\r\n/**\r\n * Credential Type stored in the cache\r\n */\r\nconst CredentialType = {\r\n    ID_TOKEN: \"IdToken\",\r\n    ACCESS_TOKEN: \"AccessToken\",\r\n    ACCESS_TOKEN_WITH_AUTH_SCHEME: \"AccessToken_With_AuthScheme\",\r\n    REFRESH_TOKEN: \"RefreshToken\",\r\n};\r\n/**\r\n * Combine all cache types\r\n */\r\nconst CacheType = {\r\n    ADFS: 1001,\r\n    MSA: 1002,\r\n    MSSTS: 1003,\r\n    GENERIC: 1004,\r\n    ACCESS_TOKEN: 2001,\r\n    REFRESH_TOKEN: 2002,\r\n    ID_TOKEN: 2003,\r\n    APP_METADATA: 3001,\r\n    UNDEFINED: 9999,\r\n};\r\n/**\r\n * More Cache related constants\r\n */\r\nconst APP_METADATA = \"appmetadata\";\r\nconst CLIENT_INFO = \"client_info\";\r\nconst THE_FAMILY_ID = \"1\";\r\nconst AUTHORITY_METADATA_CONSTANTS = {\r\n    CACHE_KEY: \"authority-metadata\",\r\n    REFRESH_TIME_SECONDS: 3600 * 24, // 24 Hours\r\n};\r\nconst AuthorityMetadataSource = {\r\n    CONFIG: \"config\",\r\n    CACHE: \"cache\",\r\n    NETWORK: \"network\",\r\n    HARDCODED_VALUES: \"hardcoded_values\",\r\n};\r\nconst SERVER_TELEM_CONSTANTS = {\r\n    SCHEMA_VERSION: 5,\r\n    MAX_LAST_HEADER_BYTES: 330,\r\n    MAX_CACHED_ERRORS: 50,\r\n    CACHE_KEY: \"server-telemetry\",\r\n    CATEGORY_SEPARATOR: \"|\",\r\n    VALUE_SEPARATOR: \",\",\r\n    OVERFLOW_TRUE: \"1\",\r\n    OVERFLOW_FALSE: \"0\",\r\n    UNKNOWN_ERROR: \"unknown_error\",\r\n};\r\n/**\r\n * Type of the authentication request\r\n */\r\nconst AuthenticationScheme = {\r\n    BEARER: \"Bearer\",\r\n    POP: \"pop\",\r\n    SSH: \"ssh-cert\",\r\n};\r\n/**\r\n * Constants related to throttling\r\n */\r\nconst ThrottlingConstants = {\r\n    // Default time to throttle RequestThumbprint in seconds\r\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\r\n    // Default maximum time to throttle in seconds, overrides what the server sends back\r\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\r\n    // Prefix for storing throttling entries\r\n    THROTTLING_PREFIX: \"throttling\",\r\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\r\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\",\r\n};\r\nconst Errors = {\r\n    INVALID_GRANT_ERROR: \"invalid_grant\",\r\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\r\n};\r\n/**\r\n * Password grant parameters\r\n */\r\nconst PasswordGrantConstants = {\r\n    username: \"username\",\r\n    password: \"password\",\r\n};\r\n/**\r\n * Region Discovery Sources\r\n */\r\nconst RegionDiscoverySources = {\r\n    FAILED_AUTO_DETECTION: \"1\",\r\n    INTERNAL_CACHE: \"2\",\r\n    ENVIRONMENT_VARIABLE: \"3\",\r\n    IMDS: \"4\",\r\n};\r\n/**\r\n * Region Discovery Outcomes\r\n */\r\nconst RegionDiscoveryOutcomes = {\r\n    CONFIGURED_NO_AUTO_DETECTION: \"2\",\r\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL: \"4\",\r\n    AUTO_DETECTION_REQUESTED_FAILED: \"5\",\r\n};\r\n/**\r\n * Specifies the reason for fetching the access token from the identity provider\r\n */\r\nconst CacheOutcome = {\r\n    // When a token is found in the cache or the cache is not supposed to be hit when making the request\r\n    NOT_APPLICABLE: \"0\",\r\n    // When the token request goes to the identity provider because force_refresh was set to true. Also occurs if claims were requested\r\n    FORCE_REFRESH_OR_CLAIMS: \"1\",\r\n    // When the token request goes to the identity provider because no cached access token exists\r\n    NO_CACHED_ACCESS_TOKEN: \"2\",\r\n    // When the token request goes to the identity provider because cached access token expired\r\n    CACHED_ACCESS_TOKEN_EXPIRED: \"3\",\r\n    // When the token request goes to the identity provider because refresh_in was used and the existing token needs to be refreshed\r\n    PROACTIVELY_REFRESHED: \"4\",\r\n};\r\nconst JsonWebTokenTypes = {\r\n    Jwt: \"JWT\",\r\n    Jwk: \"JWK\",\r\n    Pop: \"pop\",\r\n};\r\nconst ONE_DAY_IN_MS = 86400000;\r\n// Token renewal offset default in seconds\r\nconst DEFAULT_TOKEN_RENEWAL_OFFSET_SEC = 300;\r\nconst EncodingTypes = {\r\n    BASE64: \"base64\",\r\n    HEX: \"hex\",\r\n    UTF8: \"utf-8\",\r\n};\n\nexport { AADAuthorityConstants, APP_METADATA, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme, AuthorityMetadataSource, CLIENT_INFO, CacheAccountType, CacheOutcome, CacheType, ClaimsRequestKeys, CodeChallengeMethodValues, Constants, CredentialType, DEFAULT_TOKEN_RENEWAL_OFFSET_SEC, EncodingTypes, Errors, GrantType, HeaderNames, HttpMethod, HttpStatus, JsonWebTokenTypes, OAuthResponseType, OIDC_DEFAULT_SCOPES, OIDC_SCOPES, ONE_DAY_IN_MS, PasswordGrantConstants, PersistentCacheKeys, PromptValue, RegionDiscoveryOutcomes, RegionDiscoverySources, ResponseMode, SERVER_TELEM_CONSTANTS, Separators, ServerResponseType, THE_FAMILY_ID, ThrottlingConstants };\n//# sourceMappingURL=Constants.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nconst unexpectedError = \"unexpected_error\";\r\nconst postRequestFailed = \"post_request_failed\";\n\nexport { postRequestFailed, unexpectedError };\n//# sourceMappingURL=AuthErrorCodes.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { Constants } from '../utils/Constants.mjs';\nimport { postRequestFailed, unexpectedError } from './AuthErrorCodes.mjs';\nimport * as AuthErrorCodes from './AuthErrorCodes.mjs';\nexport { AuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst AuthErrorMessages = {\r\n    [unexpectedError]: \"Unexpected error in authentication.\",\r\n    [postRequestFailed]: \"Post request failed from the network, could be a 4xx/5xx or a network unavailability. Please check the exact error code for details.\",\r\n};\r\n/**\r\n * AuthErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use AuthErrorCodes instead\r\n */\r\nconst AuthErrorMessage = {\r\n    unexpectedError: {\r\n        code: unexpectedError,\r\n        desc: AuthErrorMessages[unexpectedError],\r\n    },\r\n    postRequestFailed: {\r\n        code: postRequestFailed,\r\n        desc: AuthErrorMessages[postRequestFailed],\r\n    },\r\n};\r\n/**\r\n * General error class thrown by the MSAL.js library.\r\n */\r\nclass AuthError extends Error {\r\n    constructor(errorCode, errorMessage, suberror) {\r\n        const errorString = errorMessage\r\n            ? `${errorCode}: ${errorMessage}`\r\n            : errorCode;\r\n        super(errorString);\r\n        Object.setPrototypeOf(this, AuthError.prototype);\r\n        this.errorCode = errorCode || Constants.EMPTY_STRING;\r\n        this.errorMessage = errorMessage || Constants.EMPTY_STRING;\r\n        this.subError = suberror || Constants.EMPTY_STRING;\r\n        this.name = \"AuthError\";\r\n    }\r\n    setCorrelationId(correlationId) {\r\n        this.correlationId = correlationId;\r\n    }\r\n}\r\nfunction createAuthError(code, additionalMessage) {\r\n    return new AuthError(code, additionalMessage\r\n        ? `${AuthErrorMessages[code]} ${additionalMessage}`\r\n        : AuthErrorMessages[code]);\r\n}\n\nexport { AuthError, AuthErrorMessage, AuthErrorMessages, createAuthError };\n//# sourceMappingURL=AuthError.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst clientInfoDecodingError = \"client_info_decoding_error\";\r\nconst clientInfoEmptyError = \"client_info_empty_error\";\r\nconst tokenParsingError = \"token_parsing_error\";\r\nconst nullOrEmptyToken = \"null_or_empty_token\";\r\nconst endpointResolutionError = \"endpoints_resolution_error\";\r\nconst networkError = \"network_error\";\r\nconst openIdConfigError = \"openid_config_error\";\r\nconst hashNotDeserialized = \"hash_not_deserialized\";\r\nconst invalidState = \"invalid_state\";\r\nconst stateMismatch = \"state_mismatch\";\r\nconst stateNotFound = \"state_not_found\";\r\nconst nonceMismatch = \"nonce_mismatch\";\r\nconst authTimeNotFound = \"auth_time_not_found\";\r\nconst maxAgeTranspired = \"max_age_transpired\";\r\nconst multipleMatchingTokens = \"multiple_matching_tokens\";\r\nconst multipleMatchingAccounts = \"multiple_matching_accounts\";\r\nconst multipleMatchingAppMetadata = \"multiple_matching_appMetadata\";\r\nconst requestCannotBeMade = \"request_cannot_be_made\";\r\nconst cannotRemoveEmptyScope = \"cannot_remove_empty_scope\";\r\nconst cannotAppendScopeSet = \"cannot_append_scopeset\";\r\nconst emptyInputScopeSet = \"empty_input_scopeset\";\r\nconst deviceCodePollingCancelled = \"device_code_polling_cancelled\";\r\nconst deviceCodeExpired = \"device_code_expired\";\r\nconst deviceCodeUnknownError = \"device_code_unknown_error\";\r\nconst noAccountInSilentRequest = \"no_account_in_silent_request\";\r\nconst invalidCacheRecord = \"invalid_cache_record\";\r\nconst invalidCacheEnvironment = \"invalid_cache_environment\";\r\nconst noAccountFound = \"no_account_found\";\r\nconst noCryptoObject = \"no_crypto_object\";\r\nconst unexpectedCredentialType = \"unexpected_credential_type\";\r\nconst invalidAssertion = \"invalid_assertion\";\r\nconst invalidClientCredential = \"invalid_client_credential\";\r\nconst tokenRefreshRequired = \"token_refresh_required\";\r\nconst userTimeoutReached = \"user_timeout_reached\";\r\nconst tokenClaimsCnfRequiredForSignedJwt = \"token_claims_cnf_required_for_signedjwt\";\r\nconst authorizationCodeMissingFromServerResponse = \"authorization_code_missing_from_server_response\";\r\nconst bindingKeyNotRemoved = \"binding_key_not_removed\";\r\nconst endSessionEndpointNotSupported = \"end_session_endpoint_not_supported\";\r\nconst keyIdMissing = \"key_id_missing\";\r\nconst noNetworkConnectivity = \"no_network_connectivity\";\r\nconst userCanceled = \"user_canceled\";\r\nconst missingTenantIdError = \"missing_tenant_id_error\";\r\nconst methodNotImplemented = \"method_not_implemented\";\r\nconst nestedAppAuthBridgeDisabled = \"nested_app_auth_bridge_disabled\";\n\nexport { authTimeNotFound, authorizationCodeMissingFromServerResponse, bindingKeyNotRemoved, cannotAppendScopeSet, cannotRemoveEmptyScope, clientInfoDecodingError, clientInfoEmptyError, deviceCodeExpired, deviceCodePollingCancelled, deviceCodeUnknownError, emptyInputScopeSet, endSessionEndpointNotSupported, endpointResolutionError, hashNotDeserialized, invalidAssertion, invalidCacheEnvironment, invalidCacheRecord, invalidClientCredential, invalidState, keyIdMissing, maxAgeTranspired, methodNotImplemented, missingTenantIdError, multipleMatchingAccounts, multipleMatchingAppMetadata, multipleMatchingTokens, nestedAppAuthBridgeDisabled, networkError, noAccountFound, noAccountInSilentRequest, noCryptoObject, noNetworkConnectivity, nonceMismatch, nullOrEmptyToken, openIdConfigError, requestCannotBeMade, stateMismatch, stateNotFound, tokenClaimsCnfRequiredForSignedJwt, tokenParsingError, tokenRefreshRequired, unexpectedCredentialType, userCanceled, userTimeoutReached };\n//# sourceMappingURL=ClientAuthErrorCodes.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { AuthError } from './AuthError.mjs';\nimport { nestedAppAuthBridgeDisabled, missingTenantIdError, userCanceled, noNetworkConnectivity, keyIdMissing, endSessionEndpointNotSupported, bindingKeyNotRemoved, authorizationCodeMissingFromServerResponse, tokenClaimsCnfRequiredForSignedJwt, userTimeoutReached, tokenRefreshRequired, invalidClientCredential, invalidAssertion, unexpectedCredentialType, noCryptoObject, noAccountFound, invalidCacheEnvironment, invalidCacheRecord, noAccountInSilentRequest, deviceCodeUnknownError, deviceCodeExpired, deviceCodePollingCancelled, emptyInputScopeSet, cannotAppendScopeSet, cannotRemoveEmptyScope, requestCannotBeMade, multipleMatchingAppMetadata, multipleMatchingAccounts, multipleMatchingTokens, maxAgeTranspired, authTimeNotFound, nonceMismatch, stateNotFound, stateMismatch, invalidState, hashNotDeserialized, openIdConfigError, networkError, endpointResolutionError, nullOrEmptyToken, tokenParsingError, clientInfoEmptyError, clientInfoDecodingError, methodNotImplemented } from './ClientAuthErrorCodes.mjs';\nimport * as ClientAuthErrorCodes from './ClientAuthErrorCodes.mjs';\nexport { ClientAuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nconst ClientAuthErrorMessages = {\r\n    [clientInfoDecodingError]: \"The client info could not be parsed/decoded correctly\",\r\n    [clientInfoEmptyError]: \"The client info was empty\",\r\n    [tokenParsingError]: \"Token cannot be parsed\",\r\n    [nullOrEmptyToken]: \"The token is null or empty\",\r\n    [endpointResolutionError]: \"Endpoints cannot be resolved\",\r\n    [networkError]: \"Network request failed\",\r\n    [openIdConfigError]: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\",\r\n    [hashNotDeserialized]: \"The hash parameters could not be deserialized\",\r\n    [invalidState]: \"State was not the expected format\",\r\n    [stateMismatch]: \"State mismatch error\",\r\n    [stateNotFound]: \"State not found\",\r\n    [nonceMismatch]: \"Nonce mismatch error\",\r\n    [authTimeNotFound]: \"Max Age was requested and the ID token is missing the auth_time variable.\" +\r\n        \" auth_time is an optional claim and is not enabled by default - it must be enabled.\" +\r\n        \" See https://aka.ms/msaljs/optional-claims for more information.\",\r\n    [maxAgeTranspired]: \"Max Age is set to 0, or too much time has elapsed since the last end-user authentication.\",\r\n    [multipleMatchingTokens]: \"The cache contains multiple tokens satisfying the requirements. \" +\r\n        \"Call AcquireToken again providing more requirements such as authority or account.\",\r\n    [multipleMatchingAccounts]: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\",\r\n    [multipleMatchingAppMetadata]: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\",\r\n    [requestCannotBeMade]: \"Token request cannot be made without authorization code or refresh token.\",\r\n    [cannotRemoveEmptyScope]: \"Cannot remove null or empty scope from ScopeSet\",\r\n    [cannotAppendScopeSet]: \"Cannot append ScopeSet\",\r\n    [emptyInputScopeSet]: \"Empty input ScopeSet cannot be processed\",\r\n    [deviceCodePollingCancelled]: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\",\r\n    [deviceCodeExpired]: \"Device code is expired.\",\r\n    [deviceCodeUnknownError]: \"Device code stopped polling for unknown reasons.\",\r\n    [noAccountInSilentRequest]: \"Please pass an account object, silent flow is not supported without account information\",\r\n    [invalidCacheRecord]: \"Cache record object was null or undefined.\",\r\n    [invalidCacheEnvironment]: \"Invalid environment when attempting to create cache entry\",\r\n    [noAccountFound]: \"No account found in cache for given key.\",\r\n    [noCryptoObject]: \"No crypto object detected.\",\r\n    [unexpectedCredentialType]: \"Unexpected credential type.\",\r\n    [invalidAssertion]: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\",\r\n    [invalidClientCredential]: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\",\r\n    [tokenRefreshRequired]: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\",\r\n    [userTimeoutReached]: \"User defined timeout for device code polling reached\",\r\n    [tokenClaimsCnfRequiredForSignedJwt]: \"Cannot generate a POP jwt if the token_claims are not populated\",\r\n    [authorizationCodeMissingFromServerResponse]: \"Server response does not contain an authorization code to proceed\",\r\n    [bindingKeyNotRemoved]: \"Could not remove the credential's binding key from storage.\",\r\n    [endSessionEndpointNotSupported]: \"The provided authority does not support logout\",\r\n    [keyIdMissing]: \"A keyId value is missing from the requested bound token's cache record and is required to match the token to it's stored binding key.\",\r\n    [noNetworkConnectivity]: \"No network connectivity. Check your internet connection.\",\r\n    [userCanceled]: \"User cancelled the flow.\",\r\n    [missingTenantIdError]: \"A tenant id - not common, organizations, or consumers - must be specified when using the client_credentials flow.\",\r\n    [methodNotImplemented]: \"This method has not been implemented\",\r\n    [nestedAppAuthBridgeDisabled]: \"The nested app auth bridge is disabled\",\r\n};\r\n/**\r\n * String constants used by error codes and messages.\r\n * @deprecated Use ClientAuthErrorCodes instead\r\n */\r\nconst ClientAuthErrorMessage = {\r\n    clientInfoDecodingError: {\r\n        code: clientInfoDecodingError,\r\n        desc: ClientAuthErrorMessages[clientInfoDecodingError],\r\n    },\r\n    clientInfoEmptyError: {\r\n        code: clientInfoEmptyError,\r\n        desc: ClientAuthErrorMessages[clientInfoEmptyError],\r\n    },\r\n    tokenParsingError: {\r\n        code: tokenParsingError,\r\n        desc: ClientAuthErrorMessages[tokenParsingError],\r\n    },\r\n    nullOrEmptyToken: {\r\n        code: nullOrEmptyToken,\r\n        desc: ClientAuthErrorMessages[nullOrEmptyToken],\r\n    },\r\n    endpointResolutionError: {\r\n        code: endpointResolutionError,\r\n        desc: ClientAuthErrorMessages[endpointResolutionError],\r\n    },\r\n    networkError: {\r\n        code: networkError,\r\n        desc: ClientAuthErrorMessages[networkError],\r\n    },\r\n    unableToGetOpenidConfigError: {\r\n        code: openIdConfigError,\r\n        desc: ClientAuthErrorMessages[openIdConfigError],\r\n    },\r\n    hashNotDeserialized: {\r\n        code: hashNotDeserialized,\r\n        desc: ClientAuthErrorMessages[hashNotDeserialized],\r\n    },\r\n    invalidStateError: {\r\n        code: invalidState,\r\n        desc: ClientAuthErrorMessages[invalidState],\r\n    },\r\n    stateMismatchError: {\r\n        code: stateMismatch,\r\n        desc: ClientAuthErrorMessages[stateMismatch],\r\n    },\r\n    stateNotFoundError: {\r\n        code: stateNotFound,\r\n        desc: ClientAuthErrorMessages[stateNotFound],\r\n    },\r\n    nonceMismatchError: {\r\n        code: nonceMismatch,\r\n        desc: ClientAuthErrorMessages[nonceMismatch],\r\n    },\r\n    authTimeNotFoundError: {\r\n        code: authTimeNotFound,\r\n        desc: ClientAuthErrorMessages[authTimeNotFound],\r\n    },\r\n    maxAgeTranspired: {\r\n        code: maxAgeTranspired,\r\n        desc: ClientAuthErrorMessages[maxAgeTranspired],\r\n    },\r\n    multipleMatchingTokens: {\r\n        code: multipleMatchingTokens,\r\n        desc: ClientAuthErrorMessages[multipleMatchingTokens],\r\n    },\r\n    multipleMatchingAccounts: {\r\n        code: multipleMatchingAccounts,\r\n        desc: ClientAuthErrorMessages[multipleMatchingAccounts],\r\n    },\r\n    multipleMatchingAppMetadata: {\r\n        code: multipleMatchingAppMetadata,\r\n        desc: ClientAuthErrorMessages[multipleMatchingAppMetadata],\r\n    },\r\n    tokenRequestCannotBeMade: {\r\n        code: requestCannotBeMade,\r\n        desc: ClientAuthErrorMessages[requestCannotBeMade],\r\n    },\r\n    removeEmptyScopeError: {\r\n        code: cannotRemoveEmptyScope,\r\n        desc: ClientAuthErrorMessages[cannotRemoveEmptyScope],\r\n    },\r\n    appendScopeSetError: {\r\n        code: cannotAppendScopeSet,\r\n        desc: ClientAuthErrorMessages[cannotAppendScopeSet],\r\n    },\r\n    emptyInputScopeSetError: {\r\n        code: emptyInputScopeSet,\r\n        desc: ClientAuthErrorMessages[emptyInputScopeSet],\r\n    },\r\n    DeviceCodePollingCancelled: {\r\n        code: deviceCodePollingCancelled,\r\n        desc: ClientAuthErrorMessages[deviceCodePollingCancelled],\r\n    },\r\n    DeviceCodeExpired: {\r\n        code: deviceCodeExpired,\r\n        desc: ClientAuthErrorMessages[deviceCodeExpired],\r\n    },\r\n    DeviceCodeUnknownError: {\r\n        code: deviceCodeUnknownError,\r\n        desc: ClientAuthErrorMessages[deviceCodeUnknownError],\r\n    },\r\n    NoAccountInSilentRequest: {\r\n        code: noAccountInSilentRequest,\r\n        desc: ClientAuthErrorMessages[noAccountInSilentRequest],\r\n    },\r\n    invalidCacheRecord: {\r\n        code: invalidCacheRecord,\r\n        desc: ClientAuthErrorMessages[invalidCacheRecord],\r\n    },\r\n    invalidCacheEnvironment: {\r\n        code: invalidCacheEnvironment,\r\n        desc: ClientAuthErrorMessages[invalidCacheEnvironment],\r\n    },\r\n    noAccountFound: {\r\n        code: noAccountFound,\r\n        desc: ClientAuthErrorMessages[noAccountFound],\r\n    },\r\n    noCryptoObj: {\r\n        code: noCryptoObject,\r\n        desc: ClientAuthErrorMessages[noCryptoObject],\r\n    },\r\n    unexpectedCredentialType: {\r\n        code: unexpectedCredentialType,\r\n        desc: ClientAuthErrorMessages[unexpectedCredentialType],\r\n    },\r\n    invalidAssertion: {\r\n        code: invalidAssertion,\r\n        desc: ClientAuthErrorMessages[invalidAssertion],\r\n    },\r\n    invalidClientCredential: {\r\n        code: invalidClientCredential,\r\n        desc: ClientAuthErrorMessages[invalidClientCredential],\r\n    },\r\n    tokenRefreshRequired: {\r\n        code: tokenRefreshRequired,\r\n        desc: ClientAuthErrorMessages[tokenRefreshRequired],\r\n    },\r\n    userTimeoutReached: {\r\n        code: userTimeoutReached,\r\n        desc: ClientAuthErrorMessages[userTimeoutReached],\r\n    },\r\n    tokenClaimsRequired: {\r\n        code: tokenClaimsCnfRequiredForSignedJwt,\r\n        desc: ClientAuthErrorMessages[tokenClaimsCnfRequiredForSignedJwt],\r\n    },\r\n    noAuthorizationCodeFromServer: {\r\n        code: authorizationCodeMissingFromServerResponse,\r\n        desc: ClientAuthErrorMessages[authorizationCodeMissingFromServerResponse],\r\n    },\r\n    bindingKeyNotRemovedError: {\r\n        code: bindingKeyNotRemoved,\r\n        desc: ClientAuthErrorMessages[bindingKeyNotRemoved],\r\n    },\r\n    logoutNotSupported: {\r\n        code: endSessionEndpointNotSupported,\r\n        desc: ClientAuthErrorMessages[endSessionEndpointNotSupported],\r\n    },\r\n    keyIdMissing: {\r\n        code: keyIdMissing,\r\n        desc: ClientAuthErrorMessages[keyIdMissing],\r\n    },\r\n    noNetworkConnectivity: {\r\n        code: noNetworkConnectivity,\r\n        desc: ClientAuthErrorMessages[noNetworkConnectivity],\r\n    },\r\n    userCanceledError: {\r\n        code: userCanceled,\r\n        desc: ClientAuthErrorMessages[userCanceled],\r\n    },\r\n    missingTenantIdError: {\r\n        code: missingTenantIdError,\r\n        desc: ClientAuthErrorMessages[missingTenantIdError],\r\n    },\r\n    nestedAppAuthBridgeDisabled: {\r\n        code: nestedAppAuthBridgeDisabled,\r\n        desc: ClientAuthErrorMessages[nestedAppAuthBridgeDisabled],\r\n    },\r\n};\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nclass ClientAuthError extends AuthError {\r\n    constructor(errorCode, additionalMessage) {\r\n        super(errorCode, additionalMessage\r\n            ? `${ClientAuthErrorMessages[errorCode]}: ${additionalMessage}`\r\n            : ClientAuthErrorMessages[errorCode]);\r\n        this.name = \"ClientAuthError\";\r\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\r\n    }\r\n}\r\nfunction createClientAuthError(errorCode, additionalMessage) {\r\n    return new ClientAuthError(errorCode, additionalMessage);\r\n}\n\nexport { ClientAuthError, ClientAuthErrorMessage, ClientAuthErrorMessages, createClientAuthError };\n//# sourceMappingURL=ClientAuthError.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst DEFAULT_CRYPTO_IMPLEMENTATION = {\r\n    createNewGuid: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    base64Decode: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    base64Encode: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    base64UrlEncode: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    encodeKid: () => {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async getPublicKeyThumbprint() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async removeTokenBindingKey() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async clearKeystore() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async signJwt() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async hashString() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n};\n\nexport { DEFAULT_CRYPTO_IMPLEMENTATION };\n//# sourceMappingURL=ICrypto.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { Constants } from '../utils/Constants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Log message level.\r\n */\r\nvar LogLevel;\r\n(function (LogLevel) {\r\n    LogLevel[LogLevel[\"Error\"] = 0] = \"Error\";\r\n    LogLevel[LogLevel[\"Warning\"] = 1] = \"Warning\";\r\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\r\n    LogLevel[LogLevel[\"Verbose\"] = 3] = \"Verbose\";\r\n    LogLevel[LogLevel[\"Trace\"] = 4] = \"Trace\";\r\n})(LogLevel || (LogLevel = {}));\r\n/**\r\n * Class which facilitates logging of messages to a specific place.\r\n */\r\nclass Logger {\r\n    constructor(loggerOptions, packageName, packageVersion) {\r\n        // Current log level, defaults to info.\r\n        this.level = LogLevel.Info;\r\n        const defaultLoggerCallback = () => {\r\n            return;\r\n        };\r\n        const setLoggerOptions = loggerOptions || Logger.createDefaultLoggerOptions();\r\n        this.localCallback =\r\n            setLoggerOptions.loggerCallback || defaultLoggerCallback;\r\n        this.piiLoggingEnabled = setLoggerOptions.piiLoggingEnabled || false;\r\n        this.level =\r\n            typeof setLoggerOptions.logLevel === \"number\"\r\n                ? setLoggerOptions.logLevel\r\n                : LogLevel.Info;\r\n        this.correlationId =\r\n            setLoggerOptions.correlationId || Constants.EMPTY_STRING;\r\n        this.packageName = packageName || Constants.EMPTY_STRING;\r\n        this.packageVersion = packageVersion || Constants.EMPTY_STRING;\r\n    }\r\n    static createDefaultLoggerOptions() {\r\n        return {\r\n            loggerCallback: () => {\r\n                // allow users to not set loggerCallback\r\n            },\r\n            piiLoggingEnabled: false,\r\n            logLevel: LogLevel.Info,\r\n        };\r\n    }\r\n    /**\r\n     * Create new Logger with existing configurations.\r\n     */\r\n    clone(packageName, packageVersion, correlationId) {\r\n        return new Logger({\r\n            loggerCallback: this.localCallback,\r\n            piiLoggingEnabled: this.piiLoggingEnabled,\r\n            logLevel: this.level,\r\n            correlationId: correlationId || this.correlationId,\r\n        }, packageName, packageVersion);\r\n    }\r\n    /**\r\n     * Log message with required options.\r\n     */\r\n    logMessage(logMessage, options) {\r\n        if (options.logLevel > this.level ||\r\n            (!this.piiLoggingEnabled && options.containsPii)) {\r\n            return;\r\n        }\r\n        const timestamp = new Date().toUTCString();\r\n        // Add correlationId to logs if set, correlationId provided on log messages take precedence\r\n        const logHeader = `[${timestamp}] : [${options.correlationId || this.correlationId || \"\"}]`;\r\n        const log = `${logHeader} : ${this.packageName}@${this.packageVersion} : ${LogLevel[options.logLevel]} - ${logMessage}`;\r\n        // debug(`msal:${LogLevel[options.logLevel]}${options.containsPii ? \"-Pii\": Constants.EMPTY_STRING}${options.context ? `:${options.context}` : Constants.EMPTY_STRING}`)(logMessage);\r\n        this.executeCallback(options.logLevel, log, options.containsPii || false);\r\n    }\r\n    /**\r\n     * Execute callback with message.\r\n     */\r\n    executeCallback(level, message, containsPii) {\r\n        if (this.localCallback) {\r\n            this.localCallback(level, message, containsPii);\r\n        }\r\n    }\r\n    /**\r\n     * Logs error messages.\r\n     */\r\n    error(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Error,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs error messages with PII.\r\n     */\r\n    errorPii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Error,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs warning messages.\r\n     */\r\n    warning(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Warning,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs warning messages with PII.\r\n     */\r\n    warningPii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Warning,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs info messages.\r\n     */\r\n    info(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Info,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs info messages with PII.\r\n     */\r\n    infoPii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Info,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs verbose messages.\r\n     */\r\n    verbose(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Verbose,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs verbose messages with PII.\r\n     */\r\n    verbosePii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Verbose,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs trace messages.\r\n     */\r\n    trace(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Trace,\r\n            containsPii: false,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Logs trace messages with PII.\r\n     */\r\n    tracePii(message, correlationId) {\r\n        this.logMessage(message, {\r\n            logLevel: LogLevel.Trace,\r\n            containsPii: true,\r\n            correlationId: correlationId || Constants.EMPTY_STRING,\r\n        });\r\n    }\r\n    /**\r\n     * Returns whether PII Logging is enabled or not.\r\n     */\r\n    isPiiLoggingEnabled() {\r\n        return this.piiLoggingEnabled || false;\r\n    }\r\n}\n\nexport { LogLevel, Logger };\n//# sourceMappingURL=Logger.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/* eslint-disable header/header */\r\nconst name = \"@azure/msal-common\";\r\nconst version = \"15.12.0\";\n\nexport { name, version };\n//# sourceMappingURL=packageMetadata.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst AzureCloudInstance = {\r\n    // AzureCloudInstance is not specified.\r\n    None: \"none\",\r\n    // Microsoft Azure public cloud\r\n    AzurePublic: \"https://login.microsoftonline.com\",\r\n    // Microsoft PPE\r\n    AzurePpe: \"https://login.windows-ppe.net\",\r\n    // Microsoft Chinese national/regional cloud\r\n    AzureChina: \"https://login.chinacloudapi.cn\",\r\n    // Microsoft German national/regional cloud (\"Black Forest\")\r\n    AzureGermany: \"https://login.microsoftonline.de\",\r\n    // US Government cloud\r\n    AzureUsGovernment: \"https://login.microsoftonline.us\",\r\n};\n\nexport { AzureCloudInstance };\n//# sourceMappingURL=AuthorityOptions.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst redirectUriEmpty = \"redirect_uri_empty\";\r\nconst claimsRequestParsingError = \"claims_request_parsing_error\";\r\nconst authorityUriInsecure = \"authority_uri_insecure\";\r\nconst urlParseError = \"url_parse_error\";\r\nconst urlEmptyError = \"empty_url_error\";\r\nconst emptyInputScopesError = \"empty_input_scopes_error\";\r\nconst invalidClaims = \"invalid_claims\";\r\nconst tokenRequestEmpty = \"token_request_empty\";\r\nconst logoutRequestEmpty = \"logout_request_empty\";\r\nconst invalidCodeChallengeMethod = \"invalid_code_challenge_method\";\r\nconst pkceParamsMissing = \"pkce_params_missing\";\r\nconst invalidCloudDiscoveryMetadata = \"invalid_cloud_discovery_metadata\";\r\nconst invalidAuthorityMetadata = \"invalid_authority_metadata\";\r\nconst untrustedAuthority = \"untrusted_authority\";\r\nconst missingSshJwk = \"missing_ssh_jwk\";\r\nconst missingSshKid = \"missing_ssh_kid\";\r\nconst missingNonceAuthenticationHeader = \"missing_nonce_authentication_header\";\r\nconst invalidAuthenticationHeader = \"invalid_authentication_header\";\r\nconst cannotSetOIDCOptions = \"cannot_set_OIDCOptions\";\r\nconst cannotAllowPlatformBroker = \"cannot_allow_platform_broker\";\r\nconst authorityMismatch = \"authority_mismatch\";\r\nconst invalidRequestMethodForEAR = \"invalid_request_method_for_EAR\";\r\nconst invalidAuthorizePostBodyParameters = \"invalid_authorize_post_body_parameters\";\n\nexport { authorityMismatch, authorityUriInsecure, cannotAllowPlatformBroker, cannotSetOIDCOptions, claimsRequestParsingError, emptyInputScopesError, invalidAuthenticationHeader, invalidAuthorityMetadata, invalidAuthorizePostBodyParameters, invalidClaims, invalidCloudDiscoveryMetadata, invalidCodeChallengeMethod, invalidRequestMethodForEAR, logoutRequestEmpty, missingNonceAuthenticationHeader, missingSshJwk, missingSshKid, pkceParamsMissing, redirectUriEmpty, tokenRequestEmpty, untrustedAuthority, urlEmptyError, urlParseError };\n//# sourceMappingURL=ClientConfigurationErrorCodes.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { AuthError } from './AuthError.mjs';\nimport { invalidRequestMethodForEAR, invalidAuthorizePostBodyParameters, authorityMismatch, cannotAllowPlatformBroker, cannotSetOIDCOptions, invalidAuthenticationHeader, missingNonceAuthenticationHeader, missingSshKid, missingSshJwk, untrustedAuthority, invalidAuthorityMetadata, invalidCloudDiscoveryMetadata, pkceParamsMissing, invalidCodeChallengeMethod, logoutRequestEmpty, tokenRequestEmpty, invalidClaims, emptyInputScopesError, urlEmptyError, urlParseError, authorityUriInsecure, claimsRequestParsingError, redirectUriEmpty } from './ClientConfigurationErrorCodes.mjs';\nimport * as ClientConfigurationErrorCodes from './ClientConfigurationErrorCodes.mjs';\nexport { ClientConfigurationErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst ClientConfigurationErrorMessages = {\r\n    [redirectUriEmpty]: \"A redirect URI is required for all calls, and none has been set.\",\r\n    [claimsRequestParsingError]: \"Could not parse the given claims request object.\",\r\n    [authorityUriInsecure]: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\",\r\n    [urlParseError]: \"URL could not be parsed into appropriate segments.\",\r\n    [urlEmptyError]: \"URL was empty or null.\",\r\n    [emptyInputScopesError]: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\",\r\n    [invalidClaims]: \"Given claims parameter must be a stringified JSON object.\",\r\n    [tokenRequestEmpty]: \"Token request was empty and not found in cache.\",\r\n    [logoutRequestEmpty]: \"The logout request was null or undefined.\",\r\n    [invalidCodeChallengeMethod]: 'code_challenge_method passed is invalid. Valid values are \"plain\" and \"S256\".',\r\n    [pkceParamsMissing]: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\",\r\n    [invalidCloudDiscoveryMetadata]: \"Invalid cloudDiscoveryMetadata provided. Must be a stringified JSON object containing tenant_discovery_endpoint and metadata fields\",\r\n    [invalidAuthorityMetadata]: \"Invalid authorityMetadata provided. Must by a stringified JSON object containing authorization_endpoint, token_endpoint, issuer fields.\",\r\n    [untrustedAuthority]: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\",\r\n    [missingSshJwk]: \"Missing sshJwk in SSH certificate request. A stringified JSON Web Key is required when using the SSH authentication scheme.\",\r\n    [missingSshKid]: \"Missing sshKid in SSH certificate request. A string that uniquely identifies the public SSH key is required when using the SSH authentication scheme.\",\r\n    [missingNonceAuthenticationHeader]: \"Unable to find an authentication header containing server nonce. Either the Authentication-Info or WWW-Authenticate headers must be present in order to obtain a server nonce.\",\r\n    [invalidAuthenticationHeader]: \"Invalid authentication header provided\",\r\n    [cannotSetOIDCOptions]: \"Cannot set OIDCOptions parameter. Please change the protocol mode to OIDC or use a non-Microsoft authority.\",\r\n    [cannotAllowPlatformBroker]: \"Cannot set allowPlatformBroker parameter to true when not in AAD protocol mode.\",\r\n    [authorityMismatch]: \"Authority mismatch error. Authority provided in login request or PublicClientApplication config does not match the environment of the provided account. Please use a matching account or make an interactive request to login to this authority.\",\r\n    [invalidAuthorizePostBodyParameters]: \"Invalid authorize post body parameters provided. If you are using authorizePostBodyParameters, the request method must be POST. Please check the request method and parameters.\",\r\n    [invalidRequestMethodForEAR]: \"Invalid request method for EAR protocol mode. The request method cannot be GET when using EAR protocol mode. Please change the request method to POST.\",\r\n};\r\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n * @deprecated Use ClientConfigurationErrorCodes instead\r\n */\r\nconst ClientConfigurationErrorMessage = {\r\n    redirectUriNotSet: {\r\n        code: redirectUriEmpty,\r\n        desc: ClientConfigurationErrorMessages[redirectUriEmpty],\r\n    },\r\n    claimsRequestParsingError: {\r\n        code: claimsRequestParsingError,\r\n        desc: ClientConfigurationErrorMessages[claimsRequestParsingError],\r\n    },\r\n    authorityUriInsecure: {\r\n        code: authorityUriInsecure,\r\n        desc: ClientConfigurationErrorMessages[authorityUriInsecure],\r\n    },\r\n    urlParseError: {\r\n        code: urlParseError,\r\n        desc: ClientConfigurationErrorMessages[urlParseError],\r\n    },\r\n    urlEmptyError: {\r\n        code: urlEmptyError,\r\n        desc: ClientConfigurationErrorMessages[urlEmptyError],\r\n    },\r\n    emptyScopesError: {\r\n        code: emptyInputScopesError,\r\n        desc: ClientConfigurationErrorMessages[emptyInputScopesError],\r\n    },\r\n    invalidClaimsRequest: {\r\n        code: invalidClaims,\r\n        desc: ClientConfigurationErrorMessages[invalidClaims],\r\n    },\r\n    tokenRequestEmptyError: {\r\n        code: tokenRequestEmpty,\r\n        desc: ClientConfigurationErrorMessages[tokenRequestEmpty],\r\n    },\r\n    logoutRequestEmptyError: {\r\n        code: logoutRequestEmpty,\r\n        desc: ClientConfigurationErrorMessages[logoutRequestEmpty],\r\n    },\r\n    invalidCodeChallengeMethod: {\r\n        code: invalidCodeChallengeMethod,\r\n        desc: ClientConfigurationErrorMessages[invalidCodeChallengeMethod],\r\n    },\r\n    invalidCodeChallengeParams: {\r\n        code: pkceParamsMissing,\r\n        desc: ClientConfigurationErrorMessages[pkceParamsMissing],\r\n    },\r\n    invalidCloudDiscoveryMetadata: {\r\n        code: invalidCloudDiscoveryMetadata,\r\n        desc: ClientConfigurationErrorMessages[invalidCloudDiscoveryMetadata],\r\n    },\r\n    invalidAuthorityMetadata: {\r\n        code: invalidAuthorityMetadata,\r\n        desc: ClientConfigurationErrorMessages[invalidAuthorityMetadata],\r\n    },\r\n    untrustedAuthority: {\r\n        code: untrustedAuthority,\r\n        desc: ClientConfigurationErrorMessages[untrustedAuthority],\r\n    },\r\n    missingSshJwk: {\r\n        code: missingSshJwk,\r\n        desc: ClientConfigurationErrorMessages[missingSshJwk],\r\n    },\r\n    missingSshKid: {\r\n        code: missingSshKid,\r\n        desc: ClientConfigurationErrorMessages[missingSshKid],\r\n    },\r\n    missingNonceAuthenticationHeader: {\r\n        code: missingNonceAuthenticationHeader,\r\n        desc: ClientConfigurationErrorMessages[missingNonceAuthenticationHeader],\r\n    },\r\n    invalidAuthenticationHeader: {\r\n        code: invalidAuthenticationHeader,\r\n        desc: ClientConfigurationErrorMessages[invalidAuthenticationHeader],\r\n    },\r\n    cannotSetOIDCOptions: {\r\n        code: cannotSetOIDCOptions,\r\n        desc: ClientConfigurationErrorMessages[cannotSetOIDCOptions],\r\n    },\r\n    cannotAllowPlatformBroker: {\r\n        code: cannotAllowPlatformBroker,\r\n        desc: ClientConfigurationErrorMessages[cannotAllowPlatformBroker],\r\n    },\r\n    authorityMismatch: {\r\n        code: authorityMismatch,\r\n        desc: ClientConfigurationErrorMessages[authorityMismatch],\r\n    },\r\n    invalidAuthorizePostBodyParameters: {\r\n        code: invalidAuthorizePostBodyParameters,\r\n        desc: ClientConfigurationErrorMessages[invalidAuthorizePostBodyParameters],\r\n    },\r\n    invalidRequestMethodForEAR: {\r\n        code: invalidRequestMethodForEAR,\r\n        desc: ClientConfigurationErrorMessages[invalidRequestMethodForEAR],\r\n    },\r\n};\r\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\r\nclass ClientConfigurationError extends AuthError {\r\n    constructor(errorCode) {\r\n        super(errorCode, ClientConfigurationErrorMessages[errorCode]);\r\n        this.name = \"ClientConfigurationError\";\r\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\r\n    }\r\n}\r\nfunction createClientConfigurationError(errorCode) {\r\n    return new ClientConfigurationError(errorCode);\r\n}\n\nexport { ClientConfigurationError, ClientConfigurationErrorMessage, ClientConfigurationErrorMessages, createClientConfigurationError };\n//# sourceMappingURL=ClientConfigurationError.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * @hidden\r\n */\r\nclass StringUtils {\r\n    /**\r\n     * Check if stringified object is empty\r\n     * @param strObj\r\n     */\r\n    static isEmptyObj(strObj) {\r\n        if (strObj) {\r\n            try {\r\n                const obj = JSON.parse(strObj);\r\n                return Object.keys(obj).length === 0;\r\n            }\r\n            catch (e) { }\r\n        }\r\n        return true;\r\n    }\r\n    static startsWith(str, search) {\r\n        return str.indexOf(search) === 0;\r\n    }\r\n    static endsWith(str, search) {\r\n        return (str.length >= search.length &&\r\n            str.lastIndexOf(search) === str.length - search.length);\r\n    }\r\n    /**\r\n     * Parses string into an object.\r\n     *\r\n     * @param query\r\n     */\r\n    static queryStringToObject(query) {\r\n        const obj = {};\r\n        const params = query.split(\"&\");\r\n        const decode = (s) => decodeURIComponent(s.replace(/\\+/g, \" \"));\r\n        params.forEach((pair) => {\r\n            if (pair.trim()) {\r\n                const [key, value] = pair.split(/=(.+)/g, 2); // Split on the first occurence of the '=' character\r\n                if (key && value) {\r\n                    obj[decode(key)] = decode(value);\r\n                }\r\n            }\r\n        });\r\n        return obj;\r\n    }\r\n    /**\r\n     * Trims entries in an array.\r\n     *\r\n     * @param arr\r\n     */\r\n    static trimArrayEntries(arr) {\r\n        return arr.map((entry) => entry.trim());\r\n    }\r\n    /**\r\n     * Removes empty strings from array\r\n     * @param arr\r\n     */\r\n    static removeEmptyStringsFromArray(arr) {\r\n        return arr.filter((entry) => {\r\n            return !!entry;\r\n        });\r\n    }\r\n    /**\r\n     * Attempts to parse a string into JSON\r\n     * @param str\r\n     */\r\n    static jsonParseHelper(str) {\r\n        try {\r\n            return JSON.parse(str);\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Tests if a given string matches a given pattern, with support for wildcards and queries.\r\n     * @param pattern Wildcard pattern to string match. Supports \"*\" for wildcards and \"?\" for queries\r\n     * @param input String to match against\r\n     */\r\n    static matchPattern(pattern, input) {\r\n        /**\r\n         * Wildcard support: https://stackoverflow.com/a/3117248/4888559\r\n         * Queries: replaces \"?\" in string with escaped \"\\?\" for regex test\r\n         */\r\n        // eslint-disable-next-line security/detect-non-literal-regexp\r\n        const regex = new RegExp(pattern\r\n            .replace(/\\\\/g, \"\\\\\\\\\")\r\n            .replace(/\\*/g, \"[^ ]*\")\r\n            .replace(/\\?/g, \"\\\\?\"));\r\n        return regex.test(input);\r\n    }\r\n}\n\nexport { StringUtils };\n//# sourceMappingURL=StringUtils.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Constants, OIDC_DEFAULT_SCOPES, OIDC_SCOPES } from '../utils/Constants.mjs';\nimport { emptyInputScopesError } from '../error/ClientConfigurationErrorCodes.mjs';\nimport { cannotAppendScopeSet, cannotRemoveEmptyScope, emptyInputScopeSet } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The ScopeSet class creates a set of scopes. Scopes are case-insensitive, unique values, so the Set object in JS makes\r\n * the most sense to implement for this class. All scopes are trimmed and converted to lower case strings in intersection and union functions\r\n * to ensure uniqueness of strings.\r\n */\r\nclass ScopeSet {\r\n    constructor(inputScopes) {\r\n        // Filter empty string and null/undefined array items\r\n        const scopeArr = inputScopes\r\n            ? StringUtils.trimArrayEntries([...inputScopes])\r\n            : [];\r\n        const filteredInput = scopeArr\r\n            ? StringUtils.removeEmptyStringsFromArray(scopeArr)\r\n            : [];\r\n        // Check if scopes array has at least one member\r\n        if (!filteredInput || !filteredInput.length) {\r\n            throw createClientConfigurationError(emptyInputScopesError);\r\n        }\r\n        this.scopes = new Set(); // Iterator in constructor not supported by IE11\r\n        filteredInput.forEach((scope) => this.scopes.add(scope));\r\n    }\r\n    /**\r\n     * Factory method to create ScopeSet from space-delimited string\r\n     * @param inputScopeString\r\n     * @param appClientId\r\n     * @param scopesRequired\r\n     */\r\n    static fromString(inputScopeString) {\r\n        const scopeString = inputScopeString || Constants.EMPTY_STRING;\r\n        const inputScopes = scopeString.split(\" \");\r\n        return new ScopeSet(inputScopes);\r\n    }\r\n    /**\r\n     * Creates the set of scopes to search for in cache lookups\r\n     * @param inputScopeString\r\n     * @returns\r\n     */\r\n    static createSearchScopes(inputScopeString) {\r\n        // Handle empty scopes by using default OIDC scopes for cache lookup\r\n        const scopesToUse = inputScopeString && inputScopeString.length > 0\r\n            ? inputScopeString\r\n            : [...OIDC_DEFAULT_SCOPES];\r\n        const scopeSet = new ScopeSet(scopesToUse);\r\n        if (!scopeSet.containsOnlyOIDCScopes()) {\r\n            scopeSet.removeOIDCScopes();\r\n        }\r\n        else {\r\n            scopeSet.removeScope(Constants.OFFLINE_ACCESS_SCOPE);\r\n        }\r\n        return scopeSet;\r\n    }\r\n    /**\r\n     * Check if a given scope is present in this set of scopes.\r\n     * @param scope\r\n     */\r\n    containsScope(scope) {\r\n        const lowerCaseScopes = this.printScopesLowerCase().split(\" \");\r\n        const lowerCaseScopesSet = new ScopeSet(lowerCaseScopes);\r\n        // compare lowercase scopes\r\n        return scope\r\n            ? lowerCaseScopesSet.scopes.has(scope.toLowerCase())\r\n            : false;\r\n    }\r\n    /**\r\n     * Check if a set of scopes is present in this set of scopes.\r\n     * @param scopeSet\r\n     */\r\n    containsScopeSet(scopeSet) {\r\n        if (!scopeSet || scopeSet.scopes.size <= 0) {\r\n            return false;\r\n        }\r\n        return (this.scopes.size >= scopeSet.scopes.size &&\r\n            scopeSet.asArray().every((scope) => this.containsScope(scope)));\r\n    }\r\n    /**\r\n     * Check if set of scopes contains only the defaults\r\n     */\r\n    containsOnlyOIDCScopes() {\r\n        let defaultScopeCount = 0;\r\n        OIDC_SCOPES.forEach((defaultScope) => {\r\n            if (this.containsScope(defaultScope)) {\r\n                defaultScopeCount += 1;\r\n            }\r\n        });\r\n        return this.scopes.size === defaultScopeCount;\r\n    }\r\n    /**\r\n     * Appends single scope if passed\r\n     * @param newScope\r\n     */\r\n    appendScope(newScope) {\r\n        if (newScope) {\r\n            this.scopes.add(newScope.trim());\r\n        }\r\n    }\r\n    /**\r\n     * Appends multiple scopes if passed\r\n     * @param newScopes\r\n     */\r\n    appendScopes(newScopes) {\r\n        try {\r\n            newScopes.forEach((newScope) => this.appendScope(newScope));\r\n        }\r\n        catch (e) {\r\n            throw createClientAuthError(cannotAppendScopeSet);\r\n        }\r\n    }\r\n    /**\r\n     * Removes element from set of scopes.\r\n     * @param scope\r\n     */\r\n    removeScope(scope) {\r\n        if (!scope) {\r\n            throw createClientAuthError(cannotRemoveEmptyScope);\r\n        }\r\n        this.scopes.delete(scope.trim());\r\n    }\r\n    /**\r\n     * Removes default scopes from set of scopes\r\n     * Primarily used to prevent cache misses if the default scopes are not returned from the server\r\n     */\r\n    removeOIDCScopes() {\r\n        OIDC_SCOPES.forEach((defaultScope) => {\r\n            this.scopes.delete(defaultScope);\r\n        });\r\n    }\r\n    /**\r\n     * Combines an array of scopes with the current set of scopes.\r\n     * @param otherScopes\r\n     */\r\n    unionScopeSets(otherScopes) {\r\n        if (!otherScopes) {\r\n            throw createClientAuthError(emptyInputScopeSet);\r\n        }\r\n        const unionScopes = new Set(); // Iterator in constructor not supported in IE11\r\n        otherScopes.scopes.forEach((scope) => unionScopes.add(scope.toLowerCase()));\r\n        this.scopes.forEach((scope) => unionScopes.add(scope.toLowerCase()));\r\n        return unionScopes;\r\n    }\r\n    /**\r\n     * Check if scopes intersect between this set and another.\r\n     * @param otherScopes\r\n     */\r\n    intersectingScopeSets(otherScopes) {\r\n        if (!otherScopes) {\r\n            throw createClientAuthError(emptyInputScopeSet);\r\n        }\r\n        // Do not allow OIDC scopes to be the only intersecting scopes\r\n        if (!otherScopes.containsOnlyOIDCScopes()) {\r\n            otherScopes.removeOIDCScopes();\r\n        }\r\n        const unionScopes = this.unionScopeSets(otherScopes);\r\n        const sizeOtherScopes = otherScopes.getScopeCount();\r\n        const sizeThisScopes = this.getScopeCount();\r\n        const sizeUnionScopes = unionScopes.size;\r\n        return sizeUnionScopes < sizeThisScopes + sizeOtherScopes;\r\n    }\r\n    /**\r\n     * Returns size of set of scopes.\r\n     */\r\n    getScopeCount() {\r\n        return this.scopes.size;\r\n    }\r\n    /**\r\n     * Returns the scopes as an array of string values\r\n     */\r\n    asArray() {\r\n        const array = [];\r\n        this.scopes.forEach((val) => array.push(val));\r\n        return array;\r\n    }\r\n    /**\r\n     * Prints scopes into a space-delimited string\r\n     */\r\n    printScopes() {\r\n        if (this.scopes) {\r\n            const scopeArr = this.asArray();\r\n            return scopeArr.join(\" \");\r\n        }\r\n        return Constants.EMPTY_STRING;\r\n    }\r\n    /**\r\n     * Prints scopes into a space-delimited lower-case string (used for caching)\r\n     */\r\n    printScopesLowerCase() {\r\n        return this.printScopes().toLowerCase();\r\n    }\r\n}\n\nexport { ScopeSet };\n//# sourceMappingURL=ScopeSet.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Returns true if tenantId matches the utid portion of homeAccountId\r\n * @param tenantId\r\n * @param homeAccountId\r\n * @returns\r\n */\r\nfunction tenantIdMatchesHomeTenant(tenantId, homeAccountId) {\r\n    return (!!tenantId &&\r\n        !!homeAccountId &&\r\n        tenantId === homeAccountId.split(\".\")[1]);\r\n}\r\n/**\r\n * Build tenant profile\r\n * @param homeAccountId - Home account identifier for this account object\r\n * @param localAccountId - Local account identifer for this account object\r\n * @param tenantId - Full tenant or organizational id that this account belongs to\r\n * @param idTokenClaims - Claims from the ID token\r\n * @returns\r\n */\r\nfunction buildTenantProfile(homeAccountId, localAccountId, tenantId, idTokenClaims) {\r\n    if (idTokenClaims) {\r\n        const { oid, sub, tid, name, tfp, acr, preferred_username, upn, login_hint, } = idTokenClaims;\r\n        /**\r\n         * Since there is no way to determine if the authority is AAD or B2C, we exhaust all the possible claims that can serve as tenant ID with the following precedence:\r\n         * tid - TenantID claim that identifies the tenant that issued the token in AAD. Expected in all AAD ID tokens, not present in B2C ID Tokens.\r\n         * tfp - Trust Framework Policy claim that identifies the policy that was used to authenticate the user. Functions as tenant for B2C scenarios.\r\n         * acr - Authentication Context Class Reference claim used only with older B2C policies. Fallback in case tfp is not present, but likely won't be present anyway.\r\n         */\r\n        const tenantId = tid || tfp || acr || \"\";\r\n        return {\r\n            tenantId: tenantId,\r\n            localAccountId: oid || sub || \"\",\r\n            name: name,\r\n            username: preferred_username || upn || \"\",\r\n            loginHint: login_hint,\r\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId),\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            tenantId,\r\n            localAccountId,\r\n            username: \"\",\r\n            isHomeTenant: tenantIdMatchesHomeTenant(tenantId, homeAccountId),\r\n        };\r\n    }\r\n}\r\n/**\r\n * Replaces account info that varies by tenant profile sourced from the ID token claims passed in with the tenant-specific account info\r\n * @param baseAccountInfo\r\n * @param idTokenClaims\r\n * @returns\r\n */\r\nfunction updateAccountTenantProfileData(baseAccountInfo, tenantProfile, idTokenClaims, idTokenSecret) {\r\n    let updatedAccountInfo = baseAccountInfo;\r\n    // Tenant Profile overrides passed in account info\r\n    if (tenantProfile) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const { isHomeTenant, ...tenantProfileOverride } = tenantProfile;\r\n        updatedAccountInfo = { ...baseAccountInfo, ...tenantProfileOverride };\r\n    }\r\n    // ID token claims override passed in account info and tenant profile\r\n    if (idTokenClaims) {\r\n        // Ignore isHomeTenant, loginHint, and sid which are part of tenant profile but not base account info\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const { isHomeTenant, ...claimsSourcedTenantProfile } = buildTenantProfile(baseAccountInfo.homeAccountId, baseAccountInfo.localAccountId, baseAccountInfo.tenantId, idTokenClaims);\r\n        updatedAccountInfo = {\r\n            ...updatedAccountInfo,\r\n            ...claimsSourcedTenantProfile,\r\n            idTokenClaims: idTokenClaims,\r\n            idToken: idTokenSecret,\r\n        };\r\n        return updatedAccountInfo;\r\n    }\r\n    return updatedAccountInfo;\r\n}\n\nexport { buildTenantProfile, tenantIdMatchesHomeTenant, updateAccountTenantProfileData };\n//# sourceMappingURL=AccountInfo.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { tokenParsingError, nullOrEmptyToken, maxAgeTranspired } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Extract token by decoding the rawToken\r\n *\r\n * @param encodedToken\r\n */\r\nfunction extractTokenClaims(encodedToken, base64Decode) {\r\n    const jswPayload = getJWSPayload(encodedToken);\r\n    // token will be decoded to get the username\r\n    try {\r\n        // base64Decode() should throw an error if there is an issue\r\n        const base64Decoded = base64Decode(jswPayload);\r\n        return JSON.parse(base64Decoded);\r\n    }\r\n    catch (err) {\r\n        throw createClientAuthError(tokenParsingError);\r\n    }\r\n}\r\n/**\r\n * decode a JWT\r\n *\r\n * @param authToken\r\n */\r\nfunction getJWSPayload(authToken) {\r\n    if (!authToken) {\r\n        throw createClientAuthError(nullOrEmptyToken);\r\n    }\r\n    const tokenPartsRegex = /^([^\\.\\s]*)\\.([^\\.\\s]+)\\.([^\\.\\s]*)$/;\r\n    const matches = tokenPartsRegex.exec(authToken);\r\n    if (!matches || matches.length < 4) {\r\n        throw createClientAuthError(tokenParsingError);\r\n    }\r\n    /**\r\n     * const crackedToken = {\r\n     *  header: matches[1],\r\n     *  JWSPayload: matches[2],\r\n     *  JWSSig: matches[3],\r\n     * };\r\n     */\r\n    return matches[2];\r\n}\r\n/**\r\n * Determine if the token's max_age has transpired\r\n */\r\nfunction checkMaxAge(authTime, maxAge) {\r\n    /*\r\n     * per https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest\r\n     * To force an immediate re-authentication: If an app requires that a user re-authenticate prior to access,\r\n     * provide a value of 0 for the max_age parameter and the AS will force a fresh login.\r\n     */\r\n    const fiveMinuteSkew = 300000; // five minutes in milliseconds\r\n    if (maxAge === 0 || Date.now() - fiveMinuteSkew > authTime + maxAge) {\r\n        throw createClientAuthError(maxAgeTranspired);\r\n    }\r\n}\n\nexport { checkMaxAge, extractTokenClaims, getJWSPayload };\n//# sourceMappingURL=AuthToken.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { StringUtils } from './StringUtils.mjs';\nimport { hashNotDeserialized } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Canonicalizes a URL by making it lowercase and ensuring it ends with /\r\n * Inlined version of UrlString.canonicalizeUri to avoid circular dependency\r\n * @param url - URL to canonicalize\r\n * @returns Canonicalized URL\r\n */\r\nfunction canonicalizeUrl(url) {\r\n    if (!url) {\r\n        return url;\r\n    }\r\n    let lowerCaseUrl = url.toLowerCase();\r\n    if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\r\n        lowerCaseUrl = lowerCaseUrl.slice(0, -1);\r\n    }\r\n    else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\r\n        lowerCaseUrl = lowerCaseUrl.slice(0, -2);\r\n    }\r\n    if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\r\n        lowerCaseUrl += \"/\";\r\n    }\r\n    return lowerCaseUrl;\r\n}\r\n/**\r\n * Parses hash string from given string. Returns empty string if no hash symbol is found.\r\n * @param hashString\r\n */\r\nfunction stripLeadingHashOrQuery(responseString) {\r\n    if (responseString.startsWith(\"#/\")) {\r\n        return responseString.substring(2);\r\n    }\r\n    else if (responseString.startsWith(\"#\") ||\r\n        responseString.startsWith(\"?\")) {\r\n        return responseString.substring(1);\r\n    }\r\n    return responseString;\r\n}\r\n/**\r\n * Returns URL hash as server auth code response object.\r\n */\r\nfunction getDeserializedResponse(responseString) {\r\n    // Check if given hash is empty\r\n    if (!responseString || responseString.indexOf(\"=\") < 0) {\r\n        return null;\r\n    }\r\n    try {\r\n        // Strip the # or ? symbol if present\r\n        const normalizedResponse = stripLeadingHashOrQuery(responseString);\r\n        // If # symbol was not present, above will return empty string, so give original hash value\r\n        const deserializedHash = Object.fromEntries(new URLSearchParams(normalizedResponse));\r\n        // Check for known response properties\r\n        if (deserializedHash.code ||\r\n            deserializedHash.ear_jwe ||\r\n            deserializedHash.error ||\r\n            deserializedHash.error_description ||\r\n            deserializedHash.state) {\r\n            return deserializedHash;\r\n        }\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(hashNotDeserialized);\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Utility to create a URL from the params map\r\n */\r\nfunction mapToQueryString(parameters, encodeExtraParams = true, extraQueryParameters) {\r\n    const queryParameterArray = new Array();\r\n    parameters.forEach((value, key) => {\r\n        if (!encodeExtraParams &&\r\n            extraQueryParameters &&\r\n            key in extraQueryParameters) {\r\n            queryParameterArray.push(`${key}=${value}`);\r\n        }\r\n        else {\r\n            queryParameterArray.push(`${key}=${encodeURIComponent(value)}`);\r\n        }\r\n    });\r\n    return queryParameterArray.join(\"&\");\r\n}\r\n/**\r\n * Normalizes URLs for comparison by removing hash, canonicalizing,\r\n * and ensuring consistent URL encoding in query parameters.\r\n * This fixes redirect loops when URLs contain encoded characters like apostrophes (%27).\r\n * @param url - URL to normalize\r\n * @returns Normalized URL string for comparison\r\n */\r\nfunction normalizeUrlForComparison(url) {\r\n    if (!url) {\r\n        return url;\r\n    }\r\n    // Remove hash first\r\n    const urlWithoutHash = url.split(\"#\")[0];\r\n    try {\r\n        // Parse the URL to handle encoding consistently\r\n        const urlObj = new URL(urlWithoutHash);\r\n        /*\r\n         * Reconstruct the URL with properly decoded query parameters\r\n         * This ensures that %27 and ' are treated as equivalent\r\n         */\r\n        const normalizedUrl = urlObj.origin + urlObj.pathname + urlObj.search;\r\n        // Apply canonicalization logic inline to avoid circular dependency\r\n        return canonicalizeUrl(normalizedUrl);\r\n    }\r\n    catch (e) {\r\n        // Fallback to original logic if URL parsing fails\r\n        return canonicalizeUrl(urlWithoutHash);\r\n    }\r\n}\n\nexport { getDeserializedResponse, mapToQueryString, normalizeUrlForComparison, stripLeadingHashOrQuery };\n//# sourceMappingURL=UrlUtils.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { AADAuthorityConstants, Constants } from '../utils/Constants.mjs';\nimport { getDeserializedResponse } from '../utils/UrlUtils.mjs';\nimport { urlEmptyError, urlParseError, authorityUriInsecure } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Url object class which can perform various transformations on url strings.\r\n */\r\nclass UrlString {\r\n    get urlString() {\r\n        return this._urlString;\r\n    }\r\n    constructor(url) {\r\n        this._urlString = url;\r\n        if (!this._urlString) {\r\n            // Throws error if url is empty\r\n            throw createClientConfigurationError(urlEmptyError);\r\n        }\r\n        if (!url.includes(\"#\")) {\r\n            this._urlString = UrlString.canonicalizeUri(url);\r\n        }\r\n    }\r\n    /**\r\n     * Ensure urls are lower case and end with a / character.\r\n     * @param url\r\n     */\r\n    static canonicalizeUri(url) {\r\n        if (url) {\r\n            let lowerCaseUrl = url.toLowerCase();\r\n            if (StringUtils.endsWith(lowerCaseUrl, \"?\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -1);\r\n            }\r\n            else if (StringUtils.endsWith(lowerCaseUrl, \"?/\")) {\r\n                lowerCaseUrl = lowerCaseUrl.slice(0, -2);\r\n            }\r\n            if (!StringUtils.endsWith(lowerCaseUrl, \"/\")) {\r\n                lowerCaseUrl += \"/\";\r\n            }\r\n            return lowerCaseUrl;\r\n        }\r\n        return url;\r\n    }\r\n    /**\r\n     * Throws if urlString passed is not a valid authority URI string.\r\n     */\r\n    validateAsUri() {\r\n        // Attempts to parse url for uri components\r\n        let components;\r\n        try {\r\n            components = this.getUrlComponents();\r\n        }\r\n        catch (e) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        // Throw error if URI or path segments are not parseable.\r\n        if (!components.HostNameAndPort || !components.PathSegments) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        // Throw error if uri is insecure.\r\n        if (!components.Protocol ||\r\n            components.Protocol.toLowerCase() !== \"https:\") {\r\n            throw createClientConfigurationError(authorityUriInsecure);\r\n        }\r\n    }\r\n    /**\r\n     * Given a url and a query string return the url with provided query string appended\r\n     * @param url\r\n     * @param queryString\r\n     */\r\n    static appendQueryString(url, queryString) {\r\n        if (!queryString) {\r\n            return url;\r\n        }\r\n        return url.indexOf(\"?\") < 0\r\n            ? `${url}?${queryString}`\r\n            : `${url}&${queryString}`;\r\n    }\r\n    /**\r\n     * Returns a url with the hash removed\r\n     * @param url\r\n     */\r\n    static removeHashFromUrl(url) {\r\n        return UrlString.canonicalizeUri(url.split(\"#\")[0]);\r\n    }\r\n    /**\r\n     * Given a url like https://a:b/common/d?e=f#g, and a tenantId, returns https://a:b/tenantId/d\r\n     * @param href The url\r\n     * @param tenantId The tenant id to replace\r\n     */\r\n    replaceTenantPath(tenantId) {\r\n        const urlObject = this.getUrlComponents();\r\n        const pathArray = urlObject.PathSegments;\r\n        if (tenantId &&\r\n            pathArray.length !== 0 &&\r\n            (pathArray[0] === AADAuthorityConstants.COMMON ||\r\n                pathArray[0] === AADAuthorityConstants.ORGANIZATIONS)) {\r\n            pathArray[0] = tenantId;\r\n        }\r\n        return UrlString.constructAuthorityUriFromObject(urlObject);\r\n    }\r\n    /**\r\n     * Parses out the components from a url string.\r\n     * @returns An object with the various components. Please cache this value insted of calling this multiple times on the same url.\r\n     */\r\n    getUrlComponents() {\r\n        // https://gist.github.com/curtisz/11139b2cfcaef4a261e0\r\n        const regEx = RegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");\r\n        // If url string does not match regEx, we throw an error\r\n        const match = this.urlString.match(regEx);\r\n        if (!match) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        // Url component object\r\n        const urlComponents = {\r\n            Protocol: match[1],\r\n            HostNameAndPort: match[4],\r\n            AbsolutePath: match[5],\r\n            QueryString: match[7],\r\n        };\r\n        let pathSegments = urlComponents.AbsolutePath.split(\"/\");\r\n        pathSegments = pathSegments.filter((val) => val && val.length > 0); // remove empty elements\r\n        urlComponents.PathSegments = pathSegments;\r\n        if (urlComponents.QueryString &&\r\n            urlComponents.QueryString.endsWith(\"/\")) {\r\n            urlComponents.QueryString = urlComponents.QueryString.substring(0, urlComponents.QueryString.length - 1);\r\n        }\r\n        return urlComponents;\r\n    }\r\n    static getDomainFromUrl(url) {\r\n        const regEx = RegExp(\"^([^:/?#]+://)?([^/?#]*)\");\r\n        const match = url.match(regEx);\r\n        if (!match) {\r\n            throw createClientConfigurationError(urlParseError);\r\n        }\r\n        return match[2];\r\n    }\r\n    static getAbsoluteUrl(relativeUrl, baseUrl) {\r\n        if (relativeUrl[0] === Constants.FORWARD_SLASH) {\r\n            const url = new UrlString(baseUrl);\r\n            const baseComponents = url.getUrlComponents();\r\n            return (baseComponents.Protocol +\r\n                \"//\" +\r\n                baseComponents.HostNameAndPort +\r\n                relativeUrl);\r\n        }\r\n        return relativeUrl;\r\n    }\r\n    static constructAuthorityUriFromObject(urlObject) {\r\n        return new UrlString(urlObject.Protocol +\r\n            \"//\" +\r\n            urlObject.HostNameAndPort +\r\n            \"/\" +\r\n            urlObject.PathSegments.join(\"/\"));\r\n    }\r\n    /**\r\n     * Check if the hash of the URL string contains known properties\r\n     * @deprecated This API will be removed in a future version\r\n     */\r\n    static hashContainsKnownProperties(response) {\r\n        return !!getDeserializedResponse(response);\r\n    }\r\n}\n\nexport { UrlString };\n//# sourceMappingURL=UrlString.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { AuthorityMetadataSource } from '../utils/Constants.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst rawMetdataJSON = {\r\n    endpointMetadata: {\r\n        \"login.microsoftonline.com\": {\r\n            token_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/token\",\r\n            jwks_uri: \"https://login.microsoftonline.com/{tenantid}/discovery/v2.0/keys\",\r\n            issuer: \"https://login.microsoftonline.com/{tenantid}/v2.0\",\r\n            authorization_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/authorize\",\r\n            end_session_endpoint: \"https://login.microsoftonline.com/{tenantid}/oauth2/v2.0/logout\",\r\n        },\r\n        \"login.chinacloudapi.cn\": {\r\n            token_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/token\",\r\n            jwks_uri: \"https://login.chinacloudapi.cn/{tenantid}/discovery/v2.0/keys\",\r\n            issuer: \"https://login.partner.microsoftonline.cn/{tenantid}/v2.0\",\r\n            authorization_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/authorize\",\r\n            end_session_endpoint: \"https://login.chinacloudapi.cn/{tenantid}/oauth2/v2.0/logout\",\r\n        },\r\n        \"login.microsoftonline.us\": {\r\n            token_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/token\",\r\n            jwks_uri: \"https://login.microsoftonline.us/{tenantid}/discovery/v2.0/keys\",\r\n            issuer: \"https://login.microsoftonline.us/{tenantid}/v2.0\",\r\n            authorization_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/authorize\",\r\n            end_session_endpoint: \"https://login.microsoftonline.us/{tenantid}/oauth2/v2.0/logout\",\r\n        },\r\n    },\r\n    instanceDiscoveryMetadata: {\r\n        metadata: [\r\n            {\r\n                preferred_network: \"login.microsoftonline.com\",\r\n                preferred_cache: \"login.windows.net\",\r\n                aliases: [\r\n                    \"login.microsoftonline.com\",\r\n                    \"login.windows.net\",\r\n                    \"login.microsoft.com\",\r\n                    \"sts.windows.net\",\r\n                ],\r\n            },\r\n            {\r\n                preferred_network: \"login.partner.microsoftonline.cn\",\r\n                preferred_cache: \"login.partner.microsoftonline.cn\",\r\n                aliases: [\r\n                    \"login.partner.microsoftonline.cn\",\r\n                    \"login.chinacloudapi.cn\",\r\n                ],\r\n            },\r\n            {\r\n                preferred_network: \"login.microsoftonline.de\",\r\n                preferred_cache: \"login.microsoftonline.de\",\r\n                aliases: [\"login.microsoftonline.de\"],\r\n            },\r\n            {\r\n                preferred_network: \"login.microsoftonline.us\",\r\n                preferred_cache: \"login.microsoftonline.us\",\r\n                aliases: [\r\n                    \"login.microsoftonline.us\",\r\n                    \"login.usgovcloudapi.net\",\r\n                ],\r\n            },\r\n            {\r\n                preferred_network: \"login-us.microsoftonline.com\",\r\n                preferred_cache: \"login-us.microsoftonline.com\",\r\n                aliases: [\"login-us.microsoftonline.com\"],\r\n            },\r\n        ],\r\n    },\r\n};\r\nconst EndpointMetadata = rawMetdataJSON.endpointMetadata;\r\nconst InstanceDiscoveryMetadata = rawMetdataJSON.instanceDiscoveryMetadata;\r\nconst InstanceDiscoveryMetadataAliases = new Set();\r\nInstanceDiscoveryMetadata.metadata.forEach((metadataEntry) => {\r\n    metadataEntry.aliases.forEach((alias) => {\r\n        InstanceDiscoveryMetadataAliases.add(alias);\r\n    });\r\n});\r\n/**\r\n * Attempts to get an aliases array from the static authority metadata sources based on the canonical authority host\r\n * @param staticAuthorityOptions\r\n * @param logger\r\n * @returns\r\n */\r\nfunction getAliasesFromStaticSources(staticAuthorityOptions, logger) {\r\n    let staticAliases;\r\n    const canonicalAuthority = staticAuthorityOptions.canonicalAuthority;\r\n    if (canonicalAuthority) {\r\n        const authorityHost = new UrlString(canonicalAuthority).getUrlComponents().HostNameAndPort;\r\n        staticAliases =\r\n            getAliasesFromMetadata(authorityHost, staticAuthorityOptions.cloudDiscoveryMetadata?.metadata, AuthorityMetadataSource.CONFIG, logger) ||\r\n                getAliasesFromMetadata(authorityHost, InstanceDiscoveryMetadata.metadata, AuthorityMetadataSource.HARDCODED_VALUES, logger) ||\r\n                staticAuthorityOptions.knownAuthorities;\r\n    }\r\n    return staticAliases || [];\r\n}\r\n/**\r\n * Returns aliases for from the raw cloud discovery metadata passed in\r\n * @param authorityHost\r\n * @param rawCloudDiscoveryMetadata\r\n * @returns\r\n */\r\nfunction getAliasesFromMetadata(authorityHost, cloudDiscoveryMetadata, source, logger) {\r\n    logger?.trace(`getAliasesFromMetadata called with source: ${source}`);\r\n    if (authorityHost && cloudDiscoveryMetadata) {\r\n        const metadata = getCloudDiscoveryMetadataFromNetworkResponse(cloudDiscoveryMetadata, authorityHost);\r\n        if (metadata) {\r\n            logger?.trace(`getAliasesFromMetadata: found cloud discovery metadata in ${source}, returning aliases`);\r\n            return metadata.aliases;\r\n        }\r\n        else {\r\n            logger?.trace(`getAliasesFromMetadata: did not find cloud discovery metadata in ${source}`);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Get cloud discovery metadata for common authorities\r\n */\r\nfunction getCloudDiscoveryMetadataFromHardcodedValues(authorityHost) {\r\n    const metadata = getCloudDiscoveryMetadataFromNetworkResponse(InstanceDiscoveryMetadata.metadata, authorityHost);\r\n    return metadata;\r\n}\r\n/**\r\n * Searches instance discovery network response for the entry that contains the host in the aliases list\r\n * @param response\r\n * @param authority\r\n */\r\nfunction getCloudDiscoveryMetadataFromNetworkResponse(response, authorityHost) {\r\n    for (let i = 0; i < response.length; i++) {\r\n        const metadata = response[i];\r\n        if (metadata.aliases.includes(authorityHost)) {\r\n            return metadata;\r\n        }\r\n    }\r\n    return null;\r\n}\n\nexport { EndpointMetadata, InstanceDiscoveryMetadata, InstanceDiscoveryMetadataAliases, getAliasesFromMetadata, getAliasesFromStaticSources, getCloudDiscoveryMetadataFromHardcodedValues, getCloudDiscoveryMetadataFromNetworkResponse, rawMetdataJSON };\n//# sourceMappingURL=AuthorityMetadata.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst cacheQuotaExceeded = \"cache_quota_exceeded\";\r\nconst cacheErrorUnknown = \"cache_error_unknown\";\n\nexport { cacheErrorUnknown, cacheQuotaExceeded };\n//# sourceMappingURL=CacheErrorCodes.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { AuthError } from './AuthError.mjs';\nimport { cacheErrorUnknown, cacheQuotaExceeded } from './CacheErrorCodes.mjs';\nimport * as CacheErrorCodes from './CacheErrorCodes.mjs';\nexport { CacheErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst CacheErrorMessages = {\r\n    [cacheQuotaExceeded]: \"Exceeded cache storage capacity.\",\r\n    [cacheErrorUnknown]: \"Unexpected error occurred when using cache storage.\",\r\n};\r\n/**\r\n * Error thrown when there is an error with the cache\r\n */\r\nclass CacheError extends AuthError {\r\n    constructor(errorCode, errorMessage) {\r\n        const message = errorMessage ||\r\n            (CacheErrorMessages[errorCode]\r\n                ? CacheErrorMessages[errorCode]\r\n                : CacheErrorMessages[cacheErrorUnknown]);\r\n        super(`${errorCode}: ${message}`);\r\n        Object.setPrototypeOf(this, CacheError.prototype);\r\n        this.name = \"CacheError\";\r\n        this.errorCode = errorCode;\r\n        this.errorMessage = message;\r\n    }\r\n}\r\n/**\r\n * Helper function to wrap browser errors in a CacheError object\r\n * @param e\r\n * @returns\r\n */\r\nfunction createCacheError(e) {\r\n    if (!(e instanceof Error)) {\r\n        return new CacheError(cacheErrorUnknown);\r\n    }\r\n    if (e.name === \"QuotaExceededError\" ||\r\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\" ||\r\n        e.message.includes(\"exceeded the quota\")) {\r\n        return new CacheError(cacheQuotaExceeded);\r\n    }\r\n    else {\r\n        return new CacheError(e.name, e.message);\r\n    }\r\n}\n\nexport { CacheError, CacheErrorMessages, createCacheError };\n//# sourceMappingURL=CacheError.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { CredentialType, AuthenticationScheme, THE_FAMILY_ID, APP_METADATA, AUTHORITY_METADATA_CONSTANTS } from '../utils/Constants.mjs';\nimport { ScopeSet } from '../request/ScopeSet.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { updateAccountTenantProfileData } from '../account/AccountInfo.mjs';\nimport { extractTokenClaims } from '../account/AuthToken.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { getAliasesFromStaticSources } from '../authority/AuthorityMetadata.mjs';\nimport { createCacheError } from '../error/CacheError.mjs';\nimport { AuthError } from '../error/AuthError.mjs';\nimport { invalidCacheRecord, multipleMatchingAppMetadata, methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Interface class which implement cache storage functions used by MSAL to perform validity checks, and store tokens.\r\n * @internal\r\n */\r\nclass CacheManager {\r\n    constructor(clientId, cryptoImpl, logger, performanceClient, staticAuthorityOptions) {\r\n        this.clientId = clientId;\r\n        this.cryptoImpl = cryptoImpl;\r\n        this.commonLogger = logger.clone(name, version);\r\n        this.staticAuthorityOptions = staticAuthorityOptions;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\r\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\r\n     * @returns Array of AccountInfo objects in cache\r\n     */\r\n    getAllAccounts(accountFilter, correlationId) {\r\n        return this.buildTenantProfiles(this.getAccountsFilteredBy(accountFilter, correlationId), correlationId, accountFilter);\r\n    }\r\n    /**\r\n     * Gets first tenanted AccountInfo object found based on provided filters\r\n     */\r\n    getAccountInfoFilteredBy(accountFilter, correlationId) {\r\n        if (Object.keys(accountFilter).length === 0 ||\r\n            Object.values(accountFilter).every((value) => !value)) {\r\n            this.commonLogger.warning(\"getAccountInfoFilteredBy: Account filter is empty or invalid, returning null\");\r\n            return null;\r\n        }\r\n        const allAccounts = this.getAllAccounts(accountFilter, correlationId);\r\n        if (allAccounts.length > 1) {\r\n            // If one or more accounts are found, prioritize accounts that have an ID token\r\n            const sortedAccounts = allAccounts.sort((account) => {\r\n                return account.idTokenClaims ? -1 : 1;\r\n            });\r\n            return sortedAccounts[0];\r\n        }\r\n        else if (allAccounts.length === 1) {\r\n            // If only one account is found, return it regardless of whether a matching ID token was found\r\n            return allAccounts[0];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Returns a single matching\r\n     * @param accountFilter\r\n     * @returns\r\n     */\r\n    getBaseAccountInfo(accountFilter, correlationId) {\r\n        const accountEntities = this.getAccountsFilteredBy(accountFilter, correlationId);\r\n        if (accountEntities.length > 0) {\r\n            return accountEntities[0].getAccountInfo();\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Matches filtered account entities with cached ID tokens that match the tenant profile-specific account filters\r\n     * and builds the account info objects from the matching ID token's claims\r\n     * @param cachedAccounts\r\n     * @param accountFilter\r\n     * @returns Array of AccountInfo objects that match account and tenant profile filters\r\n     */\r\n    buildTenantProfiles(cachedAccounts, correlationId, accountFilter) {\r\n        return cachedAccounts.flatMap((accountEntity) => {\r\n            return this.getTenantProfilesFromAccountEntity(accountEntity, correlationId, accountFilter?.tenantId, accountFilter);\r\n        });\r\n    }\r\n    getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, correlationId, tenantProfileFilter) {\r\n        let tenantedAccountInfo = null;\r\n        let idTokenClaims;\r\n        if (tenantProfileFilter) {\r\n            if (!this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter)) {\r\n                return null;\r\n            }\r\n        }\r\n        const idToken = this.getIdToken(accountInfo, correlationId, tokenKeys, tenantProfile.tenantId);\r\n        if (idToken) {\r\n            idTokenClaims = extractTokenClaims(idToken.secret, this.cryptoImpl.base64Decode);\r\n            if (!this.idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter)) {\r\n                // ID token sourced claims don't match so this tenant profile is not a match\r\n                return null;\r\n            }\r\n        }\r\n        // Expand tenant profile into account info based on matching tenant profile and if available matching ID token claims\r\n        tenantedAccountInfo = updateAccountTenantProfileData(accountInfo, tenantProfile, idTokenClaims, idToken?.secret);\r\n        return tenantedAccountInfo;\r\n    }\r\n    getTenantProfilesFromAccountEntity(accountEntity, correlationId, targetTenantId, tenantProfileFilter) {\r\n        const accountInfo = accountEntity.getAccountInfo();\r\n        let searchTenantProfiles = accountInfo.tenantProfiles || new Map();\r\n        const tokenKeys = this.getTokenKeys();\r\n        // If a tenant ID was provided, only return the tenant profile for that tenant ID if it exists\r\n        if (targetTenantId) {\r\n            const tenantProfile = searchTenantProfiles.get(targetTenantId);\r\n            if (tenantProfile) {\r\n                // Reduce search field to just this tenant profile\r\n                searchTenantProfiles = new Map([\r\n                    [targetTenantId, tenantProfile],\r\n                ]);\r\n            }\r\n            else {\r\n                // No tenant profile for search tenant ID, return empty array\r\n                return [];\r\n            }\r\n        }\r\n        const matchingTenantProfiles = [];\r\n        searchTenantProfiles.forEach((tenantProfile) => {\r\n            const tenantedAccountInfo = this.getTenantedAccountInfoByFilter(accountInfo, tokenKeys, tenantProfile, correlationId, tenantProfileFilter);\r\n            if (tenantedAccountInfo) {\r\n                matchingTenantProfiles.push(tenantedAccountInfo);\r\n            }\r\n        });\r\n        return matchingTenantProfiles;\r\n    }\r\n    tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter) {\r\n        if (!!tenantProfileFilter.localAccountId &&\r\n            !this.matchLocalAccountIdFromTenantProfile(tenantProfile, tenantProfileFilter.localAccountId)) {\r\n            return false;\r\n        }\r\n        if (!!tenantProfileFilter.name &&\r\n            !(tenantProfile.name === tenantProfileFilter.name)) {\r\n            return false;\r\n        }\r\n        if (tenantProfileFilter.isHomeTenant !== undefined &&\r\n            !(tenantProfile.isHomeTenant === tenantProfileFilter.isHomeTenant)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    idTokenClaimsMatchTenantProfileFilter(idTokenClaims, tenantProfileFilter) {\r\n        // Tenant Profile filtering\r\n        if (tenantProfileFilter) {\r\n            if (!!tenantProfileFilter.localAccountId &&\r\n                !this.matchLocalAccountIdFromTokenClaims(idTokenClaims, tenantProfileFilter.localAccountId)) {\r\n                return false;\r\n            }\r\n            if (!!tenantProfileFilter.loginHint &&\r\n                !this.matchLoginHintFromTokenClaims(idTokenClaims, tenantProfileFilter.loginHint)) {\r\n                return false;\r\n            }\r\n            if (!!tenantProfileFilter.username &&\r\n                !this.matchUsername(idTokenClaims.preferred_username, tenantProfileFilter.username)) {\r\n                return false;\r\n            }\r\n            if (!!tenantProfileFilter.name &&\r\n                !this.matchName(idTokenClaims, tenantProfileFilter.name)) {\r\n                return false;\r\n            }\r\n            if (!!tenantProfileFilter.sid &&\r\n                !this.matchSid(idTokenClaims, tenantProfileFilter.sid)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * saves a cache record\r\n     * @param cacheRecord {CacheRecord}\r\n     * @param storeInCache {?StoreInCache}\r\n     * @param correlationId {?string} correlation id\r\n     */\r\n    async saveCacheRecord(cacheRecord, correlationId, storeInCache) {\r\n        if (!cacheRecord) {\r\n            throw createClientAuthError(invalidCacheRecord);\r\n        }\r\n        try {\r\n            if (!!cacheRecord.account) {\r\n                await this.setAccount(cacheRecord.account, correlationId);\r\n            }\r\n            if (!!cacheRecord.idToken && storeInCache?.idToken !== false) {\r\n                await this.setIdTokenCredential(cacheRecord.idToken, correlationId);\r\n            }\r\n            if (!!cacheRecord.accessToken &&\r\n                storeInCache?.accessToken !== false) {\r\n                await this.saveAccessToken(cacheRecord.accessToken, correlationId);\r\n            }\r\n            if (!!cacheRecord.refreshToken &&\r\n                storeInCache?.refreshToken !== false) {\r\n                await this.setRefreshTokenCredential(cacheRecord.refreshToken, correlationId);\r\n            }\r\n            if (!!cacheRecord.appMetadata) {\r\n                this.setAppMetadata(cacheRecord.appMetadata, correlationId);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.commonLogger?.error(`CacheManager.saveCacheRecord: failed`);\r\n            if (e instanceof AuthError) {\r\n                throw e;\r\n            }\r\n            else {\r\n                throw createCacheError(e);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * saves access token credential\r\n     * @param credential\r\n     */\r\n    async saveAccessToken(credential, correlationId) {\r\n        const accessTokenFilter = {\r\n            clientId: credential.clientId,\r\n            credentialType: credential.credentialType,\r\n            environment: credential.environment,\r\n            homeAccountId: credential.homeAccountId,\r\n            realm: credential.realm,\r\n            tokenType: credential.tokenType,\r\n            requestedClaimsHash: credential.requestedClaimsHash,\r\n        };\r\n        const tokenKeys = this.getTokenKeys();\r\n        const currentScopes = ScopeSet.fromString(credential.target);\r\n        tokenKeys.accessToken.forEach((key) => {\r\n            if (!this.accessTokenKeyMatchesFilter(key, accessTokenFilter, false)) {\r\n                return;\r\n            }\r\n            const tokenEntity = this.getAccessTokenCredential(key, correlationId);\r\n            if (tokenEntity &&\r\n                this.credentialMatchesFilter(tokenEntity, accessTokenFilter)) {\r\n                const tokenScopeSet = ScopeSet.fromString(tokenEntity.target);\r\n                if (tokenScopeSet.intersectingScopeSets(currentScopes)) {\r\n                    this.removeAccessToken(key, correlationId);\r\n                }\r\n            }\r\n        });\r\n        await this.setAccessTokenCredential(credential, correlationId);\r\n    }\r\n    /**\r\n     * Retrieve account entities matching all provided tenant-agnostic filters; if no filter is set, get all account entities in the cache\r\n     * Not checking for casing as keys are all generated in lower case, remember to convert to lower case if object properties are compared\r\n     * @param accountFilter - An object containing Account properties to filter by\r\n     */\r\n    getAccountsFilteredBy(accountFilter, correlationId) {\r\n        const allAccountKeys = this.getAccountKeys();\r\n        const matchingAccounts = [];\r\n        allAccountKeys.forEach((cacheKey) => {\r\n            const entity = this.getAccount(cacheKey, correlationId);\r\n            // Match base account fields\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.homeAccountId &&\r\n                !this.matchHomeAccountId(entity, accountFilter.homeAccountId)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.username &&\r\n                !this.matchUsername(entity.username, accountFilter.username)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.environment &&\r\n                !this.matchEnvironment(entity, accountFilter.environment)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.realm &&\r\n                !this.matchRealm(entity, accountFilter.realm)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.nativeAccountId &&\r\n                !this.matchNativeAccountId(entity, accountFilter.nativeAccountId)) {\r\n                return;\r\n            }\r\n            if (!!accountFilter.authorityType &&\r\n                !this.matchAuthorityType(entity, accountFilter.authorityType)) {\r\n                return;\r\n            }\r\n            // If at least one tenant profile matches the tenant profile filter, add the account to the list of matching accounts\r\n            const tenantProfileFilter = {\r\n                localAccountId: accountFilter?.localAccountId,\r\n                name: accountFilter?.name,\r\n            };\r\n            const matchingTenantProfiles = entity.tenantProfiles?.filter((tenantProfile) => {\r\n                return this.tenantProfileMatchesFilter(tenantProfile, tenantProfileFilter);\r\n            });\r\n            if (matchingTenantProfiles && matchingTenantProfiles.length === 0) {\r\n                // No tenant profile for this account matches filter, don't add to list of matching accounts\r\n                return;\r\n            }\r\n            matchingAccounts.push(entity);\r\n        });\r\n        return matchingAccounts;\r\n    }\r\n    /**\r\n     * Returns whether or not the given credential entity matches the filter\r\n     * @param entity\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    credentialMatchesFilter(entity, filter) {\r\n        if (!!filter.clientId && !this.matchClientId(entity, filter.clientId)) {\r\n            return false;\r\n        }\r\n        if (!!filter.userAssertionHash &&\r\n            !this.matchUserAssertionHash(entity, filter.userAssertionHash)) {\r\n            return false;\r\n        }\r\n        /*\r\n         * homeAccountId can be undefined, and we want to filter out cached items that have a homeAccountId of \"\"\r\n         * because we don't want a client_credential request to return a cached token that has a homeAccountId\r\n         */\r\n        if (typeof filter.homeAccountId === \"string\" &&\r\n            !this.matchHomeAccountId(entity, filter.homeAccountId)) {\r\n            return false;\r\n        }\r\n        if (!!filter.environment &&\r\n            !this.matchEnvironment(entity, filter.environment)) {\r\n            return false;\r\n        }\r\n        if (!!filter.realm && !this.matchRealm(entity, filter.realm)) {\r\n            return false;\r\n        }\r\n        if (!!filter.credentialType &&\r\n            !this.matchCredentialType(entity, filter.credentialType)) {\r\n            return false;\r\n        }\r\n        if (!!filter.familyId && !this.matchFamilyId(entity, filter.familyId)) {\r\n            return false;\r\n        }\r\n        /*\r\n         * idTokens do not have \"target\", target specific refreshTokens do exist for some types of authentication\r\n         * Resource specific refresh tokens case will be added when the support is deemed necessary\r\n         */\r\n        if (!!filter.target && !this.matchTarget(entity, filter.target)) {\r\n            return false;\r\n        }\r\n        // If request OR cached entity has requested Claims Hash, check if they match\r\n        if (filter.requestedClaimsHash || entity.requestedClaimsHash) {\r\n            // Don't match if either is undefined or they are different\r\n            if (entity.requestedClaimsHash !== filter.requestedClaimsHash) {\r\n                return false;\r\n            }\r\n        }\r\n        // Access Token with Auth Scheme specific matching\r\n        if (entity.credentialType ===\r\n            CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME) {\r\n            if (!!filter.tokenType &&\r\n                !this.matchTokenType(entity, filter.tokenType)) {\r\n                return false;\r\n            }\r\n            // KeyId (sshKid) in request must match cached SSH certificate keyId because SSH cert is bound to a specific key\r\n            if (filter.tokenType === AuthenticationScheme.SSH) {\r\n                if (filter.keyId && !this.matchKeyId(entity, filter.keyId)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * retrieve appMetadata matching all provided filters; if no filter is set, get all appMetadata\r\n     * @param filter\r\n     */\r\n    getAppMetadataFilteredBy(filter) {\r\n        const allCacheKeys = this.getKeys();\r\n        const matchingAppMetadata = {};\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-appMetadata type cache entities\r\n            if (!this.isAppMetadata(cacheKey)) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            const entity = this.getAppMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (!!filter.environment &&\r\n                !this.matchEnvironment(entity, filter.environment)) {\r\n                return;\r\n            }\r\n            if (!!filter.clientId &&\r\n                !this.matchClientId(entity, filter.clientId)) {\r\n                return;\r\n            }\r\n            matchingAppMetadata[cacheKey] = entity;\r\n        });\r\n        return matchingAppMetadata;\r\n    }\r\n    /**\r\n     * retrieve authorityMetadata that contains a matching alias\r\n     * @param filter\r\n     */\r\n    getAuthorityMetadataByAlias(host) {\r\n        const allCacheKeys = this.getAuthorityMetadataKeys();\r\n        let matchedEntity = null;\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            // don't parse any non-authorityMetadata type cache entities\r\n            if (!this.isAuthorityMetadata(cacheKey) ||\r\n                cacheKey.indexOf(this.clientId) === -1) {\r\n                return;\r\n            }\r\n            // Attempt retrieval\r\n            const entity = this.getAuthorityMetadata(cacheKey);\r\n            if (!entity) {\r\n                return;\r\n            }\r\n            if (entity.aliases.indexOf(host) === -1) {\r\n                return;\r\n            }\r\n            matchedEntity = entity;\r\n        });\r\n        return matchedEntity;\r\n    }\r\n    /**\r\n     * Removes all accounts and related tokens from cache.\r\n     */\r\n    removeAllAccounts(correlationId) {\r\n        const accounts = this.getAllAccounts({}, correlationId);\r\n        accounts.forEach((account) => {\r\n            this.removeAccount(account, correlationId);\r\n        });\r\n    }\r\n    /**\r\n     * Removes the account and related tokens for a given account key\r\n     * @param account\r\n     */\r\n    removeAccount(account, correlationId) {\r\n        this.removeAccountContext(account, correlationId);\r\n        const accountKeys = this.getAccountKeys();\r\n        const keyFilter = (key) => {\r\n            return (key.includes(account.homeAccountId) &&\r\n                key.includes(account.environment));\r\n        };\r\n        accountKeys.filter(keyFilter).forEach((key) => {\r\n            this.removeItem(key, correlationId);\r\n            this.performanceClient.incrementFields({ accountsRemoved: 1 }, correlationId);\r\n        });\r\n    }\r\n    /**\r\n     * Removes credentials associated with the provided account\r\n     * @param account\r\n     */\r\n    removeAccountContext(account, correlationId) {\r\n        const allTokenKeys = this.getTokenKeys();\r\n        const keyFilter = (key) => {\r\n            return (key.includes(account.homeAccountId) &&\r\n                key.includes(account.environment));\r\n        };\r\n        allTokenKeys.idToken.filter(keyFilter).forEach((key) => {\r\n            this.removeIdToken(key, correlationId);\r\n        });\r\n        allTokenKeys.accessToken.filter(keyFilter).forEach((key) => {\r\n            this.removeAccessToken(key, correlationId);\r\n        });\r\n        allTokenKeys.refreshToken.filter(keyFilter).forEach((key) => {\r\n            this.removeRefreshToken(key, correlationId);\r\n        });\r\n    }\r\n    /**\r\n     * Removes accessToken from the cache\r\n     * @param key\r\n     * @param correlationId\r\n     */\r\n    removeAccessToken(key, correlationId) {\r\n        const credential = this.getAccessTokenCredential(key, correlationId);\r\n        this.removeItem(key, correlationId);\r\n        this.performanceClient.incrementFields({ accessTokensRemoved: 1 }, correlationId);\r\n        if (!credential ||\r\n            credential.credentialType.toLowerCase() !==\r\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME.toLowerCase() ||\r\n            credential.tokenType !== AuthenticationScheme.POP) {\r\n            // If the credential is not a PoP token, we can return\r\n            return;\r\n        }\r\n        // Remove Token Binding Key from key store for PoP Tokens Credentials\r\n        const kid = credential.keyId;\r\n        if (kid) {\r\n            void this.cryptoImpl.removeTokenBindingKey(kid).catch(() => {\r\n                this.commonLogger.error(`Failed to remove token binding key ${kid}`, correlationId);\r\n                this.performanceClient?.incrementFields({ removeTokenBindingKeyFailure: 1 }, correlationId);\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Removes all app metadata objects from cache.\r\n     */\r\n    removeAppMetadata(correlationId) {\r\n        const allCacheKeys = this.getKeys();\r\n        allCacheKeys.forEach((cacheKey) => {\r\n            if (this.isAppMetadata(cacheKey)) {\r\n                this.removeItem(cacheKey, correlationId);\r\n            }\r\n        });\r\n        return true;\r\n    }\r\n    /**\r\n     * Retrieve IdTokenEntity from cache\r\n     * @param account {AccountInfo}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param targetRealm {?string}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     * @param correlationId {?string}\r\n     */\r\n    getIdToken(account, correlationId, tokenKeys, targetRealm, performanceClient) {\r\n        this.commonLogger.trace(\"CacheManager - getIdToken called\");\r\n        const idTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.ID_TOKEN,\r\n            clientId: this.clientId,\r\n            realm: targetRealm,\r\n        };\r\n        const idTokenMap = this.getIdTokensByFilter(idTokenFilter, correlationId, tokenKeys);\r\n        const numIdTokens = idTokenMap.size;\r\n        if (numIdTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getIdToken - No token found\");\r\n            return null;\r\n        }\r\n        else if (numIdTokens > 1) {\r\n            let tokensToBeRemoved = idTokenMap;\r\n            // Multiple tenant profiles and no tenant specified, pick home account\r\n            if (!targetRealm) {\r\n                const homeIdTokenMap = new Map();\r\n                idTokenMap.forEach((idToken, key) => {\r\n                    if (idToken.realm === account.tenantId) {\r\n                        homeIdTokenMap.set(key, idToken);\r\n                    }\r\n                });\r\n                const numHomeIdTokens = homeIdTokenMap.size;\r\n                if (numHomeIdTokens < 1) {\r\n                    this.commonLogger.info(\"CacheManager:getIdToken - Multiple ID tokens found for account but none match account entity tenant id, returning first result\");\r\n                    return idTokenMap.values().next().value;\r\n                }\r\n                else if (numHomeIdTokens === 1) {\r\n                    this.commonLogger.info(\"CacheManager:getIdToken - Multiple ID tokens found for account, defaulting to home tenant profile\");\r\n                    return homeIdTokenMap.values().next().value;\r\n                }\r\n                else {\r\n                    // Multiple ID tokens for home tenant profile, remove all and return null\r\n                    tokensToBeRemoved = homeIdTokenMap;\r\n                }\r\n            }\r\n            // Multiple tokens for a single tenant profile, remove all and return null\r\n            this.commonLogger.info(\"CacheManager:getIdToken - Multiple matching ID tokens found, clearing them\");\r\n            tokensToBeRemoved.forEach((idToken, key) => {\r\n                this.removeIdToken(key, correlationId);\r\n            });\r\n            if (performanceClient && correlationId) {\r\n                performanceClient.addFields({ multiMatchedID: idTokenMap.size }, correlationId);\r\n            }\r\n            return null;\r\n        }\r\n        this.commonLogger.info(\"CacheManager:getIdToken - Returning ID token\");\r\n        return idTokenMap.values().next().value;\r\n    }\r\n    /**\r\n     * Gets all idTokens matching the given filter\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    getIdTokensByFilter(filter, correlationId, tokenKeys) {\r\n        const idTokenKeys = (tokenKeys && tokenKeys.idToken) || this.getTokenKeys().idToken;\r\n        const idTokens = new Map();\r\n        idTokenKeys.forEach((key) => {\r\n            if (!this.idTokenKeyMatchesFilter(key, {\r\n                clientId: this.clientId,\r\n                ...filter,\r\n            })) {\r\n                return;\r\n            }\r\n            const idToken = this.getIdTokenCredential(key, correlationId);\r\n            if (idToken && this.credentialMatchesFilter(idToken, filter)) {\r\n                idTokens.set(key, idToken);\r\n            }\r\n        });\r\n        return idTokens;\r\n    }\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    idTokenKeyMatchesFilter(inputKey, filter) {\r\n        const key = inputKey.toLowerCase();\r\n        if (filter.clientId &&\r\n            key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId &&\r\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Removes idToken from the cache\r\n     * @param key\r\n     */\r\n    removeIdToken(key, correlationId) {\r\n        this.removeItem(key, correlationId);\r\n    }\r\n    /**\r\n     * Removes refresh token from the cache\r\n     * @param key\r\n     */\r\n    removeRefreshToken(key, correlationId) {\r\n        this.removeItem(key, correlationId);\r\n    }\r\n    /**\r\n     * Retrieve AccessTokenEntity from cache\r\n     * @param account {AccountInfo}\r\n     * @param request {BaseAuthRequest}\r\n     * @param correlationId {?string}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     */\r\n    getAccessToken(account, request, tokenKeys, targetRealm) {\r\n        const correlationId = request.correlationId;\r\n        this.commonLogger.trace(\"CacheManager - getAccessToken called\", correlationId);\r\n        const scopes = ScopeSet.createSearchScopes(request.scopes);\r\n        const authScheme = request.authenticationScheme || AuthenticationScheme.BEARER;\r\n        /*\r\n         * Distinguish between Bearer and PoP/SSH token cache types\r\n         * Cast to lowercase to handle \"bearer\" from ADFS\r\n         */\r\n        const credentialType = authScheme &&\r\n            authScheme.toLowerCase() !==\r\n                AuthenticationScheme.BEARER.toLowerCase()\r\n            ? CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME\r\n            : CredentialType.ACCESS_TOKEN;\r\n        const accessTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: credentialType,\r\n            clientId: this.clientId,\r\n            realm: targetRealm || account.tenantId,\r\n            target: scopes,\r\n            tokenType: authScheme,\r\n            keyId: request.sshKid,\r\n            requestedClaimsHash: request.requestedClaimsHash,\r\n        };\r\n        const accessTokenKeys = (tokenKeys && tokenKeys.accessToken) ||\r\n            this.getTokenKeys().accessToken;\r\n        const accessTokens = [];\r\n        accessTokenKeys.forEach((key) => {\r\n            // Validate key\r\n            if (this.accessTokenKeyMatchesFilter(key, accessTokenFilter, true)) {\r\n                const accessToken = this.getAccessTokenCredential(key, correlationId);\r\n                // Validate value\r\n                if (accessToken &&\r\n                    this.credentialMatchesFilter(accessToken, accessTokenFilter)) {\r\n                    accessTokens.push(accessToken);\r\n                }\r\n            }\r\n        });\r\n        const numAccessTokens = accessTokens.length;\r\n        if (numAccessTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getAccessToken - No token found\", correlationId);\r\n            return null;\r\n        }\r\n        else if (numAccessTokens > 1) {\r\n            this.commonLogger.info(\"CacheManager:getAccessToken - Multiple access tokens found, clearing them\", correlationId);\r\n            accessTokens.forEach((accessToken) => {\r\n                this.removeAccessToken(this.generateCredentialKey(accessToken), correlationId);\r\n            });\r\n            this.performanceClient.addFields({ multiMatchedAT: accessTokens.length }, correlationId);\r\n            return null;\r\n        }\r\n        this.commonLogger.info(\"CacheManager:getAccessToken - Returning access token\", correlationId);\r\n        return accessTokens[0];\r\n    }\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     * @param keyMustContainAllScopes\r\n     * @returns\r\n     */\r\n    accessTokenKeyMatchesFilter(inputKey, filter, keyMustContainAllScopes) {\r\n        const key = inputKey.toLowerCase();\r\n        if (filter.clientId &&\r\n            key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId &&\r\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.realm && key.indexOf(filter.realm.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.requestedClaimsHash &&\r\n            key.indexOf(filter.requestedClaimsHash.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.target) {\r\n            const scopes = filter.target.asArray();\r\n            for (let i = 0; i < scopes.length; i++) {\r\n                if (keyMustContainAllScopes &&\r\n                    !key.includes(scopes[i].toLowerCase())) {\r\n                    // When performing a cache lookup a missing scope would be a cache miss\r\n                    return false;\r\n                }\r\n                else if (!keyMustContainAllScopes &&\r\n                    key.includes(scopes[i].toLowerCase())) {\r\n                    // When performing a cache write, any token with a subset of requested scopes should be replaced\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Gets all access tokens matching the filter\r\n     * @param filter\r\n     * @returns\r\n     */\r\n    getAccessTokensByFilter(filter, correlationId) {\r\n        const tokenKeys = this.getTokenKeys();\r\n        const accessTokens = [];\r\n        tokenKeys.accessToken.forEach((key) => {\r\n            if (!this.accessTokenKeyMatchesFilter(key, filter, true)) {\r\n                return;\r\n            }\r\n            const accessToken = this.getAccessTokenCredential(key, correlationId);\r\n            if (accessToken &&\r\n                this.credentialMatchesFilter(accessToken, filter)) {\r\n                accessTokens.push(accessToken);\r\n            }\r\n        });\r\n        return accessTokens;\r\n    }\r\n    /**\r\n     * Helper to retrieve the appropriate refresh token from cache\r\n     * @param account {AccountInfo}\r\n     * @param familyRT {boolean}\r\n     * @param correlationId {?string}\r\n     * @param tokenKeys {?TokenKeys}\r\n     * @param performanceClient {?IPerformanceClient}\r\n     */\r\n    getRefreshToken(account, familyRT, correlationId, tokenKeys, performanceClient) {\r\n        this.commonLogger.trace(\"CacheManager - getRefreshToken called\");\r\n        const id = familyRT ? THE_FAMILY_ID : undefined;\r\n        const refreshTokenFilter = {\r\n            homeAccountId: account.homeAccountId,\r\n            environment: account.environment,\r\n            credentialType: CredentialType.REFRESH_TOKEN,\r\n            clientId: this.clientId,\r\n            familyId: id,\r\n        };\r\n        const refreshTokenKeys = (tokenKeys && tokenKeys.refreshToken) ||\r\n            this.getTokenKeys().refreshToken;\r\n        const refreshTokens = [];\r\n        refreshTokenKeys.forEach((key) => {\r\n            // Validate key\r\n            if (this.refreshTokenKeyMatchesFilter(key, refreshTokenFilter)) {\r\n                const refreshToken = this.getRefreshTokenCredential(key, correlationId);\r\n                // Validate value\r\n                if (refreshToken &&\r\n                    this.credentialMatchesFilter(refreshToken, refreshTokenFilter)) {\r\n                    refreshTokens.push(refreshToken);\r\n                }\r\n            }\r\n        });\r\n        const numRefreshTokens = refreshTokens.length;\r\n        if (numRefreshTokens < 1) {\r\n            this.commonLogger.info(\"CacheManager:getRefreshToken - No refresh token found.\");\r\n            return null;\r\n        }\r\n        // address the else case after remove functions address environment aliases\r\n        if (numRefreshTokens > 1 && performanceClient && correlationId) {\r\n            performanceClient.addFields({ multiMatchedRT: numRefreshTokens }, correlationId);\r\n        }\r\n        this.commonLogger.info(\"CacheManager:getRefreshToken - returning refresh token\");\r\n        return refreshTokens[0];\r\n    }\r\n    /**\r\n     * Validate the cache key against filter before retrieving and parsing cache value\r\n     * @param key\r\n     * @param filter\r\n     */\r\n    refreshTokenKeyMatchesFilter(inputKey, filter) {\r\n        const key = inputKey.toLowerCase();\r\n        if (filter.familyId &&\r\n            key.indexOf(filter.familyId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        // If familyId is used, clientId is not in the key\r\n        if (!filter.familyId &&\r\n            filter.clientId &&\r\n            key.indexOf(filter.clientId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        if (filter.homeAccountId &&\r\n            key.indexOf(filter.homeAccountId.toLowerCase()) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Retrieve AppMetadataEntity from cache\r\n     */\r\n    readAppMetadataFromCache(environment) {\r\n        const appMetadataFilter = {\r\n            environment,\r\n            clientId: this.clientId,\r\n        };\r\n        const appMetadata = this.getAppMetadataFilteredBy(appMetadataFilter);\r\n        const appMetadataEntries = Object.keys(appMetadata).map((key) => appMetadata[key]);\r\n        const numAppMetadata = appMetadataEntries.length;\r\n        if (numAppMetadata < 1) {\r\n            return null;\r\n        }\r\n        else if (numAppMetadata > 1) {\r\n            throw createClientAuthError(multipleMatchingAppMetadata);\r\n        }\r\n        return appMetadataEntries[0];\r\n    }\r\n    /**\r\n     * Return the family_id value associated  with FOCI\r\n     * @param environment\r\n     * @param clientId\r\n     */\r\n    isAppMetadataFOCI(environment) {\r\n        const appMetadata = this.readAppMetadataFromCache(environment);\r\n        return !!(appMetadata && appMetadata.familyId === THE_FAMILY_ID);\r\n    }\r\n    /**\r\n     * helper to match account ids\r\n     * @param value\r\n     * @param homeAccountId\r\n     */\r\n    matchHomeAccountId(entity, homeAccountId) {\r\n        return !!(typeof entity.homeAccountId === \"string\" &&\r\n            homeAccountId === entity.homeAccountId);\r\n    }\r\n    /**\r\n     * helper to match account ids\r\n     * @param entity\r\n     * @param localAccountId\r\n     * @returns\r\n     */\r\n    matchLocalAccountIdFromTokenClaims(tokenClaims, localAccountId) {\r\n        const idTokenLocalAccountId = tokenClaims.oid || tokenClaims.sub;\r\n        return localAccountId === idTokenLocalAccountId;\r\n    }\r\n    matchLocalAccountIdFromTenantProfile(tenantProfile, localAccountId) {\r\n        return tenantProfile.localAccountId === localAccountId;\r\n    }\r\n    /**\r\n     * helper to match names\r\n     * @param entity\r\n     * @param name\r\n     * @returns true if the downcased name properties are present and match in the filter and the entity\r\n     */\r\n    matchName(claims, name) {\r\n        return !!(name.toLowerCase() === claims.name?.toLowerCase());\r\n    }\r\n    /**\r\n     * helper to match usernames\r\n     * @param entity\r\n     * @param username\r\n     * @returns\r\n     */\r\n    matchUsername(cachedUsername, filterUsername) {\r\n        return !!(cachedUsername &&\r\n            typeof cachedUsername === \"string\" &&\r\n            filterUsername?.toLowerCase() === cachedUsername.toLowerCase());\r\n    }\r\n    /**\r\n     * helper to match assertion\r\n     * @param value\r\n     * @param oboAssertion\r\n     */\r\n    matchUserAssertionHash(entity, userAssertionHash) {\r\n        return !!(entity.userAssertionHash &&\r\n            userAssertionHash === entity.userAssertionHash);\r\n    }\r\n    /**\r\n     * helper to match environment\r\n     * @param value\r\n     * @param environment\r\n     */\r\n    matchEnvironment(entity, environment) {\r\n        // Check static authority options first for cases where authority metadata has not been resolved and cached yet\r\n        if (this.staticAuthorityOptions) {\r\n            const staticAliases = getAliasesFromStaticSources(this.staticAuthorityOptions, this.commonLogger);\r\n            if (staticAliases.includes(environment) &&\r\n                staticAliases.includes(entity.environment)) {\r\n                return true;\r\n            }\r\n        }\r\n        // Query metadata cache if no static authority configuration has aliases that match enviroment\r\n        const cloudMetadata = this.getAuthorityMetadataByAlias(environment);\r\n        if (cloudMetadata &&\r\n            cloudMetadata.aliases.indexOf(entity.environment) > -1) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * helper to match credential type\r\n     * @param entity\r\n     * @param credentialType\r\n     */\r\n    matchCredentialType(entity, credentialType) {\r\n        return (entity.credentialType &&\r\n            credentialType.toLowerCase() === entity.credentialType.toLowerCase());\r\n    }\r\n    /**\r\n     * helper to match client ids\r\n     * @param entity\r\n     * @param clientId\r\n     */\r\n    matchClientId(entity, clientId) {\r\n        return !!(entity.clientId && clientId === entity.clientId);\r\n    }\r\n    /**\r\n     * helper to match family ids\r\n     * @param entity\r\n     * @param familyId\r\n     */\r\n    matchFamilyId(entity, familyId) {\r\n        return !!(entity.familyId && familyId === entity.familyId);\r\n    }\r\n    /**\r\n     * helper to match realm\r\n     * @param entity\r\n     * @param realm\r\n     */\r\n    matchRealm(entity, realm) {\r\n        return !!(entity.realm?.toLowerCase() === realm.toLowerCase());\r\n    }\r\n    /**\r\n     * helper to match nativeAccountId\r\n     * @param entity\r\n     * @param nativeAccountId\r\n     * @returns boolean indicating the match result\r\n     */\r\n    matchNativeAccountId(entity, nativeAccountId) {\r\n        return !!(entity.nativeAccountId && nativeAccountId === entity.nativeAccountId);\r\n    }\r\n    /**\r\n     * helper to match loginHint which can be either:\r\n     * 1. login_hint ID token claim\r\n     * 2. username in cached account object\r\n     * 3. upn in ID token claims\r\n     * @param entity\r\n     * @param loginHint\r\n     * @returns\r\n     */\r\n    matchLoginHintFromTokenClaims(tokenClaims, loginHint) {\r\n        if (tokenClaims.login_hint === loginHint) {\r\n            return true;\r\n        }\r\n        if (tokenClaims.preferred_username === loginHint) {\r\n            return true;\r\n        }\r\n        if (tokenClaims.upn === loginHint) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Helper to match sid\r\n     * @param entity\r\n     * @param sid\r\n     * @returns true if the sid claim is present and matches the filter\r\n     */\r\n    matchSid(idTokenClaims, sid) {\r\n        return idTokenClaims.sid === sid;\r\n    }\r\n    matchAuthorityType(entity, authorityType) {\r\n        return !!(entity.authorityType &&\r\n            authorityType.toLowerCase() === entity.authorityType.toLowerCase());\r\n    }\r\n    /**\r\n     * Returns true if the target scopes are a subset of the current entity's scopes, false otherwise.\r\n     * @param entity\r\n     * @param target\r\n     */\r\n    matchTarget(entity, target) {\r\n        const isNotAccessTokenCredential = entity.credentialType !== CredentialType.ACCESS_TOKEN &&\r\n            entity.credentialType !==\r\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n        if (isNotAccessTokenCredential || !entity.target) {\r\n            return false;\r\n        }\r\n        const entityScopeSet = ScopeSet.fromString(entity.target);\r\n        return entityScopeSet.containsScopeSet(target);\r\n    }\r\n    /**\r\n     * Returns true if the credential's tokenType or Authentication Scheme matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param tokenType\r\n     */\r\n    matchTokenType(entity, tokenType) {\r\n        return !!(entity.tokenType && entity.tokenType === tokenType);\r\n    }\r\n    /**\r\n     * Returns true if the credential's keyId matches the one in the request, false otherwise\r\n     * @param entity\r\n     * @param keyId\r\n     */\r\n    matchKeyId(entity, keyId) {\r\n        return !!(entity.keyId && entity.keyId === keyId);\r\n    }\r\n    /**\r\n     * returns if a given cache entity is of the type appmetadata\r\n     * @param key\r\n     */\r\n    isAppMetadata(key) {\r\n        return key.indexOf(APP_METADATA) !== -1;\r\n    }\r\n    /**\r\n     * returns if a given cache entity is of the type authoritymetadata\r\n     * @param key\r\n     */\r\n    isAuthorityMetadata(key) {\r\n        return key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) !== -1;\r\n    }\r\n    /**\r\n     * returns cache key used for cloud instance metadata\r\n     */\r\n    generateAuthorityMetadataCacheKey(authority) {\r\n        return `${AUTHORITY_METADATA_CONSTANTS.CACHE_KEY}-${this.clientId}-${authority}`;\r\n    }\r\n    /**\r\n     * Helper to convert serialized data to object\r\n     * @param obj\r\n     * @param json\r\n     */\r\n    static toObject(obj, json) {\r\n        for (const propertyName in json) {\r\n            obj[propertyName] = json[propertyName];\r\n        }\r\n        return obj;\r\n    }\r\n}\r\n/** @internal */\r\nclass DefaultStorageClass extends CacheManager {\r\n    async setAccount() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAccount() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    async setIdTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getIdTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    async setAccessTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAccessTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    async setRefreshTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getRefreshTokenCredential() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    setAppMetadata() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAppMetadata() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    setServerTelemetry() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getServerTelemetry() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    setAuthorityMetadata() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAuthorityMetadata() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAuthorityMetadataKeys() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    setThrottlingCache() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getThrottlingCache() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    removeItem() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getKeys() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getAccountKeys() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    getTokenKeys() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    generateCredentialKey() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n    generateAccountKey() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    }\r\n}\n\nexport { CacheManager, DefaultStorageClass };\n//# sourceMappingURL=CacheManager.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Protocol modes supported by MSAL.\r\n */\r\nconst ProtocolMode = {\r\n    /**\r\n     * Auth Code + PKCE with Entra ID (formerly AAD) specific optimizations and features\r\n     */\r\n    AAD: \"AAD\",\r\n    /**\r\n     * Auth Code + PKCE without Entra ID specific optimizations and features. For use only with non-Microsoft owned authorities.\r\n     * Support is limited for this mode.\r\n     */\r\n    OIDC: \"OIDC\",\r\n    /**\r\n     * Encrypted Authorize Response (EAR) with Entra ID specific optimizations and features\r\n     */\r\n    EAR: \"EAR\",\r\n};\n\nexport { ProtocolMode };\n//# sourceMappingURL=ProtocolMode.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Enumeration of operations that are instrumented by have their performance measured by the PerformanceClient.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nconst PerformanceEvents = {\r\n    /**\r\n     * acquireTokenByCode API (msal-browser and msal-node).\r\n     * Used to acquire tokens by trading an authorization code against the token endpoint.\r\n     */\r\n    AcquireTokenByCode: \"acquireTokenByCode\",\r\n    /**\r\n     * acquireTokenByRefreshToken API (msal-browser and msal-node).\r\n     * Used to renew an access token using a refresh token against the token endpoint.\r\n     */\r\n    AcquireTokenByRefreshToken: \"acquireTokenByRefreshToken\",\r\n    /**\r\n     * acquireTokenSilent API (msal-browser and msal-node).\r\n     * Used to silently acquire a new access token (from the cache or the network).\r\n     */\r\n    AcquireTokenSilent: \"acquireTokenSilent\",\r\n    /**\r\n     * acquireTokenSilentAsync (msal-browser).\r\n     * Internal API for acquireTokenSilent.\r\n     */\r\n    AcquireTokenSilentAsync: \"acquireTokenSilentAsync\",\r\n    /**\r\n     * acquireTokenPopup (msal-browser).\r\n     * Used to acquire a new access token interactively through pop ups\r\n     */\r\n    AcquireTokenPopup: \"acquireTokenPopup\",\r\n    /**\r\n     * acquireTokenPreRedirect (msal-browser).\r\n     * First part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */\r\n    AcquireTokenPreRedirect: \"acquireTokenPreRedirect\",\r\n    /**\r\n     * acquireTokenRedirect (msal-browser).\r\n     * Second part of the redirect flow.\r\n     * Used to acquire a new access token interactively through redirects.\r\n     */\r\n    AcquireTokenRedirect: \"acquireTokenRedirect\",\r\n    /**\r\n     * getPublicKeyThumbprint API in CryptoOpts class (msal-browser).\r\n     * Used to generate a public/private keypair and generate a public key thumbprint for pop requests.\r\n     */\r\n    CryptoOptsGetPublicKeyThumbprint: \"cryptoOptsGetPublicKeyThumbprint\",\r\n    /**\r\n     * signJwt API in CryptoOpts class (msal-browser).\r\n     * Used to signed a pop token.\r\n     */\r\n    CryptoOptsSignJwt: \"cryptoOptsSignJwt\",\r\n    /**\r\n     * acquireToken API in the SilentCacheClient class (msal-browser).\r\n     * Used to read access tokens from the cache.\r\n     */\r\n    SilentCacheClientAcquireToken: \"silentCacheClientAcquireToken\",\r\n    /**\r\n     * acquireToken API in the SilentIframeClient class (msal-browser).\r\n     * Used to acquire a new set of tokens from the authorize endpoint in a hidden iframe.\r\n     */\r\n    SilentIframeClientAcquireToken: \"silentIframeClientAcquireToken\",\r\n    AwaitConcurrentIframe: \"awaitConcurrentIframe\",\r\n    /**\r\n     * acquireToken API in SilentRereshClient (msal-browser).\r\n     * Used to acquire a new set of tokens from the token endpoint using a refresh token.\r\n     */\r\n    SilentRefreshClientAcquireToken: \"silentRefreshClientAcquireToken\",\r\n    /**\r\n     * ssoSilent API (msal-browser).\r\n     * Used to silently acquire an authorization code and set of tokens using a hidden iframe.\r\n     */\r\n    SsoSilent: \"ssoSilent\",\r\n    /**\r\n     * getDiscoveredAuthority API in StandardInteractionClient class (msal-browser).\r\n     * Used to load authority metadata for a request.\r\n     */\r\n    StandardInteractionClientGetDiscoveredAuthority: \"standardInteractionClientGetDiscoveredAuthority\",\r\n    /**\r\n     * acquireToken APIs in msal-browser.\r\n     * Used to make an /authorize endpoint call with native brokering enabled.\r\n     */\r\n    FetchAccountIdWithNativeBroker: \"fetchAccountIdWithNativeBroker\",\r\n    /**\r\n     * acquireToken API in NativeInteractionClient class (msal-browser).\r\n     * Used to acquire a token from Native component when native brokering is enabled.\r\n     */\r\n    NativeInteractionClientAcquireToken: \"nativeInteractionClientAcquireToken\",\r\n    /**\r\n     * Time spent creating default headers for requests to token endpoint\r\n     */\r\n    BaseClientCreateTokenRequestHeaders: \"baseClientCreateTokenRequestHeaders\",\r\n    /**\r\n     * Time spent sending/waiting for the response of a request to the token endpoint\r\n     */\r\n    NetworkClientSendPostRequestAsync: \"networkClientSendPostRequestAsync\",\r\n    RefreshTokenClientExecutePostToTokenEndpoint: \"refreshTokenClientExecutePostToTokenEndpoint\",\r\n    AuthorizationCodeClientExecutePostToTokenEndpoint: \"authorizationCodeClientExecutePostToTokenEndpoint\",\r\n    /**\r\n     * Used to measure the time taken for completing embedded-broker handshake (PW-Broker).\r\n     */\r\n    BrokerHandhshake: \"brokerHandshake\",\r\n    /**\r\n     * acquireTokenByRefreshToken API in BrokerClientApplication (PW-Broker) .\r\n     */\r\n    AcquireTokenByRefreshTokenInBroker: \"acquireTokenByRefreshTokenInBroker\",\r\n    /**\r\n     * Time taken for token acquisition by broker\r\n     */\r\n    AcquireTokenByBroker: \"acquireTokenByBroker\",\r\n    /**\r\n     * Time spent on the network for refresh token acquisition\r\n     */\r\n    RefreshTokenClientExecuteTokenRequest: \"refreshTokenClientExecuteTokenRequest\",\r\n    /**\r\n     * Time taken for acquiring refresh token , records RT size\r\n     */\r\n    RefreshTokenClientAcquireToken: \"refreshTokenClientAcquireToken\",\r\n    /**\r\n     * Time taken for acquiring cached refresh token\r\n     */\r\n    RefreshTokenClientAcquireTokenWithCachedRefreshToken: \"refreshTokenClientAcquireTokenWithCachedRefreshToken\",\r\n    /**\r\n     * acquireTokenByRefreshToken API in RefreshTokenClient (msal-common).\r\n     */\r\n    RefreshTokenClientAcquireTokenByRefreshToken: \"refreshTokenClientAcquireTokenByRefreshToken\",\r\n    /**\r\n     * Helper function to create token request body in RefreshTokenClient (msal-common).\r\n     */\r\n    RefreshTokenClientCreateTokenRequestBody: \"refreshTokenClientCreateTokenRequestBody\",\r\n    /**\r\n     * acquireTokenFromCache (msal-browser).\r\n     * Internal API for acquiring token from cache\r\n     */\r\n    AcquireTokenFromCache: \"acquireTokenFromCache\",\r\n    SilentFlowClientAcquireCachedToken: \"silentFlowClientAcquireCachedToken\",\r\n    SilentFlowClientGenerateResultFromCacheRecord: \"silentFlowClientGenerateResultFromCacheRecord\",\r\n    /**\r\n     * acquireTokenBySilentIframe (msal-browser).\r\n     * Internal API for acquiring token by silent Iframe\r\n     */\r\n    AcquireTokenBySilentIframe: \"acquireTokenBySilentIframe\",\r\n    /**\r\n     * Internal API for initializing base request in BaseInteractionClient (msal-browser)\r\n     */\r\n    InitializeBaseRequest: \"initializeBaseRequest\",\r\n    /**\r\n     * Internal API for initializing silent request in SilentCacheClient (msal-browser)\r\n     */\r\n    InitializeSilentRequest: \"initializeSilentRequest\",\r\n    InitializeClientApplication: \"initializeClientApplication\",\r\n    InitializeCache: \"initializeCache\",\r\n    /**\r\n     * Helper function in SilentIframeClient class (msal-browser).\r\n     */\r\n    SilentIframeClientTokenHelper: \"silentIframeClientTokenHelper\",\r\n    /**\r\n     * SilentHandler\r\n     */\r\n    SilentHandlerInitiateAuthRequest: \"silentHandlerInitiateAuthRequest\",\r\n    SilentHandlerMonitorIframeForHash: \"silentHandlerMonitorIframeForHash\",\r\n    SilentHandlerLoadFrame: \"silentHandlerLoadFrame\",\r\n    SilentHandlerLoadFrameSync: \"silentHandlerLoadFrameSync\",\r\n    /**\r\n     * Helper functions in StandardInteractionClient class (msal-browser)\r\n     */\r\n    StandardInteractionClientCreateAuthCodeClient: \"standardInteractionClientCreateAuthCodeClient\",\r\n    StandardInteractionClientGetClientConfiguration: \"standardInteractionClientGetClientConfiguration\",\r\n    StandardInteractionClientInitializeAuthorizationRequest: \"standardInteractionClientInitializeAuthorizationRequest\",\r\n    /**\r\n     * getAuthCodeUrl API (msal-browser and msal-node).\r\n     */\r\n    GetAuthCodeUrl: \"getAuthCodeUrl\",\r\n    GetStandardParams: \"getStandardParams\",\r\n    /**\r\n     * Functions from InteractionHandler (msal-browser)\r\n     */\r\n    HandleCodeResponseFromServer: \"handleCodeResponseFromServer\",\r\n    HandleCodeResponse: \"handleCodeResponse\",\r\n    HandleResponseEar: \"handleResponseEar\",\r\n    HandleResponsePlatformBroker: \"handleResponsePlatformBroker\",\r\n    HandleResponseCode: \"handleResponseCode\",\r\n    UpdateTokenEndpointAuthority: \"updateTokenEndpointAuthority\",\r\n    /**\r\n     * APIs in Authorization Code Client (msal-common)\r\n     */\r\n    AuthClientAcquireToken: \"authClientAcquireToken\",\r\n    AuthClientExecuteTokenRequest: \"authClientExecuteTokenRequest\",\r\n    AuthClientCreateTokenRequestBody: \"authClientCreateTokenRequestBody\",\r\n    /**\r\n     * Generate functions in PopTokenGenerator (msal-common)\r\n     */\r\n    PopTokenGenerateCnf: \"popTokenGenerateCnf\",\r\n    PopTokenGenerateKid: \"popTokenGenerateKid\",\r\n    /**\r\n     * handleServerTokenResponse API in ResponseHandler (msal-common)\r\n     */\r\n    HandleServerTokenResponse: \"handleServerTokenResponse\",\r\n    DeserializeResponse: \"deserializeResponse\",\r\n    /**\r\n     * Authority functions\r\n     */\r\n    AuthorityFactoryCreateDiscoveredInstance: \"authorityFactoryCreateDiscoveredInstance\",\r\n    AuthorityResolveEndpointsAsync: \"authorityResolveEndpointsAsync\",\r\n    AuthorityResolveEndpointsFromLocalSources: \"authorityResolveEndpointsFromLocalSources\",\r\n    AuthorityGetCloudDiscoveryMetadataFromNetwork: \"authorityGetCloudDiscoveryMetadataFromNetwork\",\r\n    AuthorityUpdateCloudDiscoveryMetadata: \"authorityUpdateCloudDiscoveryMetadata\",\r\n    AuthorityGetEndpointMetadataFromNetwork: \"authorityGetEndpointMetadataFromNetwork\",\r\n    AuthorityUpdateEndpointMetadata: \"authorityUpdateEndpointMetadata\",\r\n    AuthorityUpdateMetadataWithRegionalInformation: \"authorityUpdateMetadataWithRegionalInformation\",\r\n    /**\r\n     * Region Discovery functions\r\n     */\r\n    RegionDiscoveryDetectRegion: \"regionDiscoveryDetectRegion\",\r\n    RegionDiscoveryGetRegionFromIMDS: \"regionDiscoveryGetRegionFromIMDS\",\r\n    RegionDiscoveryGetCurrentVersion: \"regionDiscoveryGetCurrentVersion\",\r\n    AcquireTokenByCodeAsync: \"acquireTokenByCodeAsync\",\r\n    GetEndpointMetadataFromNetwork: \"getEndpointMetadataFromNetwork\",\r\n    GetCloudDiscoveryMetadataFromNetworkMeasurement: \"getCloudDiscoveryMetadataFromNetworkMeasurement\",\r\n    HandleRedirectPromiseMeasurement: \"handleRedirectPromise\",\r\n    HandleNativeRedirectPromiseMeasurement: \"handleNativeRedirectPromise\",\r\n    UpdateCloudDiscoveryMetadataMeasurement: \"updateCloudDiscoveryMetadataMeasurement\",\r\n    UsernamePasswordClientAcquireToken: \"usernamePasswordClientAcquireToken\",\r\n    NativeMessageHandlerHandshake: \"nativeMessageHandlerHandshake\",\r\n    NativeGenerateAuthResult: \"nativeGenerateAuthResult\",\r\n    RemoveHiddenIframe: \"removeHiddenIframe\",\r\n    /**\r\n     * Cache operations\r\n     */\r\n    ClearTokensAndKeysWithClaims: \"clearTokensAndKeysWithClaims\",\r\n    CacheManagerGetRefreshToken: \"cacheManagerGetRefreshToken\",\r\n    ImportExistingCache: \"importExistingCache\",\r\n    SetUserData: \"setUserData\",\r\n    LocalStorageUpdated: \"localStorageUpdated\",\r\n    /**\r\n     * Crypto Operations\r\n     */\r\n    GeneratePkceCodes: \"generatePkceCodes\",\r\n    GenerateCodeVerifier: \"generateCodeVerifier\",\r\n    GenerateCodeChallengeFromVerifier: \"generateCodeChallengeFromVerifier\",\r\n    Sha256Digest: \"sha256Digest\",\r\n    GetRandomValues: \"getRandomValues\",\r\n    GenerateHKDF: \"generateHKDF\",\r\n    GenerateBaseKey: \"generateBaseKey\",\r\n    Base64Decode: \"base64Decode\",\r\n    UrlEncodeArr: \"urlEncodeArr\",\r\n    Encrypt: \"encrypt\",\r\n    Decrypt: \"decrypt\",\r\n    GenerateEarKey: \"generateEarKey\",\r\n    DecryptEarResponse: \"decryptEarResponse\",\r\n};\r\nconst PerformanceEventAbbreviations = new Map([\r\n    [PerformanceEvents.AcquireTokenByCode, \"ATByCode\"],\r\n    [PerformanceEvents.AcquireTokenByRefreshToken, \"ATByRT\"],\r\n    [PerformanceEvents.AcquireTokenSilent, \"ATS\"],\r\n    [PerformanceEvents.AcquireTokenSilentAsync, \"ATSAsync\"],\r\n    [PerformanceEvents.AcquireTokenPopup, \"ATPopup\"],\r\n    [PerformanceEvents.AcquireTokenRedirect, \"ATRedirect\"],\r\n    [\r\n        PerformanceEvents.CryptoOptsGetPublicKeyThumbprint,\r\n        \"CryptoGetPKThumb\",\r\n    ],\r\n    [PerformanceEvents.CryptoOptsSignJwt, \"CryptoSignJwt\"],\r\n    [PerformanceEvents.SilentCacheClientAcquireToken, \"SltCacheClientAT\"],\r\n    [PerformanceEvents.SilentIframeClientAcquireToken, \"SltIframeClientAT\"],\r\n    [PerformanceEvents.SilentRefreshClientAcquireToken, \"SltRClientAT\"],\r\n    [PerformanceEvents.SsoSilent, \"SsoSlt\"],\r\n    [\r\n        PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\r\n        \"StdIntClientGetDiscAuth\",\r\n    ],\r\n    [\r\n        PerformanceEvents.FetchAccountIdWithNativeBroker,\r\n        \"FetchAccIdWithNtvBroker\",\r\n    ],\r\n    [\r\n        PerformanceEvents.NativeInteractionClientAcquireToken,\r\n        \"NtvIntClientAT\",\r\n    ],\r\n    [\r\n        PerformanceEvents.BaseClientCreateTokenRequestHeaders,\r\n        \"BaseClientCreateTReqHead\",\r\n    ],\r\n    [\r\n        PerformanceEvents.NetworkClientSendPostRequestAsync,\r\n        \"NetClientSendPost\",\r\n    ],\r\n    [\r\n        PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint,\r\n        \"RTClientExecPost\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint,\r\n        \"AuthCodeClientExecPost\",\r\n    ],\r\n    [PerformanceEvents.BrokerHandhshake, \"BrokerHandshake\"],\r\n    [\r\n        PerformanceEvents.AcquireTokenByRefreshTokenInBroker,\r\n        \"ATByRTInBroker\",\r\n    ],\r\n    [PerformanceEvents.AcquireTokenByBroker, \"ATByBroker\"],\r\n    [\r\n        PerformanceEvents.RefreshTokenClientExecuteTokenRequest,\r\n        \"RTClientExecTReq\",\r\n    ],\r\n    [PerformanceEvents.RefreshTokenClientAcquireToken, \"RTClientAT\"],\r\n    [\r\n        PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken,\r\n        \"RTClientATWithCachedRT\",\r\n    ],\r\n    [\r\n        PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken,\r\n        \"RTClientATByRT\",\r\n    ],\r\n    [\r\n        PerformanceEvents.RefreshTokenClientCreateTokenRequestBody,\r\n        \"RTClientCreateTReqBody\",\r\n    ],\r\n    [PerformanceEvents.AcquireTokenFromCache, \"ATFromCache\"],\r\n    [\r\n        PerformanceEvents.SilentFlowClientAcquireCachedToken,\r\n        \"SltFlowClientATCached\",\r\n    ],\r\n    [\r\n        PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord,\r\n        \"SltFlowClientGenResFromCache\",\r\n    ],\r\n    [PerformanceEvents.AcquireTokenBySilentIframe, \"ATBySltIframe\"],\r\n    [PerformanceEvents.InitializeBaseRequest, \"InitBaseReq\"],\r\n    [PerformanceEvents.InitializeSilentRequest, \"InitSltReq\"],\r\n    [\r\n        PerformanceEvents.InitializeClientApplication,\r\n        \"InitClientApplication\",\r\n    ],\r\n    [PerformanceEvents.InitializeCache, \"InitCache\"],\r\n    [PerformanceEvents.ImportExistingCache, \"importCache\"],\r\n    [PerformanceEvents.SetUserData, \"setUserData\"],\r\n    [PerformanceEvents.LocalStorageUpdated, \"localStorageUpdated\"],\r\n    [PerformanceEvents.SilentIframeClientTokenHelper, \"SIClientTHelper\"],\r\n    [\r\n        PerformanceEvents.SilentHandlerInitiateAuthRequest,\r\n        \"SHandlerInitAuthReq\",\r\n    ],\r\n    [\r\n        PerformanceEvents.SilentHandlerMonitorIframeForHash,\r\n        \"SltHandlerMonitorIframeForHash\",\r\n    ],\r\n    [PerformanceEvents.SilentHandlerLoadFrame, \"SHandlerLoadFrame\"],\r\n    [PerformanceEvents.SilentHandlerLoadFrameSync, \"SHandlerLoadFrameSync\"],\r\n    [\r\n        PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\r\n        \"StdIntClientCreateAuthCodeClient\",\r\n    ],\r\n    [\r\n        PerformanceEvents.StandardInteractionClientGetClientConfiguration,\r\n        \"StdIntClientGetClientConf\",\r\n    ],\r\n    [\r\n        PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\r\n        \"StdIntClientInitAuthReq\",\r\n    ],\r\n    [PerformanceEvents.GetAuthCodeUrl, \"GetAuthCodeUrl\"],\r\n    [\r\n        PerformanceEvents.HandleCodeResponseFromServer,\r\n        \"HandleCodeResFromServer\",\r\n    ],\r\n    [PerformanceEvents.HandleCodeResponse, \"HandleCodeResp\"],\r\n    [PerformanceEvents.HandleResponseEar, \"HandleRespEar\"],\r\n    [PerformanceEvents.HandleResponseCode, \"HandleRespCode\"],\r\n    [\r\n        PerformanceEvents.HandleResponsePlatformBroker,\r\n        \"HandleRespPlatBroker\",\r\n    ],\r\n    [PerformanceEvents.UpdateTokenEndpointAuthority, \"UpdTEndpointAuth\"],\r\n    [PerformanceEvents.AuthClientAcquireToken, \"AuthClientAT\"],\r\n    [PerformanceEvents.AuthClientExecuteTokenRequest, \"AuthClientExecTReq\"],\r\n    [\r\n        PerformanceEvents.AuthClientCreateTokenRequestBody,\r\n        \"AuthClientCreateTReqBody\",\r\n    ],\r\n    [PerformanceEvents.PopTokenGenerateCnf, \"PopTGenCnf\"],\r\n    [PerformanceEvents.PopTokenGenerateKid, \"PopTGenKid\"],\r\n    [PerformanceEvents.HandleServerTokenResponse, \"HandleServerTRes\"],\r\n    [PerformanceEvents.DeserializeResponse, \"DeserializeRes\"],\r\n    [\r\n        PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance,\r\n        \"AuthFactCreateDiscInst\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityResolveEndpointsAsync,\r\n        \"AuthResolveEndpointsAsync\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityResolveEndpointsFromLocalSources,\r\n        \"AuthResolveEndpointsFromLocal\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork,\r\n        \"AuthGetCDMetaFromNet\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata,\r\n        \"AuthUpdCDMeta\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork,\r\n        \"AuthUpdCDMetaFromNet\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityUpdateEndpointMetadata,\r\n        \"AuthUpdEndpointMeta\",\r\n    ],\r\n    [\r\n        PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation,\r\n        \"AuthUpdMetaWithRegInfo\",\r\n    ],\r\n    [PerformanceEvents.RegionDiscoveryDetectRegion, \"RegDiscDetectReg\"],\r\n    [\r\n        PerformanceEvents.RegionDiscoveryGetRegionFromIMDS,\r\n        \"RegDiscGetRegFromIMDS\",\r\n    ],\r\n    [\r\n        PerformanceEvents.RegionDiscoveryGetCurrentVersion,\r\n        \"RegDiscGetCurrentVer\",\r\n    ],\r\n    [PerformanceEvents.AcquireTokenByCodeAsync, \"ATByCodeAsync\"],\r\n    [\r\n        PerformanceEvents.GetEndpointMetadataFromNetwork,\r\n        \"GetEndpointMetaFromNet\",\r\n    ],\r\n    [\r\n        PerformanceEvents.GetCloudDiscoveryMetadataFromNetworkMeasurement,\r\n        \"GetCDMetaFromNet\",\r\n    ],\r\n    [\r\n        PerformanceEvents.HandleRedirectPromiseMeasurement,\r\n        \"HandleRedirectPromise\",\r\n    ],\r\n    [\r\n        PerformanceEvents.HandleNativeRedirectPromiseMeasurement,\r\n        \"HandleNtvRedirectPromise\",\r\n    ],\r\n    [\r\n        PerformanceEvents.UpdateCloudDiscoveryMetadataMeasurement,\r\n        \"UpdateCDMeta\",\r\n    ],\r\n    [\r\n        PerformanceEvents.UsernamePasswordClientAcquireToken,\r\n        \"UserPassClientAT\",\r\n    ],\r\n    [\r\n        PerformanceEvents.NativeMessageHandlerHandshake,\r\n        \"NtvMsgHandlerHandshake\",\r\n    ],\r\n    [PerformanceEvents.NativeGenerateAuthResult, \"NtvGenAuthRes\"],\r\n    [PerformanceEvents.RemoveHiddenIframe, \"RemoveHiddenIframe\"],\r\n    [\r\n        PerformanceEvents.ClearTokensAndKeysWithClaims,\r\n        \"ClearTAndKeysWithClaims\",\r\n    ],\r\n    [PerformanceEvents.CacheManagerGetRefreshToken, \"CacheManagerGetRT\"],\r\n    [PerformanceEvents.GeneratePkceCodes, \"GenPkceCodes\"],\r\n    [PerformanceEvents.GenerateCodeVerifier, \"GenCodeVerifier\"],\r\n    [\r\n        PerformanceEvents.GenerateCodeChallengeFromVerifier,\r\n        \"GenCodeChallengeFromVerifier\",\r\n    ],\r\n    [PerformanceEvents.Sha256Digest, \"Sha256Digest\"],\r\n    [PerformanceEvents.GetRandomValues, \"GetRandomValues\"],\r\n    [PerformanceEvents.GenerateHKDF, \"genHKDF\"],\r\n    [PerformanceEvents.GenerateBaseKey, \"genBaseKey\"],\r\n    [PerformanceEvents.Base64Decode, \"b64Decode\"],\r\n    [PerformanceEvents.UrlEncodeArr, \"urlEncArr\"],\r\n    [PerformanceEvents.Encrypt, \"encrypt\"],\r\n    [PerformanceEvents.Decrypt, \"decrypt\"],\r\n    [PerformanceEvents.GenerateEarKey, \"genEarKey\"],\r\n    [PerformanceEvents.DecryptEarResponse, \"decryptEarResp\"],\r\n]);\r\n/**\r\n * State of the performance event.\r\n *\r\n * @export\r\n * @enum {number}\r\n */\r\nconst PerformanceEventStatus = {\r\n    NotStarted: 0,\r\n    InProgress: 1,\r\n    Completed: 2,\r\n};\r\nconst IntFields = new Set([\r\n    \"accessTokenSize\",\r\n    \"durationMs\",\r\n    \"idTokenSize\",\r\n    \"matsSilentStatus\",\r\n    \"matsHttpStatus\",\r\n    \"refreshTokenSize\",\r\n    \"queuedTimeMs\",\r\n    \"startTimeMs\",\r\n    \"status\",\r\n    \"multiMatchedAT\",\r\n    \"multiMatchedID\",\r\n    \"multiMatchedRT\",\r\n    \"unencryptedCacheCount\",\r\n    \"encryptedCacheExpiredCount\",\r\n    \"oldAccountCount\",\r\n    \"oldAccessCount\",\r\n    \"oldIdCount\",\r\n    \"oldRefreshCount\",\r\n    \"currAccountCount\",\r\n    \"currAccessCount\",\r\n    \"currIdCount\",\r\n    \"currRefreshCount\",\r\n    \"expiredCacheRemovedCount\",\r\n    \"upgradedCacheCount\",\r\n]);\n\nexport { IntFields, PerformanceEventAbbreviations, PerformanceEventStatus, PerformanceEvents };\n//# sourceMappingURL=PerformanceEvent.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { PerformanceEventStatus } from './PerformanceEvent.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass StubPerformanceMeasurement {\r\n    startMeasurement() {\r\n        return;\r\n    }\r\n    endMeasurement() {\r\n        return;\r\n    }\r\n    flushMeasurement() {\r\n        return null;\r\n    }\r\n}\r\nclass StubPerformanceClient {\r\n    generateId() {\r\n        return \"callback-id\";\r\n    }\r\n    startMeasurement(measureName, correlationId) {\r\n        return {\r\n            end: () => null,\r\n            discard: () => { },\r\n            add: () => { },\r\n            increment: () => { },\r\n            event: {\r\n                eventId: this.generateId(),\r\n                status: PerformanceEventStatus.InProgress,\r\n                authority: \"\",\r\n                libraryName: \"\",\r\n                libraryVersion: \"\",\r\n                clientId: \"\",\r\n                name: measureName,\r\n                startTimeMs: Date.now(),\r\n                correlationId: correlationId || \"\",\r\n            },\r\n            measurement: new StubPerformanceMeasurement(),\r\n        };\r\n    }\r\n    startPerformanceMeasurement() {\r\n        return new StubPerformanceMeasurement();\r\n    }\r\n    calculateQueuedTime() {\r\n        return 0;\r\n    }\r\n    addQueueMeasurement() {\r\n        return;\r\n    }\r\n    setPreQueueTime() {\r\n        return;\r\n    }\r\n    endMeasurement() {\r\n        return null;\r\n    }\r\n    discardMeasurements() {\r\n        return;\r\n    }\r\n    removePerformanceCallback() {\r\n        return true;\r\n    }\r\n    addPerformanceCallback() {\r\n        return \"\";\r\n    }\r\n    emitEvents() {\r\n        return;\r\n    }\r\n    addFields() {\r\n        return;\r\n    }\r\n    incrementFields() {\r\n        return;\r\n    }\r\n    cacheEventByCorrelationId() {\r\n        return;\r\n    }\r\n}\n\nexport { StubPerformanceClient, StubPerformanceMeasurement };\n//# sourceMappingURL=StubPerformanceClient.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { DEFAULT_CRYPTO_IMPLEMENTATION } from '../crypto/ICrypto.mjs';\nimport { LogLevel, Logger } from '../logger/Logger.mjs';\nimport { DEFAULT_TOKEN_RENEWAL_OFFSET_SEC, Constants } from '../utils/Constants.mjs';\nimport { version } from '../packageMetadata.mjs';\nimport { AzureCloudInstance } from '../authority/AuthorityOptions.mjs';\nimport { DefaultStorageClass } from '../cache/CacheManager.mjs';\nimport { ProtocolMode } from '../authority/ProtocolMode.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { StubPerformanceClient } from '../telemetry/performance/StubPerformanceClient.mjs';\nimport { methodNotImplemented } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst DEFAULT_SYSTEM_OPTIONS = {\r\n    tokenRenewalOffsetSeconds: DEFAULT_TOKEN_RENEWAL_OFFSET_SEC,\r\n    preventCorsPreflight: false,\r\n};\r\nconst DEFAULT_LOGGER_IMPLEMENTATION = {\r\n    loggerCallback: () => {\r\n        // allow users to not set loggerCallback\r\n    },\r\n    piiLoggingEnabled: false,\r\n    logLevel: LogLevel.Info,\r\n    correlationId: Constants.EMPTY_STRING,\r\n};\r\nconst DEFAULT_CACHE_OPTIONS = {\r\n    claimsBasedCachingEnabled: false,\r\n};\r\nconst DEFAULT_NETWORK_IMPLEMENTATION = {\r\n    async sendGetRequestAsync() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n    async sendPostRequestAsync() {\r\n        throw createClientAuthError(methodNotImplemented);\r\n    },\r\n};\r\nconst DEFAULT_LIBRARY_INFO = {\r\n    sku: Constants.SKU,\r\n    version: version,\r\n    cpu: Constants.EMPTY_STRING,\r\n    os: Constants.EMPTY_STRING,\r\n};\r\nconst DEFAULT_CLIENT_CREDENTIALS = {\r\n    clientSecret: Constants.EMPTY_STRING,\r\n    clientAssertion: undefined,\r\n};\r\nconst DEFAULT_AZURE_CLOUD_OPTIONS = {\r\n    azureCloudInstance: AzureCloudInstance.None,\r\n    tenant: `${Constants.DEFAULT_COMMON_TENANT}`,\r\n};\r\nconst DEFAULT_TELEMETRY_OPTIONS = {\r\n    application: {\r\n        appName: \"\",\r\n        appVersion: \"\",\r\n    },\r\n};\r\n/**\r\n * Function that sets the default options when not explicitly configured from app developer\r\n *\r\n * @param Configuration\r\n *\r\n * @returns Configuration\r\n */\r\nfunction buildClientConfiguration({ authOptions: userAuthOptions, systemOptions: userSystemOptions, loggerOptions: userLoggerOption, cacheOptions: userCacheOptions, storageInterface: storageImplementation, networkInterface: networkImplementation, cryptoInterface: cryptoImplementation, clientCredentials: clientCredentials, libraryInfo: libraryInfo, telemetry: telemetry, serverTelemetryManager: serverTelemetryManager, persistencePlugin: persistencePlugin, serializableCache: serializableCache, }) {\r\n    const loggerOptions = {\r\n        ...DEFAULT_LOGGER_IMPLEMENTATION,\r\n        ...userLoggerOption,\r\n    };\r\n    return {\r\n        authOptions: buildAuthOptions(userAuthOptions),\r\n        systemOptions: { ...DEFAULT_SYSTEM_OPTIONS, ...userSystemOptions },\r\n        loggerOptions: loggerOptions,\r\n        cacheOptions: { ...DEFAULT_CACHE_OPTIONS, ...userCacheOptions },\r\n        storageInterface: storageImplementation ||\r\n            new DefaultStorageClass(userAuthOptions.clientId, DEFAULT_CRYPTO_IMPLEMENTATION, new Logger(loggerOptions), new StubPerformanceClient()),\r\n        networkInterface: networkImplementation || DEFAULT_NETWORK_IMPLEMENTATION,\r\n        cryptoInterface: cryptoImplementation || DEFAULT_CRYPTO_IMPLEMENTATION,\r\n        clientCredentials: clientCredentials || DEFAULT_CLIENT_CREDENTIALS,\r\n        libraryInfo: { ...DEFAULT_LIBRARY_INFO, ...libraryInfo },\r\n        telemetry: { ...DEFAULT_TELEMETRY_OPTIONS, ...telemetry },\r\n        serverTelemetryManager: serverTelemetryManager || null,\r\n        persistencePlugin: persistencePlugin || null,\r\n        serializableCache: serializableCache || null,\r\n    };\r\n}\r\n/**\r\n * Construct authoptions from the client and platform passed values\r\n * @param authOptions\r\n */\r\nfunction buildAuthOptions(authOptions) {\r\n    return {\r\n        clientCapabilities: [],\r\n        azureCloudOptions: DEFAULT_AZURE_CLOUD_OPTIONS,\r\n        skipAuthorityMetadataCache: false,\r\n        instanceAware: false,\r\n        encodeExtraQueryParams: false,\r\n        ...authOptions,\r\n    };\r\n}\r\n/**\r\n * Returns true if config has protocolMode set to ProtocolMode.OIDC, false otherwise\r\n * @param ClientConfiguration\r\n */\r\nfunction isOidcProtocolMode(config) {\r\n    return (config.authOptions.authority.options.protocolMode === ProtocolMode.OIDC);\r\n}\n\nexport { DEFAULT_SYSTEM_OPTIONS, buildClientConfiguration, isOidcProtocolMode };\n//# sourceMappingURL=ClientConfiguration.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst CcsCredentialType = {\r\n    HOME_ACCOUNT_ID: \"home_account_id\",\r\n    UPN: \"UPN\",\r\n};\n\nexport { CcsCredentialType };\n//# sourceMappingURL=CcsCredential.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Separators, Constants } from '../utils/Constants.mjs';\nimport { clientInfoEmptyError, clientInfoDecodingError } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\r\nfunction buildClientInfo(rawClientInfo, base64Decode) {\r\n    if (!rawClientInfo) {\r\n        throw createClientAuthError(clientInfoEmptyError);\r\n    }\r\n    try {\r\n        const decodedClientInfo = base64Decode(rawClientInfo);\r\n        return JSON.parse(decodedClientInfo);\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(clientInfoDecodingError);\r\n    }\r\n}\r\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */\r\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\r\n    if (!homeAccountId) {\r\n        throw createClientAuthError(clientInfoDecodingError);\r\n    }\r\n    const clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\r\n    return {\r\n        uid: clientInfoParts[0],\r\n        utid: clientInfoParts.length < 2\r\n            ? Constants.EMPTY_STRING\r\n            : clientInfoParts[1],\r\n    };\r\n}\n\nexport { buildClientInfo, buildClientInfoFromHomeAccountId };\n//# sourceMappingURL=ClientInfo.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst CLIENT_ID = \"client_id\";\r\nconst REDIRECT_URI = \"redirect_uri\";\r\nconst RESPONSE_TYPE = \"response_type\";\r\nconst RESPONSE_MODE = \"response_mode\";\r\nconst GRANT_TYPE = \"grant_type\";\r\nconst CLAIMS = \"claims\";\r\nconst SCOPE = \"scope\";\r\nconst ERROR = \"error\";\r\nconst ERROR_DESCRIPTION = \"error_description\";\r\nconst ACCESS_TOKEN = \"access_token\";\r\nconst ID_TOKEN = \"id_token\";\r\nconst REFRESH_TOKEN = \"refresh_token\";\r\nconst EXPIRES_IN = \"expires_in\";\r\nconst REFRESH_TOKEN_EXPIRES_IN = \"refresh_token_expires_in\";\r\nconst STATE = \"state\";\r\nconst NONCE = \"nonce\";\r\nconst PROMPT = \"prompt\";\r\nconst SESSION_STATE = \"session_state\";\r\nconst CLIENT_INFO = \"client_info\";\r\nconst CODE = \"code\";\r\nconst CODE_CHALLENGE = \"code_challenge\";\r\nconst CODE_CHALLENGE_METHOD = \"code_challenge_method\";\r\nconst CODE_VERIFIER = \"code_verifier\";\r\nconst CLIENT_REQUEST_ID = \"client-request-id\";\r\nconst X_CLIENT_SKU = \"x-client-SKU\";\r\nconst X_CLIENT_VER = \"x-client-VER\";\r\nconst X_CLIENT_OS = \"x-client-OS\";\r\nconst X_CLIENT_CPU = \"x-client-CPU\";\r\nconst X_CLIENT_CURR_TELEM = \"x-client-current-telemetry\";\r\nconst X_CLIENT_LAST_TELEM = \"x-client-last-telemetry\";\r\nconst X_MS_LIB_CAPABILITY = \"x-ms-lib-capability\";\r\nconst X_APP_NAME = \"x-app-name\";\r\nconst X_APP_VER = \"x-app-ver\";\r\nconst POST_LOGOUT_URI = \"post_logout_redirect_uri\";\r\nconst ID_TOKEN_HINT = \"id_token_hint\";\r\nconst DEVICE_CODE = \"device_code\";\r\nconst CLIENT_SECRET = \"client_secret\";\r\nconst CLIENT_ASSERTION = \"client_assertion\";\r\nconst CLIENT_ASSERTION_TYPE = \"client_assertion_type\";\r\nconst TOKEN_TYPE = \"token_type\";\r\nconst REQ_CNF = \"req_cnf\";\r\nconst OBO_ASSERTION = \"assertion\";\r\nconst REQUESTED_TOKEN_USE = \"requested_token_use\";\r\nconst ON_BEHALF_OF = \"on_behalf_of\";\r\nconst FOCI = \"foci\";\r\nconst CCS_HEADER = \"X-AnchorMailbox\";\r\nconst RETURN_SPA_CODE = \"return_spa_code\";\r\nconst NATIVE_BROKER = \"nativebroker\";\r\nconst LOGOUT_HINT = \"logout_hint\";\r\nconst SID = \"sid\";\r\nconst LOGIN_HINT = \"login_hint\";\r\nconst DOMAIN_HINT = \"domain_hint\";\r\nconst X_CLIENT_EXTRA_SKU = \"x-client-xtra-sku\";\r\nconst BROKER_CLIENT_ID = \"brk_client_id\";\r\nconst BROKER_REDIRECT_URI = \"brk_redirect_uri\";\r\nconst INSTANCE_AWARE = \"instance_aware\";\r\nconst EAR_JWK = \"ear_jwk\";\r\nconst EAR_JWE_CRYPTO = \"ear_jwe_crypto\";\n\nexport { ACCESS_TOKEN, BROKER_CLIENT_ID, BROKER_REDIRECT_URI, CCS_HEADER, CLAIMS, CLIENT_ASSERTION, CLIENT_ASSERTION_TYPE, CLIENT_ID, CLIENT_INFO, CLIENT_REQUEST_ID, CLIENT_SECRET, CODE, CODE_CHALLENGE, CODE_CHALLENGE_METHOD, CODE_VERIFIER, DEVICE_CODE, DOMAIN_HINT, EAR_JWE_CRYPTO, EAR_JWK, ERROR, ERROR_DESCRIPTION, EXPIRES_IN, FOCI, GRANT_TYPE, ID_TOKEN, ID_TOKEN_HINT, INSTANCE_AWARE, LOGIN_HINT, LOGOUT_HINT, NATIVE_BROKER, NONCE, OBO_ASSERTION, ON_BEHALF_OF, POST_LOGOUT_URI, PROMPT, REDIRECT_URI, REFRESH_TOKEN, REFRESH_TOKEN_EXPIRES_IN, REQUESTED_TOKEN_USE, REQ_CNF, RESPONSE_MODE, RESPONSE_TYPE, RETURN_SPA_CODE, SCOPE, SESSION_STATE, SID, STATE, TOKEN_TYPE, X_APP_NAME, X_APP_VER, X_CLIENT_CPU, X_CLIENT_CURR_TELEM, X_CLIENT_EXTRA_SKU, X_CLIENT_LAST_TELEM, X_CLIENT_OS, X_CLIENT_SKU, X_CLIENT_VER, X_MS_LIB_CAPABILITY };\n//# sourceMappingURL=AADServerParamKeys.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { OIDC_DEFAULT_SCOPES, ResponseMode, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.mjs';\nimport { CLIENT_ID, BROKER_CLIENT_ID, REDIRECT_URI, RESPONSE_TYPE, RESPONSE_MODE, NATIVE_BROKER, SCOPE, POST_LOGOUT_URI, ID_TOKEN_HINT, DOMAIN_HINT, LOGIN_HINT, SID, CLAIMS, CLIENT_REQUEST_ID, X_CLIENT_SKU, X_CLIENT_VER, X_CLIENT_OS, X_CLIENT_CPU, X_APP_NAME, X_APP_VER, PROMPT, STATE, NONCE, CODE_CHALLENGE, CODE_CHALLENGE_METHOD, CODE, DEVICE_CODE, REFRESH_TOKEN, CODE_VERIFIER, CLIENT_SECRET, CLIENT_ASSERTION, CLIENT_ASSERTION_TYPE, OBO_ASSERTION, REQUESTED_TOKEN_USE, GRANT_TYPE, INSTANCE_AWARE, TOKEN_TYPE, REQ_CNF, X_CLIENT_CURR_TELEM, X_CLIENT_LAST_TELEM, X_MS_LIB_CAPABILITY, LOGOUT_HINT, BROKER_REDIRECT_URI, EAR_JWK, EAR_JWE_CRYPTO } from '../constants/AADServerParamKeys.mjs';\nimport { ScopeSet } from './ScopeSet.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { invalidClaims, pkceParamsMissing } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction instrumentBrokerParams(parameters, correlationId, performanceClient) {\r\n    if (!correlationId) {\r\n        return;\r\n    }\r\n    const clientId = parameters.get(CLIENT_ID);\r\n    if (clientId && parameters.has(BROKER_CLIENT_ID)) {\r\n        performanceClient?.addFields({\r\n            embeddedClientId: clientId,\r\n            embeddedRedirectUri: parameters.get(REDIRECT_URI),\r\n        }, correlationId);\r\n    }\r\n}\r\n/**\r\n * Add the given response_type\r\n * @param parameters\r\n * @param responseType\r\n */\r\nfunction addResponseType(parameters, responseType) {\r\n    parameters.set(RESPONSE_TYPE, responseType);\r\n}\r\n/**\r\n * add response_mode. defaults to query.\r\n * @param responseMode\r\n */\r\nfunction addResponseMode(parameters, responseMode) {\r\n    parameters.set(RESPONSE_MODE, responseMode ? responseMode : ResponseMode.QUERY);\r\n}\r\n/**\r\n * Add flag to indicate STS should attempt to use WAM if available\r\n */\r\nfunction addNativeBroker(parameters) {\r\n    parameters.set(NATIVE_BROKER, \"1\");\r\n}\r\n/**\r\n * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n * @param scopeSet\r\n * @param addOidcScopes\r\n */\r\nfunction addScopes(parameters, scopes, addOidcScopes = true, defaultScopes = OIDC_DEFAULT_SCOPES) {\r\n    // Always add openid to the scopes when adding OIDC scopes\r\n    if (addOidcScopes &&\r\n        !defaultScopes.includes(\"openid\") &&\r\n        !scopes.includes(\"openid\")) {\r\n        defaultScopes.push(\"openid\");\r\n    }\r\n    const requestScopes = addOidcScopes\r\n        ? [...(scopes || []), ...defaultScopes]\r\n        : scopes || [];\r\n    const scopeSet = new ScopeSet(requestScopes);\r\n    parameters.set(SCOPE, scopeSet.printScopes());\r\n}\r\n/**\r\n * add clientId\r\n * @param clientId\r\n */\r\nfunction addClientId(parameters, clientId) {\r\n    parameters.set(CLIENT_ID, clientId);\r\n}\r\n/**\r\n * add redirect_uri\r\n * @param redirectUri\r\n */\r\nfunction addRedirectUri(parameters, redirectUri) {\r\n    parameters.set(REDIRECT_URI, redirectUri);\r\n}\r\n/**\r\n * add post logout redirectUri\r\n * @param redirectUri\r\n */\r\nfunction addPostLogoutRedirectUri(parameters, redirectUri) {\r\n    parameters.set(POST_LOGOUT_URI, redirectUri);\r\n}\r\n/**\r\n * add id_token_hint to logout request\r\n * @param idTokenHint\r\n */\r\nfunction addIdTokenHint(parameters, idTokenHint) {\r\n    parameters.set(ID_TOKEN_HINT, idTokenHint);\r\n}\r\n/**\r\n * add domain_hint\r\n * @param domainHint\r\n */\r\nfunction addDomainHint(parameters, domainHint) {\r\n    parameters.set(DOMAIN_HINT, domainHint);\r\n}\r\n/**\r\n * add login_hint\r\n * @param loginHint\r\n */\r\nfunction addLoginHint(parameters, loginHint) {\r\n    parameters.set(LOGIN_HINT, loginHint);\r\n}\r\n/**\r\n * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n * @param loginHint\r\n */\r\nfunction addCcsUpn(parameters, loginHint) {\r\n    parameters.set(HeaderNames.CCS_HEADER, `UPN:${loginHint}`);\r\n}\r\n/**\r\n * Adds the CCS (Cache Credential Service) query parameter for account object\r\n * @param loginHint\r\n */\r\nfunction addCcsOid(parameters, clientInfo) {\r\n    parameters.set(HeaderNames.CCS_HEADER, `Oid:${clientInfo.uid}@${clientInfo.utid}`);\r\n}\r\n/**\r\n * add sid\r\n * @param sid\r\n */\r\nfunction addSid(parameters, sid) {\r\n    parameters.set(SID, sid);\r\n}\r\n/**\r\n * add claims\r\n * @param claims\r\n */\r\nfunction addClaims(parameters, claims, clientCapabilities) {\r\n    const mergedClaims = addClientCapabilitiesToClaims(claims, clientCapabilities);\r\n    try {\r\n        JSON.parse(mergedClaims);\r\n    }\r\n    catch (e) {\r\n        throw createClientConfigurationError(invalidClaims);\r\n    }\r\n    parameters.set(CLAIMS, mergedClaims);\r\n}\r\n/**\r\n * add correlationId\r\n * @param correlationId\r\n */\r\nfunction addCorrelationId(parameters, correlationId) {\r\n    parameters.set(CLIENT_REQUEST_ID, correlationId);\r\n}\r\n/**\r\n * add library info query params\r\n * @param libraryInfo\r\n */\r\nfunction addLibraryInfo(parameters, libraryInfo) {\r\n    // Telemetry Info\r\n    parameters.set(X_CLIENT_SKU, libraryInfo.sku);\r\n    parameters.set(X_CLIENT_VER, libraryInfo.version);\r\n    if (libraryInfo.os) {\r\n        parameters.set(X_CLIENT_OS, libraryInfo.os);\r\n    }\r\n    if (libraryInfo.cpu) {\r\n        parameters.set(X_CLIENT_CPU, libraryInfo.cpu);\r\n    }\r\n}\r\n/**\r\n * Add client telemetry parameters\r\n * @param appTelemetry\r\n */\r\nfunction addApplicationTelemetry(parameters, appTelemetry) {\r\n    if (appTelemetry?.appName) {\r\n        parameters.set(X_APP_NAME, appTelemetry.appName);\r\n    }\r\n    if (appTelemetry?.appVersion) {\r\n        parameters.set(X_APP_VER, appTelemetry.appVersion);\r\n    }\r\n}\r\n/**\r\n * add prompt\r\n * @param prompt\r\n */\r\nfunction addPrompt(parameters, prompt) {\r\n    parameters.set(PROMPT, prompt);\r\n}\r\n/**\r\n * add state\r\n * @param state\r\n */\r\nfunction addState(parameters, state) {\r\n    if (state) {\r\n        parameters.set(STATE, state);\r\n    }\r\n}\r\n/**\r\n * add nonce\r\n * @param nonce\r\n */\r\nfunction addNonce(parameters, nonce) {\r\n    parameters.set(NONCE, nonce);\r\n}\r\n/**\r\n * add code_challenge and code_challenge_method\r\n * - throw if either of them are not passed\r\n * @param codeChallenge\r\n * @param codeChallengeMethod\r\n */\r\nfunction addCodeChallengeParams(parameters, codeChallenge, codeChallengeMethod) {\r\n    if (codeChallenge && codeChallengeMethod) {\r\n        parameters.set(CODE_CHALLENGE, codeChallenge);\r\n        parameters.set(CODE_CHALLENGE_METHOD, codeChallengeMethod);\r\n    }\r\n    else {\r\n        throw createClientConfigurationError(pkceParamsMissing);\r\n    }\r\n}\r\n/**\r\n * add the `authorization_code` passed by the user to exchange for a token\r\n * @param code\r\n */\r\nfunction addAuthorizationCode(parameters, code) {\r\n    parameters.set(CODE, code);\r\n}\r\n/**\r\n * add the `authorization_code` passed by the user to exchange for a token\r\n * @param code\r\n */\r\nfunction addDeviceCode(parameters, code) {\r\n    parameters.set(DEVICE_CODE, code);\r\n}\r\n/**\r\n * add the `refreshToken` passed by the user\r\n * @param refreshToken\r\n */\r\nfunction addRefreshToken(parameters, refreshToken) {\r\n    parameters.set(REFRESH_TOKEN, refreshToken);\r\n}\r\n/**\r\n * add the `code_verifier` passed by the user to exchange for a token\r\n * @param codeVerifier\r\n */\r\nfunction addCodeVerifier(parameters, codeVerifier) {\r\n    parameters.set(CODE_VERIFIER, codeVerifier);\r\n}\r\n/**\r\n * add client_secret\r\n * @param clientSecret\r\n */\r\nfunction addClientSecret(parameters, clientSecret) {\r\n    parameters.set(CLIENT_SECRET, clientSecret);\r\n}\r\n/**\r\n * add clientAssertion for confidential client flows\r\n * @param clientAssertion\r\n */\r\nfunction addClientAssertion(parameters, clientAssertion) {\r\n    if (clientAssertion) {\r\n        parameters.set(CLIENT_ASSERTION, clientAssertion);\r\n    }\r\n}\r\n/**\r\n * add clientAssertionType for confidential client flows\r\n * @param clientAssertionType\r\n */\r\nfunction addClientAssertionType(parameters, clientAssertionType) {\r\n    if (clientAssertionType) {\r\n        parameters.set(CLIENT_ASSERTION_TYPE, clientAssertionType);\r\n    }\r\n}\r\n/**\r\n * add OBO assertion for confidential client flows\r\n * @param clientAssertion\r\n */\r\nfunction addOboAssertion(parameters, oboAssertion) {\r\n    parameters.set(OBO_ASSERTION, oboAssertion);\r\n}\r\n/**\r\n * add grant type\r\n * @param grantType\r\n */\r\nfunction addRequestTokenUse(parameters, tokenUse) {\r\n    parameters.set(REQUESTED_TOKEN_USE, tokenUse);\r\n}\r\n/**\r\n * add grant type\r\n * @param grantType\r\n */\r\nfunction addGrantType(parameters, grantType) {\r\n    parameters.set(GRANT_TYPE, grantType);\r\n}\r\n/**\r\n * add client info\r\n *\r\n */\r\nfunction addClientInfo(parameters) {\r\n    parameters.set(CLIENT_INFO, \"1\");\r\n}\r\nfunction addInstanceAware(parameters) {\r\n    if (!parameters.has(INSTANCE_AWARE)) {\r\n        parameters.set(INSTANCE_AWARE, \"true\");\r\n    }\r\n}\r\n/**\r\n * add extraQueryParams\r\n * @param eQParams\r\n */\r\nfunction addExtraQueryParameters(parameters, eQParams) {\r\n    Object.entries(eQParams).forEach(([key, value]) => {\r\n        if (!parameters.has(key) && value) {\r\n            parameters.set(key, value);\r\n        }\r\n    });\r\n}\r\nfunction addClientCapabilitiesToClaims(claims, clientCapabilities) {\r\n    let mergedClaims;\r\n    // Parse provided claims into JSON object or initialize empty object\r\n    if (!claims) {\r\n        mergedClaims = {};\r\n    }\r\n    else {\r\n        try {\r\n            mergedClaims = JSON.parse(claims);\r\n        }\r\n        catch (e) {\r\n            throw createClientConfigurationError(invalidClaims);\r\n        }\r\n    }\r\n    if (clientCapabilities && clientCapabilities.length > 0) {\r\n        if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\r\n            // Add access_token key to claims object\r\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\r\n        }\r\n        // Add xms_cc claim with provided clientCapabilities to access_token key\r\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] =\r\n            {\r\n                values: clientCapabilities,\r\n            };\r\n    }\r\n    return JSON.stringify(mergedClaims);\r\n}\r\n/**\r\n * adds `username` for Password Grant flow\r\n * @param username\r\n */\r\nfunction addUsername(parameters, username) {\r\n    parameters.set(PasswordGrantConstants.username, username);\r\n}\r\n/**\r\n * adds `password` for Password Grant flow\r\n * @param password\r\n */\r\nfunction addPassword(parameters, password) {\r\n    parameters.set(PasswordGrantConstants.password, password);\r\n}\r\n/**\r\n * add pop_jwk to query params\r\n * @param cnfString\r\n */\r\nfunction addPopToken(parameters, cnfString) {\r\n    if (cnfString) {\r\n        parameters.set(TOKEN_TYPE, AuthenticationScheme.POP);\r\n        parameters.set(REQ_CNF, cnfString);\r\n    }\r\n}\r\n/**\r\n * add SSH JWK and key ID to query params\r\n */\r\nfunction addSshJwk(parameters, sshJwkString) {\r\n    if (sshJwkString) {\r\n        parameters.set(TOKEN_TYPE, AuthenticationScheme.SSH);\r\n        parameters.set(REQ_CNF, sshJwkString);\r\n    }\r\n}\r\n/**\r\n * add server telemetry fields\r\n * @param serverTelemetryManager\r\n */\r\nfunction addServerTelemetry(parameters, serverTelemetryManager) {\r\n    parameters.set(X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\r\n    parameters.set(X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\r\n}\r\n/**\r\n * Adds parameter that indicates to the server that throttling is supported\r\n */\r\nfunction addThrottling(parameters) {\r\n    parameters.set(X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\r\n}\r\n/**\r\n * Adds logout_hint parameter for \"silent\" logout which prevent server account picker\r\n */\r\nfunction addLogoutHint(parameters, logoutHint) {\r\n    parameters.set(LOGOUT_HINT, logoutHint);\r\n}\r\nfunction addBrokerParameters(parameters, brokerClientId, brokerRedirectUri) {\r\n    if (!parameters.has(BROKER_CLIENT_ID)) {\r\n        parameters.set(BROKER_CLIENT_ID, brokerClientId);\r\n    }\r\n    if (!parameters.has(BROKER_REDIRECT_URI)) {\r\n        parameters.set(BROKER_REDIRECT_URI, brokerRedirectUri);\r\n    }\r\n}\r\n/**\r\n * Add EAR (Encrypted Authorize Response) request parameters\r\n * @param parameters\r\n * @param jwk\r\n */\r\nfunction addEARParameters(parameters, jwk) {\r\n    parameters.set(EAR_JWK, encodeURIComponent(jwk));\r\n    // ear_jwe_crypto will always have value: {\"alg\":\"dir\",\"enc\":\"A256GCM\"} so we can hardcode this\r\n    const jweCryptoB64Encoded = \"eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIn0\";\r\n    parameters.set(EAR_JWE_CRYPTO, jweCryptoB64Encoded);\r\n}\r\n/**\r\n * Adds authorize body parameters to the request parameters\r\n * @param parameters\r\n * @param bodyParameters\r\n */\r\nfunction addPostBodyParameters(parameters, bodyParameters) {\r\n    Object.entries(bodyParameters).forEach(([key, value]) => {\r\n        if (value) {\r\n            parameters.set(key, value);\r\n        }\r\n    });\r\n}\n\nexport { addApplicationTelemetry, addAuthorizationCode, addBrokerParameters, addCcsOid, addCcsUpn, addClaims, addClientAssertion, addClientAssertionType, addClientCapabilitiesToClaims, addClientId, addClientInfo, addClientSecret, addCodeChallengeParams, addCodeVerifier, addCorrelationId, addDeviceCode, addDomainHint, addEARParameters, addExtraQueryParameters, addGrantType, addIdTokenHint, addInstanceAware, addLibraryInfo, addLoginHint, addLogoutHint, addNativeBroker, addNonce, addOboAssertion, addPassword, addPopToken, addPostBodyParameters, addPostLogoutRedirectUri, addPrompt, addRedirectUri, addRefreshToken, addRequestTokenUse, addResponseMode, addResponseType, addScopes, addServerTelemetry, addSid, addSshJwk, addState, addThrottling, addUsername, instrumentBrokerParams };\n//# sourceMappingURL=RequestParameterBuilder.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Authority types supported by MSAL.\r\n */\r\nconst AuthorityType = {\r\n    Default: 0,\r\n    Adfs: 1,\r\n    Dsts: 2,\r\n    Ciam: 3,\r\n};\n\nexport { AuthorityType };\n//# sourceMappingURL=AuthorityType.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction isOpenIdConfigResponse(response) {\r\n    return (response.hasOwnProperty(\"authorization_endpoint\") &&\r\n        response.hasOwnProperty(\"token_endpoint\") &&\r\n        response.hasOwnProperty(\"issuer\") &&\r\n        response.hasOwnProperty(\"jwks_uri\"));\r\n}\n\nexport { isOpenIdConfigResponse };\n//# sourceMappingURL=OpenIdConfigResponse.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction isCloudInstanceDiscoveryResponse(response) {\r\n    return (response.hasOwnProperty(\"tenant_discovery_endpoint\") &&\r\n        response.hasOwnProperty(\"metadata\"));\r\n}\n\nexport { isCloudInstanceDiscoveryResponse };\n//# sourceMappingURL=CloudInstanceDiscoveryResponse.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction isCloudInstanceDiscoveryErrorResponse(response) {\r\n    return (response.hasOwnProperty(\"error\") &&\r\n        response.hasOwnProperty(\"error_description\"));\r\n}\n\nexport { isCloudInstanceDiscoveryErrorResponse };\n//# sourceMappingURL=CloudInstanceDiscoveryErrorResponse.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Wraps a function with a performance measurement.\r\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId) => {\r\n    return (...args) => {\r\n        logger.trace(`Executing function ${eventName}`);\r\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\r\n        if (correlationId) {\r\n            // Track number of times this API is called in a single request\r\n            const eventCount = eventName + \"CallCount\";\r\n            telemetryClient?.incrementFields({ [eventCount]: 1 }, correlationId);\r\n        }\r\n        try {\r\n            const result = callback(...args);\r\n            inProgressEvent?.end({\r\n                success: true,\r\n            });\r\n            logger.trace(`Returning result from ${eventName}`);\r\n            return result;\r\n        }\r\n        catch (e) {\r\n            logger.trace(`Error occurred in ${eventName}`);\r\n            try {\r\n                logger.trace(JSON.stringify(e));\r\n            }\r\n            catch (e) {\r\n                logger.trace(\"Unable to print error message.\");\r\n            }\r\n            inProgressEvent?.end({\r\n                success: false,\r\n            }, e);\r\n            throw e;\r\n        }\r\n    };\r\n};\r\n/**\r\n * Wraps an async function with a performance measurement.\r\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n *\r\n */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId) => {\r\n    return (...args) => {\r\n        logger.trace(`Executing function ${eventName}`);\r\n        const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\r\n        if (correlationId) {\r\n            // Track number of times this API is called in a single request\r\n            const eventCount = eventName + \"CallCount\";\r\n            telemetryClient?.incrementFields({ [eventCount]: 1 }, correlationId);\r\n        }\r\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\r\n        return callback(...args)\r\n            .then((response) => {\r\n            logger.trace(`Returning result from ${eventName}`);\r\n            inProgressEvent?.end({\r\n                success: true,\r\n            });\r\n            return response;\r\n        })\r\n            .catch((e) => {\r\n            logger.trace(`Error occurred in ${eventName}`);\r\n            try {\r\n                logger.trace(JSON.stringify(e));\r\n            }\r\n            catch (e) {\r\n                logger.trace(\"Unable to print error message.\");\r\n            }\r\n            inProgressEvent?.end({\r\n                success: false,\r\n            }, e);\r\n            throw e;\r\n        });\r\n    };\r\n};\n\nexport { invoke, invokeAsync };\n//# sourceMappingURL=FunctionWrappers.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { Constants, HttpStatus, RegionDiscoverySources } from '../utils/Constants.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nclass RegionDiscovery {\r\n    constructor(networkInterface, logger, performanceClient, correlationId) {\r\n        this.networkInterface = networkInterface;\r\n        this.logger = logger;\r\n        this.performanceClient = performanceClient;\r\n        this.correlationId = correlationId;\r\n    }\r\n    /**\r\n     * Detect the region from the application's environment.\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    async detectRegion(environmentRegion, regionDiscoveryMetadata) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryDetectRegion, this.correlationId);\r\n        // Initialize auto detected region with the region from the envrionment\r\n        let autodetectedRegionName = environmentRegion;\r\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS\r\n        if (!autodetectedRegionName) {\r\n            const options = RegionDiscovery.IMDS_OPTIONS;\r\n            try {\r\n                const localIMDSVersionResponse = await invokeAsync(this.getRegionFromIMDS.bind(this), PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(Constants.IMDS_VERSION, options);\r\n                if (localIMDSVersionResponse.status === HttpStatus.SUCCESS) {\r\n                    autodetectedRegionName = localIMDSVersionResponse.body;\r\n                    regionDiscoveryMetadata.region_source =\r\n                        RegionDiscoverySources.IMDS;\r\n                }\r\n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry.\r\n                if (localIMDSVersionResponse.status === HttpStatus.BAD_REQUEST) {\r\n                    const currentIMDSVersion = await invokeAsync(this.getCurrentVersion.bind(this), PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.logger, this.performanceClient, this.correlationId)(options);\r\n                    if (!currentIMDSVersion) {\r\n                        regionDiscoveryMetadata.region_source =\r\n                            RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        return null;\r\n                    }\r\n                    const currentIMDSVersionResponse = await invokeAsync(this.getRegionFromIMDS.bind(this), PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.logger, this.performanceClient, this.correlationId)(currentIMDSVersion, options);\r\n                    if (currentIMDSVersionResponse.status === HttpStatus.SUCCESS) {\r\n                        autodetectedRegionName =\r\n                            currentIMDSVersionResponse.body;\r\n                        regionDiscoveryMetadata.region_source =\r\n                            RegionDiscoverySources.IMDS;\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n                regionDiscoveryMetadata.region_source =\r\n                    RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                return null;\r\n            }\r\n        }\r\n        else {\r\n            regionDiscoveryMetadata.region_source =\r\n                RegionDiscoverySources.ENVIRONMENT_VARIABLE;\r\n        }\r\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\r\n        if (!autodetectedRegionName) {\r\n            regionDiscoveryMetadata.region_source =\r\n                RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n        }\r\n        return autodetectedRegionName || null;\r\n    }\r\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     *\r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */\r\n    async getRegionFromIMDS(version, options) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetRegionFromIMDS, this.correlationId);\r\n        return this.networkInterface.sendGetRequestAsync(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, options, Constants.IMDS_TIMEOUT);\r\n    }\r\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *\r\n     * @returns Promise<string | null>\r\n     */\r\n    async getCurrentVersion(options) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RegionDiscoveryGetCurrentVersion, this.correlationId);\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync(`${Constants.IMDS_ENDPOINT}?format=json`, options);\r\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\r\n            if (response.status === HttpStatus.BAD_REQUEST &&\r\n                response.body &&\r\n                response.body[\"newest-versions\"] &&\r\n                response.body[\"newest-versions\"].length > 0) {\r\n                return response.body[\"newest-versions\"][0];\r\n            }\r\n            return null;\r\n        }\r\n        catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// Options for the IMDS endpoint request\r\nRegionDiscovery.IMDS_OPTIONS = {\r\n    headers: {\r\n        Metadata: \"true\",\r\n    },\r\n};\n\nexport { RegionDiscovery };\n//# sourceMappingURL=RegionDiscovery.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Utility functions for managing date and time operations.\r\n */\r\n/**\r\n * return the current time in Unix time (seconds).\r\n */\r\nfunction nowSeconds() {\r\n    // Date.getTime() returns in milliseconds.\r\n    return Math.round(new Date().getTime() / 1000.0);\r\n}\r\n/**\r\n * Converts JS Date object to seconds\r\n * @param date Date\r\n */\r\nfunction toSecondsFromDate(date) {\r\n    // Convert date to seconds\r\n    return date.getTime() / 1000;\r\n}\r\n/**\r\n * Convert seconds to JS Date object. Seconds can be in a number or string format or undefined (will still return a date).\r\n * @param seconds\r\n */\r\nfunction toDateFromSeconds(seconds) {\r\n    if (seconds) {\r\n        return new Date(Number(seconds) * 1000);\r\n    }\r\n    return new Date();\r\n}\r\n/**\r\n * check if a token is expired based on given UTC time in seconds.\r\n * @param expiresOn\r\n */\r\nfunction isTokenExpired(expiresOn, offset) {\r\n    // check for access token expiry\r\n    const expirationSec = Number(expiresOn) || 0;\r\n    const offsetCurrentTimeSec = nowSeconds() + offset;\r\n    // If current time + offset is greater than token expiration time, then token is expired.\r\n    return offsetCurrentTimeSec > expirationSec;\r\n}\r\n/**\r\n * Checks if a cache entry is expired based on the last updated time and cache retention days.\r\n * @param lastUpdatedAt\r\n * @param cacheRetentionDays\r\n * @returns\r\n */\r\nfunction isCacheExpired(lastUpdatedAt, cacheRetentionDays) {\r\n    const cacheExpirationTimestamp = Number(lastUpdatedAt) + cacheRetentionDays * 24 * 60 * 60 * 1000;\r\n    return Date.now() > cacheExpirationTimestamp;\r\n}\r\n/**\r\n * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n * i.e. The system clock was turned back after acquiring the cached token\r\n * @param cachedAt\r\n * @param offset\r\n */\r\nfunction wasClockTurnedBack(cachedAt) {\r\n    const cachedAtSec = Number(cachedAt);\r\n    return cachedAtSec > nowSeconds();\r\n}\r\n/**\r\n * Waits for t number of milliseconds\r\n * @param t number\r\n * @param value T\r\n */\r\nfunction delay(t, value) {\r\n    return new Promise((resolve) => setTimeout(() => resolve(value), t));\r\n}\n\nexport { delay, isCacheExpired, isTokenExpired, nowSeconds, toDateFromSeconds, toSecondsFromDate, wasClockTurnedBack };\n//# sourceMappingURL=TimeUtils.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { extractTokenClaims } from '../../account/AuthToken.mjs';\nimport { createClientAuthError } from '../../error/ClientAuthError.mjs';\nimport { CredentialType, AuthenticationScheme, SERVER_TELEM_CONSTANTS, ThrottlingConstants, APP_METADATA, Separators, AUTHORITY_METADATA_CONSTANTS } from '../../utils/Constants.mjs';\nimport { nowSeconds } from '../../utils/TimeUtils.mjs';\nimport { tokenClaimsCnfRequiredForSignedJwt } from '../../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Create IdTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */\r\nfunction createIdTokenEntity(homeAccountId, environment, idToken, clientId, tenantId) {\r\n    const idTokenEntity = {\r\n        credentialType: CredentialType.ID_TOKEN,\r\n        homeAccountId: homeAccountId,\r\n        environment: environment,\r\n        clientId: clientId,\r\n        secret: idToken,\r\n        realm: tenantId,\r\n        lastUpdatedAt: Date.now().toString(), // Set the last updated time to now\r\n    };\r\n    return idTokenEntity;\r\n}\r\n/**\r\n * Create AccessTokenEntity\r\n * @param homeAccountId\r\n * @param environment\r\n * @param accessToken\r\n * @param clientId\r\n * @param tenantId\r\n * @param scopes\r\n * @param expiresOn\r\n * @param extExpiresOn\r\n */\r\nfunction createAccessTokenEntity(homeAccountId, environment, accessToken, clientId, tenantId, scopes, expiresOn, extExpiresOn, base64Decode, refreshOn, tokenType, userAssertionHash, keyId, requestedClaims, requestedClaimsHash) {\r\n    const atEntity = {\r\n        homeAccountId: homeAccountId,\r\n        credentialType: CredentialType.ACCESS_TOKEN,\r\n        secret: accessToken,\r\n        cachedAt: nowSeconds().toString(),\r\n        expiresOn: expiresOn.toString(),\r\n        extendedExpiresOn: extExpiresOn.toString(),\r\n        environment: environment,\r\n        clientId: clientId,\r\n        realm: tenantId,\r\n        target: scopes,\r\n        tokenType: tokenType || AuthenticationScheme.BEARER,\r\n        lastUpdatedAt: Date.now().toString(), // Set the last updated time to now\r\n    };\r\n    if (userAssertionHash) {\r\n        atEntity.userAssertionHash = userAssertionHash;\r\n    }\r\n    if (refreshOn) {\r\n        atEntity.refreshOn = refreshOn.toString();\r\n    }\r\n    if (requestedClaims) {\r\n        atEntity.requestedClaims = requestedClaims;\r\n        atEntity.requestedClaimsHash = requestedClaimsHash;\r\n    }\r\n    /*\r\n     * Create Access Token With Auth Scheme instead of regular access token\r\n     * Cast to lower to handle \"bearer\" from ADFS\r\n     */\r\n    if (atEntity.tokenType?.toLowerCase() !==\r\n        AuthenticationScheme.BEARER.toLowerCase()) {\r\n        atEntity.credentialType = CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME;\r\n        switch (atEntity.tokenType) {\r\n            case AuthenticationScheme.POP:\r\n                // Make sure keyId is present and add it to credential\r\n                const tokenClaims = extractTokenClaims(accessToken, base64Decode);\r\n                if (!tokenClaims?.cnf?.kid) {\r\n                    throw createClientAuthError(tokenClaimsCnfRequiredForSignedJwt);\r\n                }\r\n                atEntity.keyId = tokenClaims.cnf.kid;\r\n                break;\r\n            case AuthenticationScheme.SSH:\r\n                atEntity.keyId = keyId;\r\n        }\r\n    }\r\n    return atEntity;\r\n}\r\n/**\r\n * Create RefreshTokenEntity\r\n * @param homeAccountId\r\n * @param authenticationResult\r\n * @param clientId\r\n * @param authority\r\n */\r\nfunction createRefreshTokenEntity(homeAccountId, environment, refreshToken, clientId, familyId, userAssertionHash, expiresOn) {\r\n    const rtEntity = {\r\n        credentialType: CredentialType.REFRESH_TOKEN,\r\n        homeAccountId: homeAccountId,\r\n        environment: environment,\r\n        clientId: clientId,\r\n        secret: refreshToken,\r\n        lastUpdatedAt: Date.now().toString(),\r\n    };\r\n    if (userAssertionHash) {\r\n        rtEntity.userAssertionHash = userAssertionHash;\r\n    }\r\n    if (familyId) {\r\n        rtEntity.familyId = familyId;\r\n    }\r\n    if (expiresOn) {\r\n        rtEntity.expiresOn = expiresOn.toString();\r\n    }\r\n    return rtEntity;\r\n}\r\nfunction isCredentialEntity(entity) {\r\n    return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n        entity.hasOwnProperty(\"environment\") &&\r\n        entity.hasOwnProperty(\"credentialType\") &&\r\n        entity.hasOwnProperty(\"clientId\") &&\r\n        entity.hasOwnProperty(\"secret\"));\r\n}\r\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isAccessTokenEntity(entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (isCredentialEntity(entity) &&\r\n        entity.hasOwnProperty(\"realm\") &&\r\n        entity.hasOwnProperty(\"target\") &&\r\n        (entity[\"credentialType\"] === CredentialType.ACCESS_TOKEN ||\r\n            entity[\"credentialType\"] ===\r\n                CredentialType.ACCESS_TOKEN_WITH_AUTH_SCHEME));\r\n}\r\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isIdTokenEntity(entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (isCredentialEntity(entity) &&\r\n        entity.hasOwnProperty(\"realm\") &&\r\n        entity[\"credentialType\"] === CredentialType.ID_TOKEN);\r\n}\r\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isRefreshTokenEntity(entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (isCredentialEntity(entity) &&\r\n        entity[\"credentialType\"] === CredentialType.REFRESH_TOKEN);\r\n}\r\n/**\r\n * validates if a given cache entry is \"Telemetry\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */\r\nfunction isServerTelemetryEntity(key, entity) {\r\n    const validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\r\n    let validateEntity = true;\r\n    if (entity) {\r\n        validateEntity =\r\n            entity.hasOwnProperty(\"failedRequests\") &&\r\n                entity.hasOwnProperty(\"errors\") &&\r\n                entity.hasOwnProperty(\"cacheHits\");\r\n    }\r\n    return validateKey && validateEntity;\r\n}\r\n/**\r\n * validates if a given cache entry is \"Throttling\", parses <key,value>\r\n * @param key\r\n * @param entity\r\n */\r\nfunction isThrottlingEntity(key, entity) {\r\n    let validateKey = false;\r\n    if (key) {\r\n        validateKey = key.indexOf(ThrottlingConstants.THROTTLING_PREFIX) === 0;\r\n    }\r\n    let validateEntity = true;\r\n    if (entity) {\r\n        validateEntity = entity.hasOwnProperty(\"throttleTime\");\r\n    }\r\n    return validateKey && validateEntity;\r\n}\r\n/**\r\n * Generate AppMetadata Cache Key as per the schema: appmetadata-<environment>-<client_id>\r\n */\r\nfunction generateAppMetadataKey({ environment, clientId, }) {\r\n    const appMetaDataKeyArray = [\r\n        APP_METADATA,\r\n        environment,\r\n        clientId,\r\n    ];\r\n    return appMetaDataKeyArray\r\n        .join(Separators.CACHE_KEY_SEPARATOR)\r\n        .toLowerCase();\r\n}\r\n/*\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isAppMetadataEntity(key, entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (key.indexOf(APP_METADATA) === 0 &&\r\n        entity.hasOwnProperty(\"clientId\") &&\r\n        entity.hasOwnProperty(\"environment\"));\r\n}\r\n/**\r\n * Validates an entity: checks for all expected params\r\n * @param entity\r\n */\r\nfunction isAuthorityMetadataEntity(key, entity) {\r\n    if (!entity) {\r\n        return false;\r\n    }\r\n    return (key.indexOf(AUTHORITY_METADATA_CONSTANTS.CACHE_KEY) === 0 &&\r\n        entity.hasOwnProperty(\"aliases\") &&\r\n        entity.hasOwnProperty(\"preferred_cache\") &&\r\n        entity.hasOwnProperty(\"preferred_network\") &&\r\n        entity.hasOwnProperty(\"canonical_authority\") &&\r\n        entity.hasOwnProperty(\"authorization_endpoint\") &&\r\n        entity.hasOwnProperty(\"token_endpoint\") &&\r\n        entity.hasOwnProperty(\"issuer\") &&\r\n        entity.hasOwnProperty(\"aliasesFromNetwork\") &&\r\n        entity.hasOwnProperty(\"endpointsFromNetwork\") &&\r\n        entity.hasOwnProperty(\"expiresAt\") &&\r\n        entity.hasOwnProperty(\"jwks_uri\"));\r\n}\r\n/**\r\n * Reset the exiresAt value\r\n */\r\nfunction generateAuthorityMetadataExpiresAt() {\r\n    return (nowSeconds() +\r\n        AUTHORITY_METADATA_CONSTANTS.REFRESH_TIME_SECONDS);\r\n}\r\nfunction updateAuthorityEndpointMetadata(authorityMetadata, updatedValues, fromNetwork) {\r\n    authorityMetadata.authorization_endpoint =\r\n        updatedValues.authorization_endpoint;\r\n    authorityMetadata.token_endpoint = updatedValues.token_endpoint;\r\n    authorityMetadata.end_session_endpoint = updatedValues.end_session_endpoint;\r\n    authorityMetadata.issuer = updatedValues.issuer;\r\n    authorityMetadata.endpointsFromNetwork = fromNetwork;\r\n    authorityMetadata.jwks_uri = updatedValues.jwks_uri;\r\n}\r\nfunction updateCloudDiscoveryMetadata(authorityMetadata, updatedValues, fromNetwork) {\r\n    authorityMetadata.aliases = updatedValues.aliases;\r\n    authorityMetadata.preferred_cache = updatedValues.preferred_cache;\r\n    authorityMetadata.preferred_network = updatedValues.preferred_network;\r\n    authorityMetadata.aliasesFromNetwork = fromNetwork;\r\n}\r\n/**\r\n * Returns whether or not the data needs to be refreshed\r\n */\r\nfunction isAuthorityMetadataExpired(metadata) {\r\n    return metadata.expiresAt <= nowSeconds();\r\n}\n\nexport { createAccessTokenEntity, createIdTokenEntity, createRefreshTokenEntity, generateAppMetadataKey, generateAuthorityMetadataExpiresAt, isAccessTokenEntity, isAppMetadataEntity, isAuthorityMetadataEntity, isAuthorityMetadataExpired, isCredentialEntity, isIdTokenEntity, isRefreshTokenEntity, isServerTelemetryEntity, isThrottlingEntity, updateAuthorityEndpointMetadata, updateCloudDiscoveryMetadata };\n//# sourceMappingURL=CacheHelpers.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { AuthorityType } from './AuthorityType.mjs';\nimport { isOpenIdConfigResponse } from './OpenIdConfigResponse.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { Constants, AuthorityMetadataSource, RegionDiscoveryOutcomes, AADAuthorityConstants } from '../utils/Constants.mjs';\nimport { EndpointMetadata, getCloudDiscoveryMetadataFromHardcodedValues, getCloudDiscoveryMetadataFromNetworkResponse, InstanceDiscoveryMetadataAliases } from './AuthorityMetadata.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { ProtocolMode } from './ProtocolMode.mjs';\nimport { AzureCloudInstance } from './AuthorityOptions.mjs';\nimport { isCloudInstanceDiscoveryResponse } from './CloudInstanceDiscoveryResponse.mjs';\nimport { isCloudInstanceDiscoveryErrorResponse } from './CloudInstanceDiscoveryErrorResponse.mjs';\nimport { RegionDiscovery } from './RegionDiscovery.mjs';\nimport { AuthError } from '../error/AuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { generateAuthorityMetadataExpiresAt, updateAuthorityEndpointMetadata, isAuthorityMetadataExpired, updateCloudDiscoveryMetadata } from '../cache/utils/CacheHelpers.mjs';\nimport { endpointResolutionError, endSessionEndpointNotSupported, openIdConfigError } from '../error/ClientAuthErrorCodes.mjs';\nimport { invalidAuthorityMetadata, untrustedAuthority, invalidCloudDiscoveryMetadata } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * The authority class validates the authority URIs used by the user, and retrieves the OpenID Configuration Data from the\r\n * endpoint. It will store the pertinent config data in this object for use during token calls.\r\n * @internal\r\n */\r\nclass Authority {\r\n    constructor(authority, networkInterface, cacheManager, authorityOptions, logger, correlationId, performanceClient, managedIdentity) {\r\n        this.canonicalAuthority = authority;\r\n        this._canonicalAuthority.validateAsUri();\r\n        this.networkInterface = networkInterface;\r\n        this.cacheManager = cacheManager;\r\n        this.authorityOptions = authorityOptions;\r\n        this.regionDiscoveryMetadata = {\r\n            region_used: undefined,\r\n            region_source: undefined,\r\n            region_outcome: undefined,\r\n        };\r\n        this.logger = logger;\r\n        this.performanceClient = performanceClient;\r\n        this.correlationId = correlationId;\r\n        this.managedIdentity = managedIdentity || false;\r\n        this.regionDiscovery = new RegionDiscovery(networkInterface, this.logger, this.performanceClient, this.correlationId);\r\n    }\r\n    /**\r\n     * Get {@link AuthorityType}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */\r\n    getAuthorityType(authorityUri) {\r\n        // CIAM auth url pattern is being standardized as: <tenant>.ciamlogin.com\r\n        if (authorityUri.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\r\n            return AuthorityType.Ciam;\r\n        }\r\n        const pathSegments = authorityUri.PathSegments;\r\n        if (pathSegments.length) {\r\n            switch (pathSegments[0].toLowerCase()) {\r\n                case Constants.ADFS:\r\n                    return AuthorityType.Adfs;\r\n                case Constants.DSTS:\r\n                    return AuthorityType.Dsts;\r\n            }\r\n        }\r\n        return AuthorityType.Default;\r\n    }\r\n    // See above for AuthorityType\r\n    get authorityType() {\r\n        return this.getAuthorityType(this.canonicalAuthorityUrlComponents);\r\n    }\r\n    /**\r\n     * ProtocolMode enum representing the way endpoints are constructed.\r\n     */\r\n    get protocolMode() {\r\n        return this.authorityOptions.protocolMode;\r\n    }\r\n    /**\r\n     * Returns authorityOptions which can be used to reinstantiate a new authority instance\r\n     */\r\n    get options() {\r\n        return this.authorityOptions;\r\n    }\r\n    /**\r\n     * A URL that is the authority set by the developer\r\n     */\r\n    get canonicalAuthority() {\r\n        return this._canonicalAuthority.urlString;\r\n    }\r\n    /**\r\n     * Sets canonical authority.\r\n     */\r\n    set canonicalAuthority(url) {\r\n        this._canonicalAuthority = new UrlString(url);\r\n        this._canonicalAuthority.validateAsUri();\r\n        this._canonicalAuthorityUrlComponents = null;\r\n    }\r\n    /**\r\n     * Get authority components.\r\n     */\r\n    get canonicalAuthorityUrlComponents() {\r\n        if (!this._canonicalAuthorityUrlComponents) {\r\n            this._canonicalAuthorityUrlComponents =\r\n                this._canonicalAuthority.getUrlComponents();\r\n        }\r\n        return this._canonicalAuthorityUrlComponents;\r\n    }\r\n    /**\r\n     * Get hostname and port i.e. login.microsoftonline.com\r\n     */\r\n    get hostnameAndPort() {\r\n        return this.canonicalAuthorityUrlComponents.HostNameAndPort.toLowerCase();\r\n    }\r\n    /**\r\n     * Get tenant for authority.\r\n     */\r\n    get tenant() {\r\n        return this.canonicalAuthorityUrlComponents.PathSegments[0];\r\n    }\r\n    /**\r\n     * OAuth /authorize endpoint for requests\r\n     */\r\n    get authorizationEndpoint() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.authorization_endpoint);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * OAuth /token endpoint for requests\r\n     */\r\n    get tokenEndpoint() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.token_endpoint);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    get deviceCodeEndpoint() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.token_endpoint.replace(\"/token\", \"/devicecode\"));\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * OAuth logout endpoint for requests\r\n     */\r\n    get endSessionEndpoint() {\r\n        if (this.discoveryComplete()) {\r\n            // ROPC policies may not have end_session_endpoint set\r\n            if (!this.metadata.end_session_endpoint) {\r\n                throw createClientAuthError(endSessionEndpointNotSupported);\r\n            }\r\n            return this.replacePath(this.metadata.end_session_endpoint);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * OAuth issuer for requests\r\n     */\r\n    get selfSignedJwtAudience() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.issuer);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * Jwks_uri for token signing keys\r\n     */\r\n    get jwksUri() {\r\n        if (this.discoveryComplete()) {\r\n            return this.replacePath(this.metadata.jwks_uri);\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a flag indicating that tenant name can be replaced in authority {@link IUri}\r\n     * @param authorityUri {@link IUri}\r\n     * @private\r\n     */\r\n    canReplaceTenant(authorityUri) {\r\n        return (authorityUri.PathSegments.length === 1 &&\r\n            !Authority.reservedTenantDomains.has(authorityUri.PathSegments[0]) &&\r\n            this.getAuthorityType(authorityUri) === AuthorityType.Default &&\r\n            this.protocolMode !== ProtocolMode.OIDC);\r\n    }\r\n    /**\r\n     * Replaces tenant in url path with current tenant. Defaults to common.\r\n     * @param urlString\r\n     */\r\n    replaceTenant(urlString) {\r\n        return urlString.replace(/{tenant}|{tenantid}/g, this.tenant);\r\n    }\r\n    /**\r\n     * Replaces path such as tenant or policy with the current tenant or policy.\r\n     * @param urlString\r\n     */\r\n    replacePath(urlString) {\r\n        let endpoint = urlString;\r\n        const cachedAuthorityUrl = new UrlString(this.metadata.canonical_authority);\r\n        const cachedAuthorityUrlComponents = cachedAuthorityUrl.getUrlComponents();\r\n        const cachedAuthorityParts = cachedAuthorityUrlComponents.PathSegments;\r\n        const currentAuthorityParts = this.canonicalAuthorityUrlComponents.PathSegments;\r\n        currentAuthorityParts.forEach((currentPart, index) => {\r\n            let cachedPart = cachedAuthorityParts[index];\r\n            if (index === 0 &&\r\n                this.canReplaceTenant(cachedAuthorityUrlComponents)) {\r\n                const tenantId = new UrlString(this.metadata.authorization_endpoint).getUrlComponents().PathSegments[0];\r\n                /**\r\n                 * Check if AAD canonical authority contains tenant domain name, for example \"testdomain.onmicrosoft.com\",\r\n                 * by comparing its first path segment to the corresponding authorization endpoint path segment, which is\r\n                 * always resolved with tenant id by OIDC.\r\n                 */\r\n                if (cachedPart !== tenantId) {\r\n                    this.logger.verbose(`Replacing tenant domain name ${cachedPart} with id ${tenantId}`);\r\n                    cachedPart = tenantId;\r\n                }\r\n            }\r\n            if (currentPart !== cachedPart) {\r\n                endpoint = endpoint.replace(`/${cachedPart}/`, `/${currentPart}/`);\r\n            }\r\n        });\r\n        return this.replaceTenant(endpoint);\r\n    }\r\n    /**\r\n     * The default open id configuration endpoint for any canonical authority.\r\n     */\r\n    get defaultOpenIdConfigurationEndpoint() {\r\n        const canonicalAuthorityHost = this.hostnameAndPort;\r\n        if (this.canonicalAuthority.endsWith(\"v2.0/\") ||\r\n            this.authorityType === AuthorityType.Adfs ||\r\n            (this.protocolMode === ProtocolMode.OIDC &&\r\n                !this.isAliasOfKnownMicrosoftAuthority(canonicalAuthorityHost))) {\r\n            return `${this.canonicalAuthority}.well-known/openid-configuration`;\r\n        }\r\n        return `${this.canonicalAuthority}v2.0/.well-known/openid-configuration`;\r\n    }\r\n    /**\r\n     * Boolean that returns whether or not tenant discovery has been completed.\r\n     */\r\n    discoveryComplete() {\r\n        return !!this.metadata;\r\n    }\r\n    /**\r\n     * Perform endpoint discovery to discover aliases, preferred_cache, preferred_network\r\n     * and the /authorize, /token and logout endpoints.\r\n     */\r\n    async resolveEndpointsAsync() {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityResolveEndpointsAsync, this.correlationId);\r\n        const metadataEntity = this.getCurrentMetadataEntity();\r\n        const cloudDiscoverySource = await invokeAsync(this.updateCloudDiscoveryMetadata.bind(this), PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\r\n        this.canonicalAuthority = this.canonicalAuthority.replace(this.hostnameAndPort, metadataEntity.preferred_network);\r\n        const endpointSource = await invokeAsync(this.updateEndpointMetadata.bind(this), PerformanceEvents.AuthorityUpdateEndpointMetadata, this.logger, this.performanceClient, this.correlationId)(metadataEntity);\r\n        this.updateCachedMetadata(metadataEntity, cloudDiscoverySource, {\r\n            source: endpointSource,\r\n        });\r\n        this.performanceClient?.addFields({\r\n            cloudDiscoverySource: cloudDiscoverySource,\r\n            authorityEndpointSource: endpointSource,\r\n        }, this.correlationId);\r\n    }\r\n    /**\r\n     * Returns metadata entity from cache if it exists, otherwiser returns a new metadata entity built\r\n     * from the configured canonical authority\r\n     * @returns\r\n     */\r\n    getCurrentMetadataEntity() {\r\n        let metadataEntity = this.cacheManager.getAuthorityMetadataByAlias(this.hostnameAndPort);\r\n        if (!metadataEntity) {\r\n            metadataEntity = {\r\n                aliases: [],\r\n                preferred_cache: this.hostnameAndPort,\r\n                preferred_network: this.hostnameAndPort,\r\n                canonical_authority: this.canonicalAuthority,\r\n                authorization_endpoint: \"\",\r\n                token_endpoint: \"\",\r\n                end_session_endpoint: \"\",\r\n                issuer: \"\",\r\n                aliasesFromNetwork: false,\r\n                endpointsFromNetwork: false,\r\n                expiresAt: generateAuthorityMetadataExpiresAt(),\r\n                jwks_uri: \"\",\r\n            };\r\n        }\r\n        return metadataEntity;\r\n    }\r\n    /**\r\n     * Updates cached metadata based on metadata source and sets the instance's metadata\r\n     * property to the same value\r\n     * @param metadataEntity\r\n     * @param cloudDiscoverySource\r\n     * @param endpointMetadataResult\r\n     */\r\n    updateCachedMetadata(metadataEntity, cloudDiscoverySource, endpointMetadataResult) {\r\n        if (cloudDiscoverySource !== AuthorityMetadataSource.CACHE &&\r\n            endpointMetadataResult?.source !== AuthorityMetadataSource.CACHE) {\r\n            // Reset the expiration time unless both values came from a successful cache lookup\r\n            metadataEntity.expiresAt =\r\n                generateAuthorityMetadataExpiresAt();\r\n            metadataEntity.canonical_authority = this.canonicalAuthority;\r\n        }\r\n        const cacheKey = this.cacheManager.generateAuthorityMetadataCacheKey(metadataEntity.preferred_cache);\r\n        this.cacheManager.setAuthorityMetadata(cacheKey, metadataEntity);\r\n        this.metadata = metadataEntity;\r\n    }\r\n    /**\r\n     * Update AuthorityMetadataEntity with new endpoints and return where the information came from\r\n     * @param metadataEntity\r\n     */\r\n    async updateEndpointMetadata(metadataEntity) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateEndpointMetadata, this.correlationId);\r\n        const localMetadata = this.updateEndpointMetadataFromLocalSources(metadataEntity);\r\n        // Further update may be required for hardcoded metadata if regional metadata is preferred\r\n        if (localMetadata) {\r\n            if (localMetadata.source ===\r\n                AuthorityMetadataSource.HARDCODED_VALUES) {\r\n                // If the user prefers to use an azure region replace the global endpoints with regional information.\r\n                if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\r\n                    if (localMetadata.metadata) {\r\n                        const hardcodedMetadata = await invokeAsync(this.updateMetadataWithRegionalInformation.bind(this), PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(localMetadata.metadata);\r\n                        updateAuthorityEndpointMetadata(metadataEntity, hardcodedMetadata, false);\r\n                        metadataEntity.canonical_authority =\r\n                            this.canonicalAuthority;\r\n                    }\r\n                }\r\n            }\r\n            return localMetadata.source;\r\n        }\r\n        // Get metadata from network if local sources aren't available\r\n        let metadata = await invokeAsync(this.getEndpointMetadataFromNetwork.bind(this), PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\r\n        if (metadata) {\r\n            // If the user prefers to use an azure region replace the global endpoints with regional information.\r\n            if (this.authorityOptions.azureRegionConfiguration?.azureRegion) {\r\n                metadata = await invokeAsync(this.updateMetadataWithRegionalInformation.bind(this), PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.logger, this.performanceClient, this.correlationId)(metadata);\r\n            }\r\n            updateAuthorityEndpointMetadata(metadataEntity, metadata, true);\r\n            return AuthorityMetadataSource.NETWORK;\r\n        }\r\n        else {\r\n            // Metadata could not be obtained from the config, cache, network or hardcoded values\r\n            throw createClientAuthError(openIdConfigError, this.defaultOpenIdConfigurationEndpoint);\r\n        }\r\n    }\r\n    /**\r\n     * Updates endpoint metadata from local sources and returns where the information was retrieved from and the metadata config\r\n     * response if the source is hardcoded metadata\r\n     * @param metadataEntity\r\n     * @returns\r\n     */\r\n    updateEndpointMetadataFromLocalSources(metadataEntity) {\r\n        this.logger.verbose(\"Attempting to get endpoint metadata from authority configuration\");\r\n        const configMetadata = this.getEndpointMetadataFromConfig();\r\n        if (configMetadata) {\r\n            this.logger.verbose(\"Found endpoint metadata in authority configuration\");\r\n            updateAuthorityEndpointMetadata(metadataEntity, configMetadata, false);\r\n            return {\r\n                source: AuthorityMetadataSource.CONFIG,\r\n            };\r\n        }\r\n        this.logger.verbose(\"Did not find endpoint metadata in the config... Attempting to get endpoint metadata from the hardcoded values.\");\r\n        // skipAuthorityMetadataCache is used to bypass hardcoded authority metadata and force a network metadata cache lookup and network metadata request if no cached response is available.\r\n        if (this.authorityOptions.skipAuthorityMetadataCache) {\r\n            this.logger.verbose(\"Skipping hardcoded metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get endpoint metadata from the network metadata cache.\");\r\n        }\r\n        else {\r\n            const hardcodedMetadata = this.getEndpointMetadataFromHardcodedValues();\r\n            if (hardcodedMetadata) {\r\n                updateAuthorityEndpointMetadata(metadataEntity, hardcodedMetadata, false);\r\n                return {\r\n                    source: AuthorityMetadataSource.HARDCODED_VALUES,\r\n                    metadata: hardcodedMetadata,\r\n                };\r\n            }\r\n            else {\r\n                this.logger.verbose(\"Did not find endpoint metadata in hardcoded values... Attempting to get endpoint metadata from the network metadata cache.\");\r\n            }\r\n        }\r\n        // Check cached metadata entity expiration status\r\n        const metadataEntityExpired = isAuthorityMetadataExpired(metadataEntity);\r\n        if (this.isAuthoritySameType(metadataEntity) &&\r\n            metadataEntity.endpointsFromNetwork &&\r\n            !metadataEntityExpired) {\r\n            // No need to update\r\n            this.logger.verbose(\"Found endpoint metadata in the cache.\");\r\n            return { source: AuthorityMetadataSource.CACHE };\r\n        }\r\n        else if (metadataEntityExpired) {\r\n            this.logger.verbose(\"The metadata entity is expired.\");\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Compares the number of url components after the domain to determine if the cached\r\n     * authority metadata can be used for the requested authority. Protects against same domain different\r\n     * authority such as login.microsoftonline.com/tenant and login.microsoftonline.com/tfp/tenant/policy\r\n     * @param metadataEntity\r\n     */\r\n    isAuthoritySameType(metadataEntity) {\r\n        const cachedAuthorityUrl = new UrlString(metadataEntity.canonical_authority);\r\n        const cachedParts = cachedAuthorityUrl.getUrlComponents().PathSegments;\r\n        return (cachedParts.length ===\r\n            this.canonicalAuthorityUrlComponents.PathSegments.length);\r\n    }\r\n    /**\r\n     * Parse authorityMetadata config option\r\n     */\r\n    getEndpointMetadataFromConfig() {\r\n        if (this.authorityOptions.authorityMetadata) {\r\n            try {\r\n                return JSON.parse(this.authorityOptions.authorityMetadata);\r\n            }\r\n            catch (e) {\r\n                throw createClientConfigurationError(invalidAuthorityMetadata);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Gets OAuth endpoints from the given OpenID configuration endpoint.\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */\r\n    async getEndpointMetadataFromNetwork() {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetEndpointMetadataFromNetwork, this.correlationId);\r\n        const options = {};\r\n        /*\r\n         * TODO: Add a timeout if the authority exists in our library's\r\n         * hardcoded list of metadata\r\n         */\r\n        const openIdConfigurationEndpoint = this.defaultOpenIdConfigurationEndpoint;\r\n        this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: attempting to retrieve OAuth endpoints from ${openIdConfigurationEndpoint}`);\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync(openIdConfigurationEndpoint, options);\r\n            const isValidResponse = isOpenIdConfigResponse(response.body);\r\n            if (isValidResponse) {\r\n                return response.body;\r\n            }\r\n            else {\r\n                this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: could not parse response as OpenID configuration`);\r\n                return null;\r\n            }\r\n        }\r\n        catch (e) {\r\n            this.logger.verbose(`Authority.getEndpointMetadataFromNetwork: ${e}`);\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * Get OAuth endpoints for common authorities.\r\n     */\r\n    getEndpointMetadataFromHardcodedValues() {\r\n        if (this.hostnameAndPort in EndpointMetadata) {\r\n            return EndpointMetadata[this.hostnameAndPort];\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Update the retrieved metadata with regional information.\r\n     * User selected Azure region will be used if configured.\r\n     */\r\n    async updateMetadataWithRegionalInformation(metadata) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateMetadataWithRegionalInformation, this.correlationId);\r\n        const userConfiguredAzureRegion = this.authorityOptions.azureRegionConfiguration?.azureRegion;\r\n        if (userConfiguredAzureRegion) {\r\n            if (userConfiguredAzureRegion !==\r\n                Constants.AZURE_REGION_AUTO_DISCOVER_FLAG) {\r\n                this.regionDiscoveryMetadata.region_outcome =\r\n                    RegionDiscoveryOutcomes.CONFIGURED_NO_AUTO_DETECTION;\r\n                this.regionDiscoveryMetadata.region_used =\r\n                    userConfiguredAzureRegion;\r\n                return Authority.replaceWithRegionalInformation(metadata, userConfiguredAzureRegion);\r\n            }\r\n            const autodetectedRegionName = await invokeAsync(this.regionDiscovery.detectRegion.bind(this.regionDiscovery), PerformanceEvents.RegionDiscoveryDetectRegion, this.logger, this.performanceClient, this.correlationId)(this.authorityOptions.azureRegionConfiguration\r\n                ?.environmentRegion, this.regionDiscoveryMetadata);\r\n            if (autodetectedRegionName) {\r\n                this.regionDiscoveryMetadata.region_outcome =\r\n                    RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_SUCCESSFUL;\r\n                this.regionDiscoveryMetadata.region_used =\r\n                    autodetectedRegionName;\r\n                return Authority.replaceWithRegionalInformation(metadata, autodetectedRegionName);\r\n            }\r\n            this.regionDiscoveryMetadata.region_outcome =\r\n                RegionDiscoveryOutcomes.AUTO_DETECTION_REQUESTED_FAILED;\r\n        }\r\n        return metadata;\r\n    }\r\n    /**\r\n     * Updates the AuthorityMetadataEntity with new aliases, preferred_network and preferred_cache\r\n     * and returns where the information was retrieved from\r\n     * @param metadataEntity\r\n     * @returns AuthorityMetadataSource\r\n     */\r\n    async updateCloudDiscoveryMetadata(metadataEntity) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityUpdateCloudDiscoveryMetadata, this.correlationId);\r\n        const localMetadataSource = this.updateCloudDiscoveryMetadataFromLocalSources(metadataEntity);\r\n        if (localMetadataSource) {\r\n            return localMetadataSource;\r\n        }\r\n        // Fallback to network as metadata source\r\n        const metadata = await invokeAsync(this.getCloudDiscoveryMetadataFromNetwork.bind(this), PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.logger, this.performanceClient, this.correlationId)();\r\n        if (metadata) {\r\n            updateCloudDiscoveryMetadata(metadataEntity, metadata, true);\r\n            return AuthorityMetadataSource.NETWORK;\r\n        }\r\n        // Metadata could not be obtained from the config, cache, network or hardcoded values\r\n        throw createClientConfigurationError(untrustedAuthority);\r\n    }\r\n    updateCloudDiscoveryMetadataFromLocalSources(metadataEntity) {\r\n        this.logger.verbose(\"Attempting to get cloud discovery metadata  from authority configuration\");\r\n        this.logger.verbosePii(`Known Authorities: ${this.authorityOptions.knownAuthorities ||\r\n            Constants.NOT_APPLICABLE}`);\r\n        this.logger.verbosePii(`Authority Metadata: ${this.authorityOptions.authorityMetadata ||\r\n            Constants.NOT_APPLICABLE}`);\r\n        this.logger.verbosePii(`Canonical Authority: ${metadataEntity.canonical_authority || Constants.NOT_APPLICABLE}`);\r\n        const metadata = this.getCloudDiscoveryMetadataFromConfig();\r\n        if (metadata) {\r\n            this.logger.verbose(\"Found cloud discovery metadata in authority configuration\");\r\n            updateCloudDiscoveryMetadata(metadataEntity, metadata, false);\r\n            return AuthorityMetadataSource.CONFIG;\r\n        }\r\n        // If the cached metadata came from config but that config was not passed to this instance, we must go to hardcoded values\r\n        this.logger.verbose(\"Did not find cloud discovery metadata in the config... Attempting to get cloud discovery metadata from the hardcoded values.\");\r\n        if (this.options.skipAuthorityMetadataCache) {\r\n            this.logger.verbose(\"Skipping hardcoded cloud discovery metadata cache since skipAuthorityMetadataCache is set to true. Attempting to get cloud discovery metadata from the network metadata cache.\");\r\n        }\r\n        else {\r\n            const hardcodedMetadata = getCloudDiscoveryMetadataFromHardcodedValues(this.hostnameAndPort);\r\n            if (hardcodedMetadata) {\r\n                this.logger.verbose(\"Found cloud discovery metadata from hardcoded values.\");\r\n                updateCloudDiscoveryMetadata(metadataEntity, hardcodedMetadata, false);\r\n                return AuthorityMetadataSource.HARDCODED_VALUES;\r\n            }\r\n            this.logger.verbose(\"Did not find cloud discovery metadata in hardcoded values... Attempting to get cloud discovery metadata from the network metadata cache.\");\r\n        }\r\n        const metadataEntityExpired = isAuthorityMetadataExpired(metadataEntity);\r\n        if (this.isAuthoritySameType(metadataEntity) &&\r\n            metadataEntity.aliasesFromNetwork &&\r\n            !metadataEntityExpired) {\r\n            this.logger.verbose(\"Found cloud discovery metadata in the cache.\");\r\n            // No need to update\r\n            return AuthorityMetadataSource.CACHE;\r\n        }\r\n        else if (metadataEntityExpired) {\r\n            this.logger.verbose(\"The metadata entity is expired.\");\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Parse cloudDiscoveryMetadata config or check knownAuthorities\r\n     */\r\n    getCloudDiscoveryMetadataFromConfig() {\r\n        // CIAM does not support cloud discovery metadata\r\n        if (this.authorityType === AuthorityType.Ciam) {\r\n            this.logger.verbose(\"CIAM authorities do not support cloud discovery metadata, generate the aliases from authority host.\");\r\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        // Check if network response was provided in config\r\n        if (this.authorityOptions.cloudDiscoveryMetadata) {\r\n            this.logger.verbose(\"The cloud discovery metadata has been provided as a network response, in the config.\");\r\n            try {\r\n                this.logger.verbose(\"Attempting to parse the cloud discovery metadata.\");\r\n                const parsedResponse = JSON.parse(this.authorityOptions.cloudDiscoveryMetadata);\r\n                const metadata = getCloudDiscoveryMetadataFromNetworkResponse(parsedResponse.metadata, this.hostnameAndPort);\r\n                this.logger.verbose(\"Parsed the cloud discovery metadata.\");\r\n                if (metadata) {\r\n                    this.logger.verbose(\"There is returnable metadata attached to the parsed cloud discovery metadata.\");\r\n                    return metadata;\r\n                }\r\n                else {\r\n                    this.logger.verbose(\"There is no metadata attached to the parsed cloud discovery metadata.\");\r\n                }\r\n            }\r\n            catch (e) {\r\n                this.logger.verbose(\"Unable to parse the cloud discovery metadata. Throwing Invalid Cloud Discovery Metadata Error.\");\r\n                throw createClientConfigurationError(invalidCloudDiscoveryMetadata);\r\n            }\r\n        }\r\n        // If cloudDiscoveryMetadata is empty or does not contain the host, check knownAuthorities\r\n        if (this.isInKnownAuthorities()) {\r\n            this.logger.verbose(\"The host is included in knownAuthorities. Creating new cloud discovery metadata from the host.\");\r\n            return Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Called to get metadata from network if CloudDiscoveryMetadata was not populated by config\r\n     *\r\n     * @param hasHardcodedMetadata boolean\r\n     */\r\n    async getCloudDiscoveryMetadataFromNetwork() {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityGetCloudDiscoveryMetadataFromNetwork, this.correlationId);\r\n        const instanceDiscoveryEndpoint = `${Constants.AAD_INSTANCE_DISCOVERY_ENDPT}${this.canonicalAuthority}oauth2/v2.0/authorize`;\r\n        const options = {};\r\n        /*\r\n         * TODO: Add a timeout if the authority exists in our library's\r\n         * hardcoded list of metadata\r\n         */\r\n        let match = null;\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync(instanceDiscoveryEndpoint, options);\r\n            let typedResponseBody;\r\n            let metadata;\r\n            if (isCloudInstanceDiscoveryResponse(response.body)) {\r\n                typedResponseBody =\r\n                    response.body;\r\n                metadata = typedResponseBody.metadata;\r\n                this.logger.verbosePii(`tenant_discovery_endpoint is: ${typedResponseBody.tenant_discovery_endpoint}`);\r\n            }\r\n            else if (isCloudInstanceDiscoveryErrorResponse(response.body)) {\r\n                this.logger.warning(`A CloudInstanceDiscoveryErrorResponse was returned. The cloud instance discovery network request's status code is: ${response.status}`);\r\n                typedResponseBody =\r\n                    response.body;\r\n                if (typedResponseBody.error === Constants.INVALID_INSTANCE) {\r\n                    this.logger.error(\"The CloudInstanceDiscoveryErrorResponse error is invalid_instance.\");\r\n                    return null;\r\n                }\r\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error is ${typedResponseBody.error}`);\r\n                this.logger.warning(`The CloudInstanceDiscoveryErrorResponse error description is ${typedResponseBody.error_description}`);\r\n                this.logger.warning(\"Setting the value of the CloudInstanceDiscoveryMetadata (returned from the network) to []\");\r\n                metadata = [];\r\n            }\r\n            else {\r\n                this.logger.error(\"AAD did not return a CloudInstanceDiscoveryResponse or CloudInstanceDiscoveryErrorResponse\");\r\n                return null;\r\n            }\r\n            this.logger.verbose(\"Attempting to find a match between the developer's authority and the CloudInstanceDiscoveryMetadata returned from the network request.\");\r\n            match = getCloudDiscoveryMetadataFromNetworkResponse(metadata, this.hostnameAndPort);\r\n        }\r\n        catch (error) {\r\n            if (error instanceof AuthError) {\r\n                this.logger.error(`There was a network error while attempting to get the cloud discovery instance metadata.\\nError: ${error.errorCode}\\nError Description: ${error.errorMessage}`);\r\n            }\r\n            else {\r\n                const typedError = error;\r\n                this.logger.error(`A non-MSALJS error was thrown while attempting to get the cloud instance discovery metadata.\\nError: ${typedError.name}\\nError Description: ${typedError.message}`);\r\n            }\r\n            return null;\r\n        }\r\n        // Custom Domain scenario, host is trusted because Instance Discovery call succeeded\r\n        if (!match) {\r\n            this.logger.warning(\"The developer's authority was not found within the CloudInstanceDiscoveryMetadata returned from the network request.\");\r\n            this.logger.verbose(\"Creating custom Authority for custom domain scenario.\");\r\n            match = Authority.createCloudDiscoveryMetadataFromHost(this.hostnameAndPort);\r\n        }\r\n        return match;\r\n    }\r\n    /**\r\n     * Helper function to determine if this host is included in the knownAuthorities config option\r\n     */\r\n    isInKnownAuthorities() {\r\n        const matches = this.authorityOptions.knownAuthorities.filter((authority) => {\r\n            return (authority &&\r\n                UrlString.getDomainFromUrl(authority).toLowerCase() ===\r\n                    this.hostnameAndPort);\r\n        });\r\n        return matches.length > 0;\r\n    }\r\n    /**\r\n     * helper function to populate the authority based on azureCloudOptions\r\n     * @param authorityString\r\n     * @param azureCloudOptions\r\n     */\r\n    static generateAuthority(authorityString, azureCloudOptions) {\r\n        let authorityAzureCloudInstance;\r\n        if (azureCloudOptions &&\r\n            azureCloudOptions.azureCloudInstance !== AzureCloudInstance.None) {\r\n            const tenant = azureCloudOptions.tenant\r\n                ? azureCloudOptions.tenant\r\n                : Constants.DEFAULT_COMMON_TENANT;\r\n            authorityAzureCloudInstance = `${azureCloudOptions.azureCloudInstance}/${tenant}/`;\r\n        }\r\n        return authorityAzureCloudInstance\r\n            ? authorityAzureCloudInstance\r\n            : authorityString;\r\n    }\r\n    /**\r\n     * Creates cloud discovery metadata object from a given host\r\n     * @param host\r\n     */\r\n    static createCloudDiscoveryMetadataFromHost(host) {\r\n        return {\r\n            preferred_network: host,\r\n            preferred_cache: host,\r\n            aliases: [host],\r\n        };\r\n    }\r\n    /**\r\n     * helper function to generate environment from authority object\r\n     */\r\n    getPreferredCache() {\r\n        if (this.managedIdentity) {\r\n            return Constants.DEFAULT_AUTHORITY_HOST;\r\n        }\r\n        else if (this.discoveryComplete()) {\r\n            return this.metadata.preferred_cache;\r\n        }\r\n        else {\r\n            throw createClientAuthError(endpointResolutionError);\r\n        }\r\n    }\r\n    /**\r\n     * Returns whether or not the provided host is an alias of this authority instance\r\n     * @param host\r\n     */\r\n    isAlias(host) {\r\n        return this.metadata.aliases.indexOf(host) > -1;\r\n    }\r\n    /**\r\n     * Returns whether or not the provided host is an alias of a known Microsoft authority for purposes of endpoint discovery\r\n     * @param host\r\n     */\r\n    isAliasOfKnownMicrosoftAuthority(host) {\r\n        return InstanceDiscoveryMetadataAliases.has(host);\r\n    }\r\n    /**\r\n     * Checks whether the provided host is that of a public cloud authority\r\n     *\r\n     * @param authority string\r\n     * @returns bool\r\n     */\r\n    static isPublicCloudAuthority(host) {\r\n        return Constants.KNOWN_PUBLIC_CLOUDS.indexOf(host) >= 0;\r\n    }\r\n    /**\r\n     * Rebuild the authority string with the region\r\n     *\r\n     * @param host string\r\n     * @param region string\r\n     */\r\n    static buildRegionalAuthorityString(host, region, queryString) {\r\n        // Create and validate a Url string object with the initial authority string\r\n        const authorityUrlInstance = new UrlString(host);\r\n        authorityUrlInstance.validateAsUri();\r\n        const authorityUrlParts = authorityUrlInstance.getUrlComponents();\r\n        let hostNameAndPort = `${region}.${authorityUrlParts.HostNameAndPort}`;\r\n        if (this.isPublicCloudAuthority(authorityUrlParts.HostNameAndPort)) {\r\n            hostNameAndPort = `${region}.${Constants.REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX}`;\r\n        }\r\n        // Include the query string portion of the url\r\n        const url = UrlString.constructAuthorityUriFromObject({\r\n            ...authorityUrlInstance.getUrlComponents(),\r\n            HostNameAndPort: hostNameAndPort,\r\n        }).urlString;\r\n        // Add the query string if a query string was provided\r\n        if (queryString)\r\n            return `${url}?${queryString}`;\r\n        return url;\r\n    }\r\n    /**\r\n     * Replace the endpoints in the metadata object with their regional equivalents.\r\n     *\r\n     * @param metadata OpenIdConfigResponse\r\n     * @param azureRegion string\r\n     */\r\n    static replaceWithRegionalInformation(metadata, azureRegion) {\r\n        const regionalMetadata = { ...metadata };\r\n        regionalMetadata.authorization_endpoint =\r\n            Authority.buildRegionalAuthorityString(regionalMetadata.authorization_endpoint, azureRegion);\r\n        regionalMetadata.token_endpoint =\r\n            Authority.buildRegionalAuthorityString(regionalMetadata.token_endpoint, azureRegion);\r\n        if (regionalMetadata.end_session_endpoint) {\r\n            regionalMetadata.end_session_endpoint =\r\n                Authority.buildRegionalAuthorityString(regionalMetadata.end_session_endpoint, azureRegion);\r\n        }\r\n        return regionalMetadata;\r\n    }\r\n    /**\r\n     * Transform CIAM_AUTHORIY as per the below rules:\r\n     * If no path segments found and it is a CIAM authority (hostname ends with .ciamlogin.com), then transform it\r\n     *\r\n     * NOTE: The transformation path should go away once STS supports CIAM with the format: `tenantIdorDomain.ciamlogin.com`\r\n     * `ciamlogin.com` can also change in the future and we should accommodate the same\r\n     *\r\n     * @param authority\r\n     */\r\n    static transformCIAMAuthority(authority) {\r\n        let ciamAuthority = authority;\r\n        const authorityUrl = new UrlString(authority);\r\n        const authorityUrlComponents = authorityUrl.getUrlComponents();\r\n        // check if transformation is needed\r\n        if (authorityUrlComponents.PathSegments.length === 0 &&\r\n            authorityUrlComponents.HostNameAndPort.endsWith(Constants.CIAM_AUTH_URL)) {\r\n            const tenantIdOrDomain = authorityUrlComponents.HostNameAndPort.split(\".\")[0];\r\n            ciamAuthority = `${ciamAuthority}${tenantIdOrDomain}${Constants.AAD_TENANT_DOMAIN_SUFFIX}`;\r\n        }\r\n        return ciamAuthority;\r\n    }\r\n}\r\n// Reserved tenant domain names that will not be replaced with tenant id\r\nAuthority.reservedTenantDomains = new Set([\r\n    \"{tenant}\",\r\n    \"{tenantid}\",\r\n    AADAuthorityConstants.COMMON,\r\n    AADAuthorityConstants.CONSUMERS,\r\n    AADAuthorityConstants.ORGANIZATIONS,\r\n]);\r\n/**\r\n * Extract tenantId from authority\r\n */\r\nfunction getTenantFromAuthorityString(authority) {\r\n    const authorityUrl = new UrlString(authority);\r\n    const authorityUrlComponents = authorityUrl.getUrlComponents();\r\n    /**\r\n     * For credential matching purposes, tenantId is the last path segment of the authority URL:\r\n     *  AAD Authority - domain/tenantId -> Credentials are cached with realm = tenantId\r\n     *  B2C Authority - domain/{tenantId}?/.../policy -> Credentials are cached with realm = policy\r\n     *  tenantId is downcased because B2C policies can have mixed case but tfp claim is downcased\r\n     *\r\n     * Note that we may not have any path segments in certain OIDC scenarios.\r\n     */\r\n    const tenantId = authorityUrlComponents.PathSegments.slice(-1)[0]?.toLowerCase();\r\n    switch (tenantId) {\r\n        case AADAuthorityConstants.COMMON:\r\n        case AADAuthorityConstants.ORGANIZATIONS:\r\n        case AADAuthorityConstants.CONSUMERS:\r\n            return undefined;\r\n        default:\r\n            return tenantId;\r\n    }\r\n}\r\nfunction formatAuthorityUri(authorityUri) {\r\n    return authorityUri.endsWith(Constants.FORWARD_SLASH)\r\n        ? authorityUri\r\n        : `${authorityUri}${Constants.FORWARD_SLASH}`;\r\n}\r\nfunction buildStaticAuthorityOptions(authOptions) {\r\n    const rawCloudDiscoveryMetadata = authOptions.cloudDiscoveryMetadata;\r\n    let cloudDiscoveryMetadata = undefined;\r\n    if (rawCloudDiscoveryMetadata) {\r\n        try {\r\n            cloudDiscoveryMetadata = JSON.parse(rawCloudDiscoveryMetadata);\r\n        }\r\n        catch (e) {\r\n            throw createClientConfigurationError(invalidCloudDiscoveryMetadata);\r\n        }\r\n    }\r\n    return {\r\n        canonicalAuthority: authOptions.authority\r\n            ? formatAuthorityUri(authOptions.authority)\r\n            : undefined,\r\n        knownAuthorities: authOptions.knownAuthorities,\r\n        cloudDiscoveryMetadata: cloudDiscoveryMetadata,\r\n    };\r\n}\n\nexport { Authority, buildStaticAuthorityOptions, formatAuthorityUri, getTenantFromAuthorityString };\n//# sourceMappingURL=Authority.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { Authority, formatAuthorityUri } from './Authority.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { endpointResolutionError } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Create an authority object of the correct type based on the url\r\n * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n *\r\n * Also performs endpoint discovery.\r\n *\r\n * @param authorityUri\r\n * @param networkClient\r\n * @param protocolMode\r\n * @internal\r\n */\r\nasync function createDiscoveredInstance(authorityUri, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient) {\r\n    performanceClient?.addQueueMeasurement(PerformanceEvents.AuthorityFactoryCreateDiscoveredInstance, correlationId);\r\n    const authorityUriFinal = Authority.transformCIAMAuthority(formatAuthorityUri(authorityUri));\r\n    // Initialize authority and perform discovery endpoint check.\r\n    const acquireTokenAuthority = new Authority(authorityUriFinal, networkClient, cacheManager, authorityOptions, logger, correlationId, performanceClient);\r\n    try {\r\n        await invokeAsync(acquireTokenAuthority.resolveEndpointsAsync.bind(acquireTokenAuthority), PerformanceEvents.AuthorityResolveEndpointsAsync, logger, performanceClient, correlationId)();\r\n        return acquireTokenAuthority;\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(endpointResolutionError);\r\n    }\r\n}\n\nexport { createDiscoveredInstance };\n//# sourceMappingURL=AuthorityFactory.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { AuthError } from './AuthError.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Error thrown when there is an error with the server code, for example, unavailability.\r\n */\r\nclass ServerError extends AuthError {\r\n    constructor(errorCode, errorMessage, subError, errorNo, status) {\r\n        super(errorCode, errorMessage, subError);\r\n        this.name = \"ServerError\";\r\n        this.errorNo = errorNo;\r\n        this.status = status;\r\n        Object.setPrototypeOf(this, ServerError.prototype);\r\n    }\r\n}\n\nexport { ServerError };\n//# sourceMappingURL=ServerError.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nfunction getRequestThumbprint(clientId, request, homeAccountId) {\r\n    return {\r\n        clientId: clientId,\r\n        authority: request.authority,\r\n        scopes: request.scopes,\r\n        homeAccountIdentifier: homeAccountId,\r\n        claims: request.claims,\r\n        authenticationScheme: request.authenticationScheme,\r\n        resourceRequestMethod: request.resourceRequestMethod,\r\n        resourceRequestUri: request.resourceRequestUri,\r\n        shrClaims: request.shrClaims,\r\n        sshKid: request.sshKid,\r\n        embeddedClientId: request.embeddedClientId || request.tokenBodyParameters?.clientId,\r\n    };\r\n}\n\nexport { getRequestThumbprint };\n//# sourceMappingURL=RequestThumbprint.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { ThrottlingConstants, Constants, HeaderNames } from '../utils/Constants.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { getRequestThumbprint } from './RequestThumbprint.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/** @internal */\r\nclass ThrottlingUtils {\r\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */\r\n    static generateThrottlingStorageKey(thumbprint) {\r\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\r\n    }\r\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */\r\n    static preProcess(cacheManager, thumbprint, correlationId) {\r\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\r\n        const value = cacheManager.getThrottlingCache(key);\r\n        if (value) {\r\n            if (value.throttleTime < Date.now()) {\r\n                cacheManager.removeItem(key, correlationId);\r\n                return;\r\n            }\r\n            throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\r\n        }\r\n    }\r\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */\r\n    static postProcess(cacheManager, thumbprint, response, correlationId) {\r\n        if (ThrottlingUtils.checkResponseStatus(response) ||\r\n            ThrottlingUtils.checkResponseForRetryAfter(response)) {\r\n            const thumbprintValue = {\r\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\r\n                error: response.body.error,\r\n                errorCodes: response.body.error_codes,\r\n                errorMessage: response.body.error_description,\r\n                subError: response.body.suberror,\r\n            };\r\n            cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue, correlationId);\r\n        }\r\n    }\r\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */\r\n    static checkResponseStatus(response) {\r\n        return (response.status === 429 ||\r\n            (response.status >= 500 && response.status < 600));\r\n    }\r\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */\r\n    static checkResponseForRetryAfter(response) {\r\n        if (response.headers) {\r\n            return (response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) &&\r\n                (response.status < 200 || response.status >= 300));\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */\r\n    static calculateThrottleTime(throttleTime) {\r\n        const time = throttleTime <= 0 ? 0 : throttleTime;\r\n        const currentSeconds = Date.now() / 1000;\r\n        return Math.floor(Math.min(currentSeconds +\r\n            (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds +\r\n            ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\r\n    }\r\n    static removeThrottle(cacheManager, clientId, request, homeAccountIdentifier) {\r\n        const thumbprint = getRequestThumbprint(clientId, request, homeAccountIdentifier);\r\n        const key = this.generateThrottlingStorageKey(thumbprint);\r\n        cacheManager.removeItem(key, request.correlationId);\r\n    }\r\n}\n\nexport { ThrottlingUtils };\n//# sourceMappingURL=ThrottlingUtils.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { AuthError } from './AuthError.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Represents network related errors\r\n */\r\nclass NetworkError extends AuthError {\r\n    constructor(error, httpStatus, responseHeaders) {\r\n        super(error.errorCode, error.errorMessage, error.subError);\r\n        Object.setPrototypeOf(this, NetworkError.prototype);\r\n        this.name = \"NetworkError\";\r\n        this.error = error;\r\n        this.httpStatus = httpStatus;\r\n        this.responseHeaders = responseHeaders;\r\n    }\r\n}\r\n/**\r\n * Creates NetworkError object for a failed network request\r\n * @param error - Error to be thrown back to the caller\r\n * @param httpStatus - Status code of the network request\r\n * @param responseHeaders - Response headers of the network request, when available\r\n * @returns NetworkError object\r\n */\r\nfunction createNetworkError(error, httpStatus, responseHeaders, additionalError) {\r\n    error.errorMessage = `${error.errorMessage}, additionalErrorInfo: error.name:${additionalError?.name}, error.message:${additionalError?.message}`;\r\n    return new NetworkError(error, httpStatus, responseHeaders);\r\n}\n\nexport { NetworkError, createNetworkError };\n//# sourceMappingURL=NetworkError.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { buildClientConfiguration } from '../config/ClientConfiguration.mjs';\nimport { Logger } from '../logger/Logger.mjs';\nimport { Constants, HeaderNames } from '../utils/Constants.mjs';\nimport { name, version } from '../packageMetadata.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { addBrokerParameters, addExtraQueryParameters, addCorrelationId, instrumentBrokerParams } from '../request/RequestParameterBuilder.mjs';\nimport { mapToQueryString } from '../utils/UrlUtils.mjs';\nimport { createDiscoveredInstance } from '../authority/AuthorityFactory.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { ThrottlingUtils } from '../network/ThrottlingUtils.mjs';\nimport { AuthError } from '../error/AuthError.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { NetworkError } from '../error/NetworkError.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { networkError } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Base application class which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.\r\n * @internal\r\n */\r\nclass BaseClient {\r\n    constructor(configuration, performanceClient) {\r\n        // Set the configuration\r\n        this.config = buildClientConfiguration(configuration);\r\n        // Initialize the logger\r\n        this.logger = new Logger(this.config.loggerOptions, name, version);\r\n        // Initialize crypto\r\n        this.cryptoUtils = this.config.cryptoInterface;\r\n        // Initialize storage interface\r\n        this.cacheManager = this.config.storageInterface;\r\n        // Set the network interface\r\n        this.networkClient = this.config.networkInterface;\r\n        // Set TelemetryManager\r\n        this.serverTelemetryManager = this.config.serverTelemetryManager;\r\n        // set Authority\r\n        this.authority = this.config.authOptions.authority;\r\n        // set performance telemetry client\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Creates default headers for requests to token endpoint\r\n     */\r\n    createTokenRequestHeaders(ccsCred) {\r\n        const headers = {};\r\n        headers[HeaderNames.CONTENT_TYPE] = Constants.URL_FORM_CONTENT_TYPE;\r\n        if (!this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        headers[HeaderNames.CCS_HEADER] = `Oid:${clientInfo.uid}@${clientInfo.utid}`;\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\r\n                            e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    headers[HeaderNames.CCS_HEADER] = `UPN: ${ccsCred.credential}`;\r\n                    break;\r\n            }\r\n        }\r\n        return headers;\r\n    }\r\n    /**\r\n     * Http post to token endpoint\r\n     * @param tokenEndpoint\r\n     * @param queryString\r\n     * @param headers\r\n     * @param thumbprint\r\n     */\r\n    async executePostToTokenEndpoint(tokenEndpoint, queryString, headers, thumbprint, correlationId, queuedEvent) {\r\n        if (queuedEvent) {\r\n            this.performanceClient?.addQueueMeasurement(queuedEvent, correlationId);\r\n        }\r\n        const response = await this.sendPostRequest(thumbprint, tokenEndpoint, { body: queryString, headers: headers }, correlationId);\r\n        if (this.config.serverTelemetryManager &&\r\n            response.status < 500 &&\r\n            response.status !== 429) {\r\n            // Telemetry data successfully logged by server, clear Telemetry cache\r\n            this.config.serverTelemetryManager.clearTelemetryCache();\r\n        }\r\n        return response;\r\n    }\r\n    /**\r\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n     * @param thumbprint - Request thumbprint for throttling\r\n     * @param tokenEndpoint - Endpoint to make the POST to\r\n     * @param options - Body and Headers to include on the POST request\r\n     * @param correlationId - CorrelationId for telemetry\r\n     */\r\n    async sendPostRequest(thumbprint, tokenEndpoint, options, correlationId) {\r\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint, correlationId);\r\n        let response;\r\n        try {\r\n            response = await invokeAsync((this.networkClient.sendPostRequestAsync.bind(this.networkClient)), PerformanceEvents.NetworkClientSendPostRequestAsync, this.logger, this.performanceClient, correlationId)(tokenEndpoint, options);\r\n            const responseHeaders = response.headers || {};\r\n            this.performanceClient?.addFields({\r\n                refreshTokenSize: response.body.refresh_token?.length || 0,\r\n                httpVerToken: responseHeaders[HeaderNames.X_MS_HTTP_VERSION] || \"\",\r\n                requestId: responseHeaders[HeaderNames.X_MS_REQUEST_ID] || \"\",\r\n            }, correlationId);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof NetworkError) {\r\n                const responseHeaders = e.responseHeaders;\r\n                if (responseHeaders) {\r\n                    this.performanceClient?.addFields({\r\n                        httpVerToken: responseHeaders[HeaderNames.X_MS_HTTP_VERSION] || \"\",\r\n                        requestId: responseHeaders[HeaderNames.X_MS_REQUEST_ID] ||\r\n                            \"\",\r\n                        contentTypeHeader: responseHeaders[HeaderNames.CONTENT_TYPE] ||\r\n                            undefined,\r\n                        contentLengthHeader: responseHeaders[HeaderNames.CONTENT_LENGTH] ||\r\n                            undefined,\r\n                        httpStatus: e.httpStatus,\r\n                    }, correlationId);\r\n                }\r\n                throw e.error;\r\n            }\r\n            if (e instanceof AuthError) {\r\n                throw e;\r\n            }\r\n            else {\r\n                throw createClientAuthError(networkError);\r\n            }\r\n        }\r\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response, correlationId);\r\n        return response;\r\n    }\r\n    /**\r\n     * Updates the authority object of the client. Endpoint discovery must be completed.\r\n     * @param updatedAuthority\r\n     */\r\n    async updateAuthority(cloudInstanceHostname, correlationId) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.UpdateTokenEndpointAuthority, correlationId);\r\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${this.authority.tenant}/`;\r\n        const cloudInstanceAuthority = await createDiscoveredInstance(cloudInstanceAuthorityUri, this.networkClient, this.cacheManager, this.authority.options, this.logger, correlationId, this.performanceClient);\r\n        this.authority = cloudInstanceAuthority;\r\n    }\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request\r\n     */\r\n    createTokenQueryParameters(request) {\r\n        const parameters = new Map();\r\n        if (request.embeddedClientId) {\r\n            addBrokerParameters(parameters, this.config.authOptions.clientId, this.config.authOptions.redirectUri);\r\n        }\r\n        if (request.tokenQueryParameters) {\r\n            addExtraQueryParameters(parameters, request.tokenQueryParameters);\r\n        }\r\n        addCorrelationId(parameters, request.correlationId);\r\n        instrumentBrokerParams(parameters, request.correlationId, this.performanceClient);\r\n        return mapToQueryString(parameters);\r\n    }\r\n}\n\nexport { BaseClient };\n//# sourceMappingURL=BaseClient.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Gets tenantId from available ID token claims to set as credential realm with the following precedence:\r\n * 1. tid - if the token is acquired from an Azure AD tenant tid will be present\r\n * 2. tfp - if the token is acquired from a modern B2C tenant tfp should be present\r\n * 3. acr - if the token is acquired from a legacy B2C tenant acr should be present\r\n * Downcased to match the realm case-insensitive comparison requirements\r\n * @param idTokenClaims\r\n * @returns\r\n */\r\nfunction getTenantIdFromIdTokenClaims(idTokenClaims) {\r\n    if (idTokenClaims) {\r\n        const tenantId = idTokenClaims.tid || idTokenClaims.tfp || idTokenClaims.acr;\r\n        return tenantId || null;\r\n    }\r\n    return null;\r\n}\n\nexport { getTenantIdFromIdTokenClaims };\n//# sourceMappingURL=TokenClaims.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { CacheAccountType } from '../../utils/Constants.mjs';\nimport { buildClientInfo } from '../../account/ClientInfo.mjs';\nimport { buildTenantProfile } from '../../account/AccountInfo.mjs';\nimport { createClientAuthError } from '../../error/ClientAuthError.mjs';\nimport { AuthorityType } from '../../authority/AuthorityType.mjs';\nimport { getTenantIdFromIdTokenClaims } from '../../account/TokenClaims.mjs';\nimport { ProtocolMode } from '../../authority/ProtocolMode.mjs';\nimport { invalidCacheEnvironment } from '../../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Type that defines required and optional parameters for an Account field (based on universal cache schema implemented by all MSALs).\r\n *\r\n * Key : Value Schema\r\n *\r\n * Key: <home_account_id>-<environment>-<realm*>\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n *      localAccountId: Original tenant-specific accountID, usually used for legacy cases\r\n *      username: primary username that represents the user, usually corresponds to preferred_username in the v2 endpt\r\n *      authorityType: Accounts authority type as a string\r\n *      name: Full name for the account, including given name and family name,\r\n *      lastModificationTime: last time this entity was modified in the cache\r\n *      lastModificationApp:\r\n *      nativeAccountId: Account identifier on the native device\r\n *      tenantProfiles: Array of tenant profile objects for each tenant that the account has authenticated with in the browser\r\n * }\r\n * @internal\r\n */\r\nclass AccountEntity {\r\n    /**\r\n     * Returns the AccountInfo interface for this account.\r\n     */\r\n    getAccountInfo() {\r\n        return {\r\n            homeAccountId: this.homeAccountId,\r\n            environment: this.environment,\r\n            tenantId: this.realm,\r\n            username: this.username,\r\n            localAccountId: this.localAccountId,\r\n            loginHint: this.loginHint,\r\n            name: this.name,\r\n            nativeAccountId: this.nativeAccountId,\r\n            authorityType: this.authorityType,\r\n            // Deserialize tenant profiles array into a Map\r\n            tenantProfiles: new Map((this.tenantProfiles || []).map((tenantProfile) => {\r\n                return [tenantProfile.tenantId, tenantProfile];\r\n            })),\r\n        };\r\n    }\r\n    /**\r\n     * Returns true if the account entity is in single tenant format (outdated), false otherwise\r\n     */\r\n    isSingleTenant() {\r\n        return !this.tenantProfiles;\r\n    }\r\n    /**\r\n     * Build Account cache from IdToken, clientInfo and authority/policy. Associated with AAD.\r\n     * @param accountDetails\r\n     */\r\n    static createAccount(accountDetails, authority, base64Decode) {\r\n        const account = new AccountEntity();\r\n        if (authority.authorityType === AuthorityType.Adfs) {\r\n            account.authorityType = CacheAccountType.ADFS_ACCOUNT_TYPE;\r\n        }\r\n        else if (authority.protocolMode === ProtocolMode.OIDC) {\r\n            account.authorityType = CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        }\r\n        else {\r\n            account.authorityType = CacheAccountType.MSSTS_ACCOUNT_TYPE;\r\n        }\r\n        let clientInfo;\r\n        if (accountDetails.clientInfo && base64Decode) {\r\n            clientInfo = buildClientInfo(accountDetails.clientInfo, base64Decode);\r\n        }\r\n        account.clientInfo = accountDetails.clientInfo;\r\n        account.homeAccountId = accountDetails.homeAccountId;\r\n        account.nativeAccountId = accountDetails.nativeAccountId;\r\n        const env = accountDetails.environment ||\r\n            (authority && authority.getPreferredCache());\r\n        if (!env) {\r\n            throw createClientAuthError(invalidCacheEnvironment);\r\n        }\r\n        account.environment = env;\r\n        // non AAD scenarios can have empty realm\r\n        account.realm =\r\n            clientInfo?.utid ||\r\n                getTenantIdFromIdTokenClaims(accountDetails.idTokenClaims) ||\r\n                \"\";\r\n        // How do you account for MSA CID here?\r\n        account.localAccountId =\r\n            clientInfo?.uid ||\r\n                accountDetails.idTokenClaims?.oid ||\r\n                accountDetails.idTokenClaims?.sub ||\r\n                \"\";\r\n        /*\r\n         * In B2C scenarios the emails claim is used instead of preferred_username and it is an array.\r\n         * In most cases it will contain a single email. This field should not be relied upon if a custom\r\n         * policy is configured to return more than 1 email.\r\n         */\r\n        const preferredUsername = accountDetails.idTokenClaims?.preferred_username ||\r\n            accountDetails.idTokenClaims?.upn;\r\n        const email = accountDetails.idTokenClaims?.emails\r\n            ? accountDetails.idTokenClaims.emails[0]\r\n            : null;\r\n        account.username = preferredUsername || email || \"\";\r\n        account.loginHint = accountDetails.idTokenClaims?.login_hint;\r\n        account.name = accountDetails.idTokenClaims?.name || \"\";\r\n        account.cloudGraphHostName = accountDetails.cloudGraphHostName;\r\n        account.msGraphHost = accountDetails.msGraphHost;\r\n        if (accountDetails.tenantProfiles) {\r\n            account.tenantProfiles = accountDetails.tenantProfiles;\r\n        }\r\n        else {\r\n            const tenantProfile = buildTenantProfile(accountDetails.homeAccountId, account.localAccountId, account.realm, accountDetails.idTokenClaims);\r\n            account.tenantProfiles = [tenantProfile];\r\n        }\r\n        return account;\r\n    }\r\n    /**\r\n     * Creates an AccountEntity object from AccountInfo\r\n     * @param accountInfo\r\n     * @param cloudGraphHostName\r\n     * @param msGraphHost\r\n     * @returns\r\n     */\r\n    static createFromAccountInfo(accountInfo, cloudGraphHostName, msGraphHost) {\r\n        const account = new AccountEntity();\r\n        account.authorityType =\r\n            accountInfo.authorityType || CacheAccountType.GENERIC_ACCOUNT_TYPE;\r\n        account.homeAccountId = accountInfo.homeAccountId;\r\n        account.localAccountId = accountInfo.localAccountId;\r\n        account.nativeAccountId = accountInfo.nativeAccountId;\r\n        account.realm = accountInfo.tenantId;\r\n        account.environment = accountInfo.environment;\r\n        account.username = accountInfo.username;\r\n        account.name = accountInfo.name;\r\n        account.loginHint = accountInfo.loginHint;\r\n        account.cloudGraphHostName = cloudGraphHostName;\r\n        account.msGraphHost = msGraphHost;\r\n        // Serialize tenant profiles map into an array\r\n        account.tenantProfiles = Array.from(accountInfo.tenantProfiles?.values() || []);\r\n        return account;\r\n    }\r\n    /**\r\n     * Generate HomeAccountId from server response\r\n     * @param serverClientInfo\r\n     * @param authType\r\n     */\r\n    static generateHomeAccountId(serverClientInfo, authType, logger, cryptoObj, idTokenClaims) {\r\n        // since ADFS/DSTS do not have tid and does not set client_info\r\n        if (!(authType === AuthorityType.Adfs ||\r\n            authType === AuthorityType.Dsts)) {\r\n            // for cases where there is clientInfo\r\n            if (serverClientInfo) {\r\n                try {\r\n                    const clientInfo = buildClientInfo(serverClientInfo, cryptoObj.base64Decode);\r\n                    if (clientInfo.uid && clientInfo.utid) {\r\n                        return `${clientInfo.uid}.${clientInfo.utid}`;\r\n                    }\r\n                }\r\n                catch (e) { }\r\n            }\r\n            logger.warning(\"No client info in response\");\r\n        }\r\n        // default to \"sub\" claim\r\n        return idTokenClaims?.sub || \"\";\r\n    }\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    static isAccountEntity(entity) {\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n        return (entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"localAccountId\") &&\r\n            entity.hasOwnProperty(\"username\") &&\r\n            entity.hasOwnProperty(\"authorityType\"));\r\n    }\r\n    /**\r\n     * Helper function to determine whether 2 accountInfo objects represent the same account\r\n     * @param accountA\r\n     * @param accountB\r\n     * @param compareClaims - If set to true idTokenClaims will also be compared to determine account equality\r\n     */\r\n    static accountInfoIsEqual(accountA, accountB, compareClaims) {\r\n        if (!accountA || !accountB) {\r\n            return false;\r\n        }\r\n        let claimsMatch = true; // default to true so as to not fail comparison below if compareClaims: false\r\n        if (compareClaims) {\r\n            const accountAClaims = (accountA.idTokenClaims ||\r\n                {});\r\n            const accountBClaims = (accountB.idTokenClaims ||\r\n                {});\r\n            // issued at timestamp and nonce are expected to change each time a new id token is acquired\r\n            claimsMatch =\r\n                accountAClaims.iat === accountBClaims.iat &&\r\n                    accountAClaims.nonce === accountBClaims.nonce;\r\n        }\r\n        return (accountA.homeAccountId === accountB.homeAccountId &&\r\n            accountA.localAccountId === accountB.localAccountId &&\r\n            accountA.username === accountB.username &&\r\n            accountA.tenantId === accountB.tenantId &&\r\n            accountA.loginHint === accountB.loginHint &&\r\n            accountA.environment === accountB.environment &&\r\n            accountA.nativeAccountId === accountB.nativeAccountId &&\r\n            claimsMatch);\r\n    }\r\n}\n\nexport { AccountEntity };\n//# sourceMappingURL=AccountEntity.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n// Codes defined by MSAL\r\nconst noTokensFound = \"no_tokens_found\";\r\nconst nativeAccountUnavailable = \"native_account_unavailable\";\r\nconst refreshTokenExpired = \"refresh_token_expired\";\r\nconst uxNotAllowed = \"ux_not_allowed\";\r\n// Codes potentially returned by server\r\nconst interactionRequired = \"interaction_required\";\r\nconst consentRequired = \"consent_required\";\r\nconst loginRequired = \"login_required\";\r\nconst badToken = \"bad_token\";\n\nexport { badToken, consentRequired, interactionRequired, loginRequired, nativeAccountUnavailable, noTokensFound, refreshTokenExpired, uxNotAllowed };\n//# sourceMappingURL=InteractionRequiredAuthErrorCodes.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { Constants } from '../utils/Constants.mjs';\nimport { AuthError } from './AuthError.mjs';\nimport { badToken, nativeAccountUnavailable, noTokensFound, uxNotAllowed, refreshTokenExpired, interactionRequired, consentRequired, loginRequired } from './InteractionRequiredAuthErrorCodes.mjs';\nimport * as InteractionRequiredAuthErrorCodes from './InteractionRequiredAuthErrorCodes.mjs';\nexport { InteractionRequiredAuthErrorCodes };\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * InteractionRequiredServerErrorMessage contains string constants used by error codes and messages returned by the server indicating interaction is required\r\n */\r\nconst InteractionRequiredServerErrorMessage = [\r\n    interactionRequired,\r\n    consentRequired,\r\n    loginRequired,\r\n    badToken,\r\n    uxNotAllowed,\r\n];\r\nconst InteractionRequiredAuthSubErrorMessage = [\r\n    \"message_only\",\r\n    \"additional_action\",\r\n    \"basic_action\",\r\n    \"user_password_expired\",\r\n    \"consent_required\",\r\n    \"bad_token\",\r\n];\r\nconst InteractionRequiredAuthErrorMessages = {\r\n    [noTokensFound]: \"No refresh token found in the cache. Please sign-in.\",\r\n    [nativeAccountUnavailable]: \"The requested account is not available in the native broker. It may have been deleted or logged out. Please sign-in again using an interactive API.\",\r\n    [refreshTokenExpired]: \"Refresh token has expired.\",\r\n    [badToken]: \"Identity provider returned bad_token due to an expired or invalid refresh token. Please invoke an interactive API to resolve.\",\r\n    [uxNotAllowed]: \"`canShowUI` flag in Edge was set to false. User interaction required on web page. Please invoke an interactive API to resolve.\",\r\n};\r\n/**\r\n * Interaction required errors defined by the SDK\r\n * @deprecated Use InteractionRequiredAuthErrorCodes instead\r\n */\r\nconst InteractionRequiredAuthErrorMessage = {\r\n    noTokensFoundError: {\r\n        code: noTokensFound,\r\n        desc: InteractionRequiredAuthErrorMessages[noTokensFound],\r\n    },\r\n    native_account_unavailable: {\r\n        code: nativeAccountUnavailable,\r\n        desc: InteractionRequiredAuthErrorMessages[nativeAccountUnavailable],\r\n    },\r\n    bad_token: {\r\n        code: badToken,\r\n        desc: InteractionRequiredAuthErrorMessages[badToken],\r\n    },\r\n};\r\n/**\r\n * Error thrown when user interaction is required.\r\n */\r\nclass InteractionRequiredAuthError extends AuthError {\r\n    constructor(errorCode, errorMessage, subError, timestamp, traceId, correlationId, claims, errorNo) {\r\n        super(errorCode, errorMessage, subError);\r\n        Object.setPrototypeOf(this, InteractionRequiredAuthError.prototype);\r\n        this.timestamp = timestamp || Constants.EMPTY_STRING;\r\n        this.traceId = traceId || Constants.EMPTY_STRING;\r\n        this.correlationId = correlationId || Constants.EMPTY_STRING;\r\n        this.claims = claims || Constants.EMPTY_STRING;\r\n        this.name = \"InteractionRequiredAuthError\";\r\n        this.errorNo = errorNo;\r\n    }\r\n}\r\n/**\r\n * Helper function used to determine if an error thrown by the server requires interaction to resolve\r\n * @param errorCode\r\n * @param errorString\r\n * @param subError\r\n */\r\nfunction isInteractionRequiredError(errorCode, errorString, subError) {\r\n    const isInteractionRequiredErrorCode = !!errorCode &&\r\n        InteractionRequiredServerErrorMessage.indexOf(errorCode) > -1;\r\n    const isInteractionRequiredSubError = !!subError &&\r\n        InteractionRequiredAuthSubErrorMessage.indexOf(subError) > -1;\r\n    const isInteractionRequiredErrorDesc = !!errorString &&\r\n        InteractionRequiredServerErrorMessage.some((irErrorCode) => {\r\n            return errorString.indexOf(irErrorCode) > -1;\r\n        });\r\n    return (isInteractionRequiredErrorCode ||\r\n        isInteractionRequiredErrorDesc ||\r\n        isInteractionRequiredSubError);\r\n}\r\n/**\r\n * Creates an InteractionRequiredAuthError\r\n */\r\nfunction createInteractionRequiredAuthError(errorCode) {\r\n    return new InteractionRequiredAuthError(errorCode, InteractionRequiredAuthErrorMessages[errorCode]);\r\n}\n\nexport { InteractionRequiredAuthError, InteractionRequiredAuthErrorMessage, InteractionRequiredAuthSubErrorMessage, InteractionRequiredServerErrorMessage, createInteractionRequiredAuthError, isInteractionRequiredError };\n//# sourceMappingURL=InteractionRequiredAuthError.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { Constants } from './Constants.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { noCryptoObject, invalidState } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Class which provides helpers for OAuth 2.0 protocol specific values\r\n */\r\nclass ProtocolUtils {\r\n    /**\r\n     * Appends user state with random guid, or returns random guid.\r\n     * @param userState\r\n     * @param randomGuid\r\n     */\r\n    static setRequestState(cryptoObj, userState, meta) {\r\n        const libraryState = ProtocolUtils.generateLibraryState(cryptoObj, meta);\r\n        return userState\r\n            ? `${libraryState}${Constants.RESOURCE_DELIM}${userState}`\r\n            : libraryState;\r\n    }\r\n    /**\r\n     * Generates the state value used by the common library.\r\n     * @param randomGuid\r\n     * @param cryptoObj\r\n     */\r\n    static generateLibraryState(cryptoObj, meta) {\r\n        if (!cryptoObj) {\r\n            throw createClientAuthError(noCryptoObject);\r\n        }\r\n        // Create a state object containing a unique id and the timestamp of the request creation\r\n        const stateObj = {\r\n            id: cryptoObj.createNewGuid(),\r\n        };\r\n        if (meta) {\r\n            stateObj.meta = meta;\r\n        }\r\n        const stateString = JSON.stringify(stateObj);\r\n        return cryptoObj.base64Encode(stateString);\r\n    }\r\n    /**\r\n     * Parses the state into the RequestStateObject, which contains the LibraryState info and the state passed by the user.\r\n     * @param state\r\n     * @param cryptoObj\r\n     */\r\n    static parseRequestState(cryptoObj, state) {\r\n        if (!cryptoObj) {\r\n            throw createClientAuthError(noCryptoObject);\r\n        }\r\n        if (!state) {\r\n            throw createClientAuthError(invalidState);\r\n        }\r\n        try {\r\n            // Split the state between library state and user passed state and decode them separately\r\n            const splitState = state.split(Constants.RESOURCE_DELIM);\r\n            const libraryState = splitState[0];\r\n            const userState = splitState.length > 1\r\n                ? splitState.slice(1).join(Constants.RESOURCE_DELIM)\r\n                : Constants.EMPTY_STRING;\r\n            const libraryStateString = cryptoObj.base64Decode(libraryState);\r\n            const libraryStateObj = JSON.parse(libraryStateString);\r\n            return {\r\n                userRequestState: userState || Constants.EMPTY_STRING,\r\n                libraryState: libraryStateObj,\r\n            };\r\n        }\r\n        catch (e) {\r\n            throw createClientAuthError(invalidState);\r\n        }\r\n    }\r\n}\n\nexport { ProtocolUtils };\n//# sourceMappingURL=ProtocolUtils.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { nowSeconds } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst KeyLocation = {\r\n    SW: \"sw\"};\r\n/** @internal */\r\nclass PopTokenGenerator {\r\n    constructor(cryptoUtils, performanceClient) {\r\n        this.cryptoUtils = cryptoUtils;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Generates the req_cnf validated at the RP in the POP protocol for SHR parameters\r\n     * and returns an object containing the keyid, the full req_cnf string and the req_cnf string hash\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async generateCnf(request, logger) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateCnf, request.correlationId);\r\n        const reqCnf = await invokeAsync(this.generateKid.bind(this), PerformanceEvents.PopTokenGenerateCnf, logger, this.performanceClient, request.correlationId)(request);\r\n        const reqCnfString = this.cryptoUtils.base64UrlEncode(JSON.stringify(reqCnf));\r\n        return {\r\n            kid: reqCnf.kid,\r\n            reqCnfString,\r\n        };\r\n    }\r\n    /**\r\n     * Generates key_id for a SHR token request\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async generateKid(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.PopTokenGenerateKid, request.correlationId);\r\n        const kidThumbprint = await this.cryptoUtils.getPublicKeyThumbprint(request);\r\n        return {\r\n            kid: kidThumbprint,\r\n            xms_ksl: KeyLocation.SW,\r\n        };\r\n    }\r\n    /**\r\n     * Signs the POP access_token with the local generated key-pair\r\n     * @param accessToken\r\n     * @param request\r\n     * @returns\r\n     */\r\n    async signPopToken(accessToken, keyId, request) {\r\n        return this.signPayload(accessToken, keyId, request);\r\n    }\r\n    /**\r\n     * Utility function to generate the signed JWT for an access_token\r\n     * @param payload\r\n     * @param kid\r\n     * @param request\r\n     * @param claims\r\n     * @returns\r\n     */\r\n    async signPayload(payload, keyId, request, claims) {\r\n        // Deconstruct request to extract SHR parameters\r\n        const { resourceRequestMethod, resourceRequestUri, shrClaims, shrNonce, shrOptions, } = request;\r\n        const resourceUrlString = resourceRequestUri\r\n            ? new UrlString(resourceRequestUri)\r\n            : undefined;\r\n        const resourceUrlComponents = resourceUrlString?.getUrlComponents();\r\n        return this.cryptoUtils.signJwt({\r\n            at: payload,\r\n            ts: nowSeconds(),\r\n            m: resourceRequestMethod?.toUpperCase(),\r\n            u: resourceUrlComponents?.HostNameAndPort,\r\n            nonce: shrNonce || this.cryptoUtils.createNewGuid(),\r\n            p: resourceUrlComponents?.AbsolutePath,\r\n            q: resourceUrlComponents?.QueryString\r\n                ? [[], resourceUrlComponents.QueryString]\r\n                : undefined,\r\n            client_claims: shrClaims || undefined,\r\n            ...claims,\r\n        }, keyId, shrOptions, request.correlationId);\r\n    }\r\n}\n\nexport { PopTokenGenerator };\n//# sourceMappingURL=PopTokenGenerator.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * This class instance helps track the memory changes facilitating\r\n * decisions to read from and write to the persistent cache\r\n */ class TokenCacheContext {\r\n    constructor(tokenCache, hasChanged) {\r\n        this.cache = tokenCache;\r\n        this.hasChanged = hasChanged;\r\n    }\r\n    /**\r\n     * boolean which indicates the changes in cache\r\n     */\r\n    get cacheHasChanged() {\r\n        return this.hasChanged;\r\n    }\r\n    /**\r\n     * function to retrieve the token cache\r\n     */\r\n    get tokenCache() {\r\n        return this.cache;\r\n    }\r\n}\n\nexport { TokenCacheContext };\n//# sourceMappingURL=TokenCacheContext.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { ScopeSet } from '../request/ScopeSet.mjs';\nimport { AccountEntity } from '../cache/entities/AccountEntity.mjs';\nimport { isInteractionRequiredError, InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.mjs';\nimport { ProtocolUtils } from '../utils/ProtocolUtils.mjs';\nimport { Constants, HttpStatus, AuthenticationScheme, THE_FAMILY_ID } from '../utils/Constants.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { TokenCacheContext } from '../cache/persistence/TokenCacheContext.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { extractTokenClaims, checkMaxAge } from '../account/AuthToken.mjs';\nimport { getTenantIdFromIdTokenClaims } from '../account/TokenClaims.mjs';\nimport { updateAccountTenantProfileData, buildTenantProfile } from '../account/AccountInfo.mjs';\nimport { createIdTokenEntity, createAccessTokenEntity, createRefreshTokenEntity } from '../cache/utils/CacheHelpers.mjs';\nimport { toDateFromSeconds } from '../utils/TimeUtils.mjs';\nimport { nonceMismatch, authTimeNotFound, invalidCacheEnvironment, keyIdMissing } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Class that handles response parsing.\r\n * @internal\r\n */\r\nclass ResponseHandler {\r\n    constructor(clientId, cacheStorage, cryptoObj, logger, serializableCache, persistencePlugin, performanceClient) {\r\n        this.clientId = clientId;\r\n        this.cacheStorage = cacheStorage;\r\n        this.cryptoObj = cryptoObj;\r\n        this.logger = logger;\r\n        this.serializableCache = serializableCache;\r\n        this.persistencePlugin = persistencePlugin;\r\n        this.performanceClient = performanceClient;\r\n    }\r\n    /**\r\n     * Function which validates server authorization token response.\r\n     * @param serverResponse\r\n     * @param refreshAccessToken\r\n     */\r\n    validateTokenResponse(serverResponse, refreshAccessToken) {\r\n        // Check for error\r\n        if (serverResponse.error ||\r\n            serverResponse.error_description ||\r\n            serverResponse.suberror) {\r\n            const errString = `Error(s): ${serverResponse.error_codes || Constants.NOT_AVAILABLE} - Timestamp: ${serverResponse.timestamp || Constants.NOT_AVAILABLE} - Description: ${serverResponse.error_description || Constants.NOT_AVAILABLE} - Correlation ID: ${serverResponse.correlation_id || Constants.NOT_AVAILABLE} - Trace ID: ${serverResponse.trace_id || Constants.NOT_AVAILABLE}`;\r\n            const serverErrorNo = serverResponse.error_codes?.length\r\n                ? serverResponse.error_codes[0]\r\n                : undefined;\r\n            const serverError = new ServerError(serverResponse.error, errString, serverResponse.suberror, serverErrorNo, serverResponse.status);\r\n            // check if 500 error\r\n            if (refreshAccessToken &&\r\n                serverResponse.status &&\r\n                serverResponse.status >= HttpStatus.SERVER_ERROR_RANGE_START &&\r\n                serverResponse.status <= HttpStatus.SERVER_ERROR_RANGE_END) {\r\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently unavailable and the access token is unable to be refreshed.\\n${serverError}`);\r\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\r\n                return;\r\n                // check if 400 error\r\n            }\r\n            else if (refreshAccessToken &&\r\n                serverResponse.status &&\r\n                serverResponse.status >= HttpStatus.CLIENT_ERROR_RANGE_START &&\r\n                serverResponse.status <= HttpStatus.CLIENT_ERROR_RANGE_END) {\r\n                this.logger.warning(`executeTokenRequest:validateTokenResponse - AAD is currently available but is unable to refresh the access token.\\n${serverError}`);\r\n                // don't throw an exception, but alert the user via a log that the token was unable to be refreshed\r\n                return;\r\n            }\r\n            if (isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\r\n                throw new InteractionRequiredAuthError(serverResponse.error, serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || Constants.EMPTY_STRING, serverResponse.trace_id || Constants.EMPTY_STRING, serverResponse.correlation_id || Constants.EMPTY_STRING, serverResponse.claims || Constants.EMPTY_STRING, serverErrorNo);\r\n            }\r\n            throw serverError;\r\n        }\r\n    }\r\n    /**\r\n     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.\r\n     * @param serverTokenResponse\r\n     * @param authority\r\n     */\r\n    async handleServerTokenResponse(serverTokenResponse, authority, reqTimestamp, request, authCodePayload, userAssertionHash, handlingRefreshTokenResponse, forceCacheRefreshTokenResponse, serverRequestId) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.HandleServerTokenResponse, serverTokenResponse.correlation_id);\r\n        // create an idToken object (not entity)\r\n        let idTokenClaims;\r\n        if (serverTokenResponse.id_token) {\r\n            idTokenClaims = extractTokenClaims(serverTokenResponse.id_token || Constants.EMPTY_STRING, this.cryptoObj.base64Decode);\r\n            // token nonce check (TODO: Add a warning if no nonce is given?)\r\n            if (authCodePayload && authCodePayload.nonce) {\r\n                if (idTokenClaims.nonce !== authCodePayload.nonce) {\r\n                    throw createClientAuthError(nonceMismatch);\r\n                }\r\n            }\r\n            // token max_age check\r\n            if (request.maxAge || request.maxAge === 0) {\r\n                const authTime = idTokenClaims.auth_time;\r\n                if (!authTime) {\r\n                    throw createClientAuthError(authTimeNotFound);\r\n                }\r\n                checkMaxAge(authTime, request.maxAge);\r\n            }\r\n        }\r\n        // generate homeAccountId\r\n        this.homeAccountIdentifier = AccountEntity.generateHomeAccountId(serverTokenResponse.client_info || Constants.EMPTY_STRING, authority.authorityType, this.logger, this.cryptoObj, idTokenClaims);\r\n        // save the response tokens\r\n        let requestStateObj;\r\n        if (!!authCodePayload && !!authCodePayload.state) {\r\n            requestStateObj = ProtocolUtils.parseRequestState(this.cryptoObj, authCodePayload.state);\r\n        }\r\n        // Add keyId from request to serverTokenResponse if defined\r\n        serverTokenResponse.key_id =\r\n            serverTokenResponse.key_id || request.sshKid || undefined;\r\n        const cacheRecord = this.generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload);\r\n        let cacheContext;\r\n        try {\r\n            if (this.persistencePlugin && this.serializableCache) {\r\n                this.logger.verbose(\"Persistence enabled, calling beforeCacheAccess\");\r\n                cacheContext = new TokenCacheContext(this.serializableCache, true);\r\n                await this.persistencePlugin.beforeCacheAccess(cacheContext);\r\n            }\r\n            /*\r\n             * When saving a refreshed tokens to the cache, it is expected that the account that was used is present in the cache.\r\n             * If not present, we should return null, as it's the case that another application called removeAccount in between\r\n             * the calls to getAllAccounts and acquireTokenSilent. We should not overwrite that removal, unless explicitly flagged by\r\n             * the developer, as in the case of refresh token flow used in ADAL Node to MSAL Node migration.\r\n             */\r\n            if (handlingRefreshTokenResponse &&\r\n                !forceCacheRefreshTokenResponse &&\r\n                cacheRecord.account) {\r\n                const key = this.cacheStorage.generateAccountKey(cacheRecord.account.getAccountInfo());\r\n                const account = this.cacheStorage.getAccount(key, request.correlationId);\r\n                if (!account) {\r\n                    this.logger.warning(\"Account used to refresh tokens not in persistence, refreshed tokens will not be stored in the cache\");\r\n                    return await ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, undefined, serverRequestId);\r\n                }\r\n            }\r\n            await this.cacheStorage.saveCacheRecord(cacheRecord, request.correlationId, request.storeInCache);\r\n        }\r\n        finally {\r\n            if (this.persistencePlugin &&\r\n                this.serializableCache &&\r\n                cacheContext) {\r\n                this.logger.verbose(\"Persistence enabled, calling afterCacheAccess\");\r\n                await this.persistencePlugin.afterCacheAccess(cacheContext);\r\n            }\r\n        }\r\n        return ResponseHandler.generateAuthenticationResult(this.cryptoObj, authority, cacheRecord, false, request, idTokenClaims, requestStateObj, serverTokenResponse, serverRequestId);\r\n    }\r\n    /**\r\n     * Generates CacheRecord\r\n     * @param serverTokenResponse\r\n     * @param idTokenObj\r\n     * @param authority\r\n     */\r\n    generateCacheRecord(serverTokenResponse, authority, reqTimestamp, request, idTokenClaims, userAssertionHash, authCodePayload) {\r\n        const env = authority.getPreferredCache();\r\n        if (!env) {\r\n            throw createClientAuthError(invalidCacheEnvironment);\r\n        }\r\n        const claimsTenantId = getTenantIdFromIdTokenClaims(idTokenClaims);\r\n        // IdToken: non AAD scenarios can have empty realm\r\n        let cachedIdToken;\r\n        let cachedAccount;\r\n        if (serverTokenResponse.id_token && !!idTokenClaims) {\r\n            cachedIdToken = createIdTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.id_token, this.clientId, claimsTenantId || \"\");\r\n            cachedAccount = buildAccountToCache(this.cacheStorage, authority, this.homeAccountIdentifier, this.cryptoObj.base64Decode, request.correlationId, idTokenClaims, serverTokenResponse.client_info, env, claimsTenantId, authCodePayload, undefined, // nativeAccountId\r\n            this.logger);\r\n        }\r\n        // AccessToken\r\n        let cachedAccessToken = null;\r\n        if (serverTokenResponse.access_token) {\r\n            // If scopes not returned in server response, use request scopes\r\n            const responseScopes = serverTokenResponse.scope\r\n                ? ScopeSet.fromString(serverTokenResponse.scope)\r\n                : new ScopeSet(request.scopes || []);\r\n            /*\r\n             * Use timestamp calculated before request\r\n             * Server may return timestamps as strings, parse to numbers if so.\r\n             */\r\n            const expiresIn = (typeof serverTokenResponse.expires_in === \"string\"\r\n                ? parseInt(serverTokenResponse.expires_in, 10)\r\n                : serverTokenResponse.expires_in) || 0;\r\n            const extExpiresIn = (typeof serverTokenResponse.ext_expires_in === \"string\"\r\n                ? parseInt(serverTokenResponse.ext_expires_in, 10)\r\n                : serverTokenResponse.ext_expires_in) || 0;\r\n            const refreshIn = (typeof serverTokenResponse.refresh_in === \"string\"\r\n                ? parseInt(serverTokenResponse.refresh_in, 10)\r\n                : serverTokenResponse.refresh_in) || undefined;\r\n            const tokenExpirationSeconds = reqTimestamp + expiresIn;\r\n            const extendedTokenExpirationSeconds = tokenExpirationSeconds + extExpiresIn;\r\n            const refreshOnSeconds = refreshIn && refreshIn > 0\r\n                ? reqTimestamp + refreshIn\r\n                : undefined;\r\n            // non AAD scenarios can have empty realm\r\n            cachedAccessToken = createAccessTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.access_token, this.clientId, claimsTenantId || authority.tenant || \"\", responseScopes.printScopes(), tokenExpirationSeconds, extendedTokenExpirationSeconds, this.cryptoObj.base64Decode, refreshOnSeconds, serverTokenResponse.token_type, userAssertionHash, serverTokenResponse.key_id, request.claims, request.requestedClaimsHash);\r\n        }\r\n        // refreshToken\r\n        let cachedRefreshToken = null;\r\n        if (serverTokenResponse.refresh_token) {\r\n            let rtExpiresOn;\r\n            if (serverTokenResponse.refresh_token_expires_in) {\r\n                const rtExpiresIn = typeof serverTokenResponse.refresh_token_expires_in ===\r\n                    \"string\"\r\n                    ? parseInt(serverTokenResponse.refresh_token_expires_in, 10)\r\n                    : serverTokenResponse.refresh_token_expires_in;\r\n                rtExpiresOn = reqTimestamp + rtExpiresIn;\r\n            }\r\n            cachedRefreshToken = createRefreshTokenEntity(this.homeAccountIdentifier, env, serverTokenResponse.refresh_token, this.clientId, serverTokenResponse.foci, userAssertionHash, rtExpiresOn);\r\n        }\r\n        // appMetadata\r\n        let cachedAppMetadata = null;\r\n        if (serverTokenResponse.foci) {\r\n            cachedAppMetadata = {\r\n                clientId: this.clientId,\r\n                environment: env,\r\n                familyId: serverTokenResponse.foci,\r\n            };\r\n        }\r\n        return {\r\n            account: cachedAccount,\r\n            idToken: cachedIdToken,\r\n            accessToken: cachedAccessToken,\r\n            refreshToken: cachedRefreshToken,\r\n            appMetadata: cachedAppMetadata,\r\n        };\r\n    }\r\n    /**\r\n     * Creates an @AuthenticationResult from @CacheRecord , @IdToken , and a boolean that states whether or not the result is from cache.\r\n     *\r\n     * Optionally takes a state string that is set as-is in the response.\r\n     *\r\n     * @param cacheRecord\r\n     * @param idTokenObj\r\n     * @param fromTokenCache\r\n     * @param stateString\r\n     */\r\n    static async generateAuthenticationResult(cryptoObj, authority, cacheRecord, fromTokenCache, request, idTokenClaims, requestState, serverTokenResponse, requestId) {\r\n        let accessToken = Constants.EMPTY_STRING;\r\n        let responseScopes = [];\r\n        let expiresOn = null;\r\n        let extExpiresOn;\r\n        let refreshOn;\r\n        let familyId = Constants.EMPTY_STRING;\r\n        if (cacheRecord.accessToken) {\r\n            /*\r\n             * if the request object has `popKid` property, `signPopToken` will be set to false and\r\n             * the token will be returned unsigned\r\n             */\r\n            if (cacheRecord.accessToken.tokenType ===\r\n                AuthenticationScheme.POP &&\r\n                !request.popKid) {\r\n                const popTokenGenerator = new PopTokenGenerator(cryptoObj);\r\n                const { secret, keyId } = cacheRecord.accessToken;\r\n                if (!keyId) {\r\n                    throw createClientAuthError(keyIdMissing);\r\n                }\r\n                accessToken = await popTokenGenerator.signPopToken(secret, keyId, request);\r\n            }\r\n            else {\r\n                accessToken = cacheRecord.accessToken.secret;\r\n            }\r\n            responseScopes = ScopeSet.fromString(cacheRecord.accessToken.target).asArray();\r\n            // Access token expiresOn cached in seconds, converting to Date for AuthenticationResult\r\n            expiresOn = toDateFromSeconds(cacheRecord.accessToken.expiresOn);\r\n            extExpiresOn = toDateFromSeconds(cacheRecord.accessToken.extendedExpiresOn);\r\n            if (cacheRecord.accessToken.refreshOn) {\r\n                refreshOn = toDateFromSeconds(cacheRecord.accessToken.refreshOn);\r\n            }\r\n        }\r\n        if (cacheRecord.appMetadata) {\r\n            familyId =\r\n                cacheRecord.appMetadata.familyId === THE_FAMILY_ID\r\n                    ? THE_FAMILY_ID\r\n                    : \"\";\r\n        }\r\n        const uid = idTokenClaims?.oid || idTokenClaims?.sub || \"\";\r\n        const tid = idTokenClaims?.tid || \"\";\r\n        // for hybrid + native bridge enablement, send back the native account Id\r\n        if (serverTokenResponse?.spa_accountid && !!cacheRecord.account) {\r\n            cacheRecord.account.nativeAccountId =\r\n                serverTokenResponse?.spa_accountid;\r\n        }\r\n        const accountInfo = cacheRecord.account\r\n            ? updateAccountTenantProfileData(cacheRecord.account.getAccountInfo(), undefined, // tenantProfile optional\r\n            idTokenClaims, cacheRecord.idToken?.secret)\r\n            : null;\r\n        return {\r\n            authority: authority.canonicalAuthority,\r\n            uniqueId: uid,\r\n            tenantId: tid,\r\n            scopes: responseScopes,\r\n            account: accountInfo,\r\n            idToken: cacheRecord?.idToken?.secret || \"\",\r\n            idTokenClaims: idTokenClaims || {},\r\n            accessToken: accessToken,\r\n            fromCache: fromTokenCache,\r\n            expiresOn: expiresOn,\r\n            extExpiresOn: extExpiresOn,\r\n            refreshOn: refreshOn,\r\n            correlationId: request.correlationId,\r\n            requestId: requestId || Constants.EMPTY_STRING,\r\n            familyId: familyId,\r\n            tokenType: cacheRecord.accessToken?.tokenType || Constants.EMPTY_STRING,\r\n            state: requestState\r\n                ? requestState.userRequestState\r\n                : Constants.EMPTY_STRING,\r\n            cloudGraphHostName: cacheRecord.account?.cloudGraphHostName ||\r\n                Constants.EMPTY_STRING,\r\n            msGraphHost: cacheRecord.account?.msGraphHost || Constants.EMPTY_STRING,\r\n            code: serverTokenResponse?.spa_code,\r\n            fromNativeBroker: false,\r\n        };\r\n    }\r\n}\r\nfunction buildAccountToCache(cacheStorage, authority, homeAccountId, base64Decode, correlationId, idTokenClaims, clientInfo, environment, claimsTenantId, authCodePayload, nativeAccountId, logger) {\r\n    logger?.verbose(\"setCachedAccount called\");\r\n    // Check if base account is already cached\r\n    const accountKeys = cacheStorage.getAccountKeys();\r\n    const baseAccountKey = accountKeys.find((accountKey) => {\r\n        return accountKey.startsWith(homeAccountId);\r\n    });\r\n    let cachedAccount = null;\r\n    if (baseAccountKey) {\r\n        cachedAccount = cacheStorage.getAccount(baseAccountKey, correlationId);\r\n    }\r\n    const baseAccount = cachedAccount ||\r\n        AccountEntity.createAccount({\r\n            homeAccountId,\r\n            idTokenClaims,\r\n            clientInfo,\r\n            environment,\r\n            cloudGraphHostName: authCodePayload?.cloud_graph_host_name,\r\n            msGraphHost: authCodePayload?.msgraph_host,\r\n            nativeAccountId: nativeAccountId,\r\n        }, authority, base64Decode);\r\n    const tenantProfiles = baseAccount.tenantProfiles || [];\r\n    const tenantId = claimsTenantId || baseAccount.realm;\r\n    if (tenantId &&\r\n        !tenantProfiles.find((tenantProfile) => {\r\n            return tenantProfile.tenantId === tenantId;\r\n        })) {\r\n        const newTenantProfile = buildTenantProfile(homeAccountId, baseAccount.localAccountId, tenantId, idTokenClaims);\r\n        tenantProfiles.push(newTenantProfile);\r\n    }\r\n    baseAccount.tenantProfiles = tenantProfiles;\r\n    return baseAccount;\r\n}\n\nexport { ResponseHandler, buildAccountToCache };\n//# sourceMappingURL=ResponseHandler.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nasync function getClientAssertion(clientAssertion, clientId, tokenEndpoint) {\r\n    if (typeof clientAssertion === \"string\") {\r\n        return clientAssertion;\r\n    }\r\n    else {\r\n        const config = {\r\n            clientId: clientId,\r\n            tokenEndpoint: tokenEndpoint,\r\n        };\r\n        return clientAssertion(config);\r\n    }\r\n}\n\nexport { getClientAssertion };\n//# sourceMappingURL=ClientAssertionUtils.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { BaseClient } from './BaseClient.mjs';\nimport { addClientId, addRedirectUri, addScopes, addAuthorizationCode, addLibraryInfo, addApplicationTelemetry, addThrottling, addServerTelemetry, addCodeVerifier, addClientSecret, addClientAssertion, addClientAssertionType, addGrantType, addClientInfo, addPopToken, addSshJwk, addClaims, addCcsUpn, addCcsOid, addBrokerParameters, addExtraQueryParameters, instrumentBrokerParams, addPostLogoutRedirectUri, addCorrelationId, addIdTokenHint, addState, addLogoutHint, addInstanceAware } from '../request/RequestParameterBuilder.mjs';\nimport { mapToQueryString } from '../utils/UrlUtils.mjs';\nimport { Separators, AuthenticationScheme, HeaderNames, GrantType } from '../utils/Constants.mjs';\nimport { RETURN_SPA_CODE, CLIENT_ID } from '../constants/AADServerParamKeys.mjs';\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { nowSeconds } from '../utils/TimeUtils.mjs';\nimport { buildClientInfo, buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { getClientAssertion } from '../utils/ClientAssertionUtils.mjs';\nimport { getRequestThumbprint } from '../network/RequestThumbprint.mjs';\nimport { requestCannotBeMade } from '../error/ClientAuthErrorCodes.mjs';\nimport { logoutRequestEmpty, redirectUriEmpty, missingSshJwk } from '../error/ClientConfigurationErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Oauth2.0 Authorization Code client\r\n * @internal\r\n */\r\nclass AuthorizationCodeClient extends BaseClient {\r\n    constructor(configuration, performanceClient) {\r\n        super(configuration, performanceClient);\r\n        // Flag to indicate if client is for hybrid spa auth code redemption\r\n        this.includeRedirectUri = true;\r\n        this.oidcDefaultScopes =\r\n            this.config.authOptions.authority.options.OIDCOptions?.defaultScopes;\r\n    }\r\n    /**\r\n     * API to acquire a token in exchange of 'authorization_code` acquired by the user in the first leg of the\r\n     * authorization_code_grant\r\n     * @param request\r\n     */\r\n    async acquireToken(request, authCodePayload) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientAcquireToken, request.correlationId);\r\n        if (!request.code) {\r\n            throw createClientAuthError(requestCannotBeMade);\r\n        }\r\n        const reqTimestamp = nowSeconds();\r\n        const response = await invokeAsync(this.executeTokenRequest.bind(this), PerformanceEvents.AuthClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(this.authority, request);\r\n        // Retrieve requestId from response headers\r\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\r\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin, this.performanceClient);\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response.body);\r\n        return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, authCodePayload, undefined, undefined, undefined, requestId);\r\n    }\r\n    /**\r\n     * Used to log out the current user, and redirect the user to the postLogoutRedirectUri.\r\n     * Default behaviour is to redirect the user to `window.location.href`.\r\n     * @param authorityUri\r\n     */\r\n    getLogoutUri(logoutRequest) {\r\n        // Throw error if logoutRequest is null/undefined\r\n        if (!logoutRequest) {\r\n            throw createClientConfigurationError(logoutRequestEmpty);\r\n        }\r\n        const queryString = this.createLogoutUrlQueryString(logoutRequest);\r\n        // Construct logout URI\r\n        return UrlString.appendQueryString(this.authority.endSessionEndpoint, queryString);\r\n    }\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    async executeTokenRequest(authority, request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientExecuteTokenRequest, request.correlationId);\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n        const requestBody = await invokeAsync(this.createTokenRequestBody.bind(this), PerformanceEvents.AuthClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\r\n        let ccsCredential = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils.base64Decode);\r\n                ccsCredential = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\r\n                };\r\n            }\r\n            catch (e) {\r\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n            }\r\n        }\r\n        const headers = this.createTokenRequestHeaders(ccsCredential || request.ccsCredential);\r\n        const thumbprint = getRequestThumbprint(this.config.authOptions.clientId, request);\r\n        return invokeAsync(this.executePostToTokenEndpoint.bind(this), PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, PerformanceEvents.AuthorizationCodeClientExecutePostToTokenEndpoint);\r\n    }\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    async createTokenRequestBody(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.AuthClientCreateTokenRequestBody, request.correlationId);\r\n        const parameters = new Map();\r\n        addClientId(parameters, request.embeddedClientId ||\r\n            request.tokenBodyParameters?.[CLIENT_ID] ||\r\n            this.config.authOptions.clientId);\r\n        /*\r\n         * For hybrid spa flow, there will be a code but no verifier\r\n         * In this scenario, don't include redirect uri as auth code will not be bound to redirect URI\r\n         */\r\n        if (!this.includeRedirectUri) {\r\n            // Just validate\r\n            if (!request.redirectUri) {\r\n                throw createClientConfigurationError(redirectUriEmpty);\r\n            }\r\n        }\r\n        else {\r\n            // Validate and include redirect uri\r\n            addRedirectUri(parameters, request.redirectUri);\r\n        }\r\n        // Add scope array, parameter builder will add default scopes and dedupe\r\n        addScopes(parameters, request.scopes, true, this.oidcDefaultScopes);\r\n        // add code: user set, not validated\r\n        addAuthorizationCode(parameters, request.code);\r\n        // Add library metadata\r\n        addLibraryInfo(parameters, this.config.libraryInfo);\r\n        addApplicationTelemetry(parameters, this.config.telemetry.application);\r\n        addThrottling(parameters);\r\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\r\n            addServerTelemetry(parameters, this.serverTelemetryManager);\r\n        }\r\n        // add code_verifier if passed\r\n        if (request.codeVerifier) {\r\n            addCodeVerifier(parameters, request.codeVerifier);\r\n        }\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            addClientSecret(parameters, this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            addClientAssertion(parameters, await getClientAssertion(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\r\n            addClientAssertionType(parameters, clientAssertion.assertionType);\r\n        }\r\n        addGrantType(parameters, GrantType.AUTHORIZATION_CODE_GRANT);\r\n        addClientInfo(parameters);\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\r\n            let reqCnfData;\r\n            if (!request.popKid) {\r\n                const generatedReqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\r\n                reqCnfData = generatedReqCnfData.reqCnfString;\r\n            }\r\n            else {\r\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\r\n            }\r\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n            addPopToken(parameters, reqCnfData);\r\n        }\r\n        else if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n            if (request.sshJwk) {\r\n                addSshJwk(parameters, request.sshJwk);\r\n            }\r\n            else {\r\n                throw createClientConfigurationError(missingSshJwk);\r\n            }\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)) {\r\n            addClaims(parameters, request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        let ccsCred = undefined;\r\n        if (request.clientInfo) {\r\n            try {\r\n                const clientInfo = buildClientInfo(request.clientInfo, this.cryptoUtils.base64Decode);\r\n                ccsCred = {\r\n                    credential: `${clientInfo.uid}${Separators.CLIENT_INFO_SEPARATOR}${clientInfo.utid}`,\r\n                    type: CcsCredentialType.HOME_ACCOUNT_ID,\r\n                };\r\n            }\r\n            catch (e) {\r\n                this.logger.verbose(\"Could not parse client info for CCS Header: \" + e);\r\n            }\r\n        }\r\n        else {\r\n            ccsCred = request.ccsCredential;\r\n        }\r\n        // Adds these as parameters in the request instead of headers to prevent CORS preflight request\r\n        if (this.config.systemOptions.preventCorsPreflight && ccsCred) {\r\n            switch (ccsCred.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(ccsCred.credential);\r\n                        addCcsOid(parameters, clientInfo);\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\r\n                            e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    addCcsUpn(parameters, ccsCred.credential);\r\n                    break;\r\n            }\r\n        }\r\n        if (request.embeddedClientId) {\r\n            addBrokerParameters(parameters, this.config.authOptions.clientId, this.config.authOptions.redirectUri);\r\n        }\r\n        if (request.tokenBodyParameters) {\r\n            addExtraQueryParameters(parameters, request.tokenBodyParameters);\r\n        }\r\n        // Add hybrid spa parameters if not already provided\r\n        if (request.enableSpaAuthorizationCode &&\r\n            (!request.tokenBodyParameters ||\r\n                !request.tokenBodyParameters[RETURN_SPA_CODE])) {\r\n            addExtraQueryParameters(parameters, {\r\n                [RETURN_SPA_CODE]: \"1\",\r\n            });\r\n        }\r\n        instrumentBrokerParams(parameters, request.correlationId, this.performanceClient);\r\n        return mapToQueryString(parameters);\r\n    }\r\n    /**\r\n     * This API validates the `EndSessionRequest` and creates a URL\r\n     * @param request\r\n     */\r\n    createLogoutUrlQueryString(request) {\r\n        const parameters = new Map();\r\n        if (request.postLogoutRedirectUri) {\r\n            addPostLogoutRedirectUri(parameters, request.postLogoutRedirectUri);\r\n        }\r\n        if (request.correlationId) {\r\n            addCorrelationId(parameters, request.correlationId);\r\n        }\r\n        if (request.idTokenHint) {\r\n            addIdTokenHint(parameters, request.idTokenHint);\r\n        }\r\n        if (request.state) {\r\n            addState(parameters, request.state);\r\n        }\r\n        if (request.logoutHint) {\r\n            addLogoutHint(parameters, request.logoutHint);\r\n        }\r\n        if (request.extraQueryParameters) {\r\n            addExtraQueryParameters(parameters, request.extraQueryParameters);\r\n        }\r\n        if (this.config.authOptions.instanceAware) {\r\n            addInstanceAware(parameters);\r\n        }\r\n        return mapToQueryString(parameters, this.config.authOptions.encodeExtraQueryParams, request.extraQueryParameters);\r\n    }\r\n}\n\nexport { AuthorizationCodeClient };\n//# sourceMappingURL=AuthorizationCodeClient.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { isOidcProtocolMode } from '../config/ClientConfiguration.mjs';\nimport { BaseClient } from './BaseClient.mjs';\nimport { addClientId, addRedirectUri, addScopes, addGrantType, addClientInfo, addLibraryInfo, addApplicationTelemetry, addThrottling, addServerTelemetry, addRefreshToken, addClientSecret, addClientAssertion, addClientAssertionType, addPopToken, addSshJwk, addClaims, addCcsUpn, addCcsOid, addBrokerParameters, addExtraQueryParameters, instrumentBrokerParams } from '../request/RequestParameterBuilder.mjs';\nimport { mapToQueryString } from '../utils/UrlUtils.mjs';\nimport { AuthenticationScheme, HeaderNames, Errors, GrantType } from '../utils/Constants.mjs';\nimport { CLIENT_ID } from '../constants/AADServerParamKeys.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { PopTokenGenerator } from '../crypto/PopTokenGenerator.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { createClientConfigurationError } from '../error/ClientConfigurationError.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { nowSeconds, isTokenExpired } from '../utils/TimeUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { CcsCredentialType } from '../account/CcsCredential.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { createInteractionRequiredAuthError, InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync, invoke } from '../utils/FunctionWrappers.mjs';\nimport { getClientAssertion } from '../utils/ClientAssertionUtils.mjs';\nimport { getRequestThumbprint } from '../network/RequestThumbprint.mjs';\nimport { badToken, noTokensFound, refreshTokenExpired } from '../error/InteractionRequiredAuthErrorCodes.mjs';\nimport { tokenRequestEmpty, missingSshJwk } from '../error/ClientConfigurationErrorCodes.mjs';\nimport { noAccountInSilentRequest } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS = 300; // 5 Minutes\r\n/**\r\n * OAuth2.0 refresh token client\r\n * @internal\r\n */\r\nclass RefreshTokenClient extends BaseClient {\r\n    constructor(configuration, performanceClient) {\r\n        super(configuration, performanceClient);\r\n    }\r\n    async acquireToken(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireToken, request.correlationId);\r\n        const reqTimestamp = nowSeconds();\r\n        const response = await invokeAsync(this.executeTokenRequest.bind(this), PerformanceEvents.RefreshTokenClientExecuteTokenRequest, this.logger, this.performanceClient, request.correlationId)(request, this.authority);\r\n        // Retrieve requestId from response headers\r\n        const requestId = response.headers?.[HeaderNames.X_MS_REQUEST_ID];\r\n        const responseHandler = new ResponseHandler(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\r\n        responseHandler.validateTokenResponse(response.body);\r\n        return invokeAsync(responseHandler.handleServerTokenResponse.bind(responseHandler), PerformanceEvents.HandleServerTokenResponse, this.logger, this.performanceClient, request.correlationId)(response.body, this.authority, reqTimestamp, request, undefined, undefined, true, request.forceCache, requestId);\r\n    }\r\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */\r\n    async acquireTokenByRefreshToken(request) {\r\n        // Cannot renew token if no request object is given.\r\n        if (!request) {\r\n            throw createClientConfigurationError(tokenRequestEmpty);\r\n        }\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenByRefreshToken, request.correlationId);\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw createClientAuthError(noAccountInSilentRequest);\r\n        }\r\n        // try checking if FOCI is enabled for the given application\r\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment);\r\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\r\n        if (isFOCI) {\r\n            try {\r\n                return await invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, true);\r\n            }\r\n            catch (e) {\r\n                const noFamilyRTInCache = e instanceof InteractionRequiredAuthError &&\r\n                    e.errorCode ===\r\n                        noTokensFound;\r\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError &&\r\n                    e.errorCode === Errors.INVALID_GRANT_ERROR &&\r\n                    e.subError === Errors.CLIENT_MISMATCH_ERROR;\r\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\r\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\r\n                    return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\r\n                    // throw in all other cases\r\n                }\r\n                else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        // fall back to application refresh token acquisition\r\n        return invokeAsync(this.acquireTokenWithCachedRefreshToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, this.logger, this.performanceClient, request.correlationId)(request, false);\r\n    }\r\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */\r\n    async acquireTokenWithCachedRefreshToken(request, foci) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientAcquireTokenWithCachedRefreshToken, request.correlationId);\r\n        // fetches family RT or application RT based on FOCI value\r\n        const refreshToken = invoke(this.cacheManager.getRefreshToken.bind(this.cacheManager), PerformanceEvents.CacheManagerGetRefreshToken, this.logger, this.performanceClient, request.correlationId)(request.account, foci, request.correlationId, undefined, this.performanceClient);\r\n        if (!refreshToken) {\r\n            throw createInteractionRequiredAuthError(noTokensFound);\r\n        }\r\n        if (refreshToken.expiresOn &&\r\n            isTokenExpired(refreshToken.expiresOn, request.refreshTokenExpirationOffsetSeconds ||\r\n                DEFAULT_REFRESH_TOKEN_EXPIRATION_OFFSET_SECONDS)) {\r\n            this.performanceClient?.addFields({ rtExpiresOnMs: Number(refreshToken.expiresOn) }, request.correlationId);\r\n            throw createInteractionRequiredAuthError(refreshTokenExpired);\r\n        }\r\n        // attach cached RT size to the current measurement\r\n        const refreshTokenRequest = {\r\n            ...request,\r\n            refreshToken: refreshToken.secret,\r\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\r\n            ccsCredential: {\r\n                credential: request.account.homeAccountId,\r\n                type: CcsCredentialType.HOME_ACCOUNT_ID,\r\n            },\r\n        };\r\n        try {\r\n            return await invokeAsync(this.acquireToken.bind(this), PerformanceEvents.RefreshTokenClientAcquireToken, this.logger, this.performanceClient, request.correlationId)(refreshTokenRequest);\r\n        }\r\n        catch (e) {\r\n            if (e instanceof InteractionRequiredAuthError) {\r\n                this.performanceClient?.addFields({ rtExpiresOnMs: Number(refreshToken.expiresOn) }, request.correlationId);\r\n                if (e.subError === badToken) {\r\n                    // Remove bad refresh token from cache\r\n                    this.logger.verbose(\"acquireTokenWithRefreshToken: bad refresh token, removing from cache\");\r\n                    const badRefreshTokenKey = this.cacheManager.generateCredentialKey(refreshToken);\r\n                    this.cacheManager.removeRefreshToken(badRefreshTokenKey, request.correlationId);\r\n                }\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    async executeTokenRequest(request, authority) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientExecuteTokenRequest, request.correlationId);\r\n        const queryParametersString = this.createTokenQueryParameters(request);\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParametersString);\r\n        const requestBody = await invokeAsync(this.createTokenRequestBody.bind(this), PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, this.logger, this.performanceClient, request.correlationId)(request);\r\n        const headers = this.createTokenRequestHeaders(request.ccsCredential);\r\n        const thumbprint = getRequestThumbprint(this.config.authOptions.clientId, request);\r\n        return invokeAsync(this.executePostToTokenEndpoint.bind(this), PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint, this.logger, this.performanceClient, request.correlationId)(endpoint, requestBody, headers, thumbprint, request.correlationId, PerformanceEvents.RefreshTokenClientExecutePostToTokenEndpoint);\r\n    }\r\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */\r\n    async createTokenRequestBody(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.RefreshTokenClientCreateTokenRequestBody, request.correlationId);\r\n        const parameters = new Map();\r\n        addClientId(parameters, request.embeddedClientId ||\r\n            request.tokenBodyParameters?.[CLIENT_ID] ||\r\n            this.config.authOptions.clientId);\r\n        if (request.redirectUri) {\r\n            addRedirectUri(parameters, request.redirectUri);\r\n        }\r\n        addScopes(parameters, request.scopes, true, this.config.authOptions.authority.options.OIDCOptions?.defaultScopes);\r\n        addGrantType(parameters, GrantType.REFRESH_TOKEN_GRANT);\r\n        addClientInfo(parameters);\r\n        addLibraryInfo(parameters, this.config.libraryInfo);\r\n        addApplicationTelemetry(parameters, this.config.telemetry.application);\r\n        addThrottling(parameters);\r\n        if (this.serverTelemetryManager && !isOidcProtocolMode(this.config)) {\r\n            addServerTelemetry(parameters, this.serverTelemetryManager);\r\n        }\r\n        addRefreshToken(parameters, request.refreshToken);\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            addClientSecret(parameters, this.config.clientCredentials.clientSecret);\r\n        }\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            addClientAssertion(parameters, await getClientAssertion(clientAssertion.assertion, this.config.authOptions.clientId, request.resourceRequestUri));\r\n            addClientAssertionType(parameters, clientAssertion.assertionType);\r\n        }\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils, this.performanceClient);\r\n            let reqCnfData;\r\n            if (!request.popKid) {\r\n                const generatedReqCnfData = await invokeAsync(popTokenGenerator.generateCnf.bind(popTokenGenerator), PerformanceEvents.PopTokenGenerateCnf, this.logger, this.performanceClient, request.correlationId)(request, this.logger);\r\n                reqCnfData = generatedReqCnfData.reqCnfString;\r\n            }\r\n            else {\r\n                reqCnfData = this.cryptoUtils.encodeKid(request.popKid);\r\n            }\r\n            // SPA PoP requires full Base64Url encoded req_cnf string (unhashed)\r\n            addPopToken(parameters, reqCnfData);\r\n        }\r\n        else if (request.authenticationScheme === AuthenticationScheme.SSH) {\r\n            if (request.sshJwk) {\r\n                addSshJwk(parameters, request.sshJwk);\r\n            }\r\n            else {\r\n                throw createClientConfigurationError(missingSshJwk);\r\n            }\r\n        }\r\n        if (!StringUtils.isEmptyObj(request.claims) ||\r\n            (this.config.authOptions.clientCapabilities &&\r\n                this.config.authOptions.clientCapabilities.length > 0)) {\r\n            addClaims(parameters, request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n        if (this.config.systemOptions.preventCorsPreflight &&\r\n            request.ccsCredential) {\r\n            switch (request.ccsCredential.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\r\n                        addCcsOid(parameters, clientInfo);\r\n                    }\r\n                    catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" +\r\n                            e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    addCcsUpn(parameters, request.ccsCredential.credential);\r\n                    break;\r\n            }\r\n        }\r\n        if (request.embeddedClientId) {\r\n            addBrokerParameters(parameters, this.config.authOptions.clientId, this.config.authOptions.redirectUri);\r\n        }\r\n        if (request.tokenBodyParameters) {\r\n            addExtraQueryParameters(parameters, request.tokenBodyParameters);\r\n        }\r\n        instrumentBrokerParams(parameters, request.correlationId, this.performanceClient);\r\n        return mapToQueryString(parameters);\r\n    }\r\n}\n\nexport { RefreshTokenClient };\n//# sourceMappingURL=RefreshTokenClient.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { BaseClient } from './BaseClient.mjs';\nimport { wasClockTurnedBack, isTokenExpired } from '../utils/TimeUtils.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { ResponseHandler } from '../response/ResponseHandler.mjs';\nimport { CacheOutcome } from '../utils/Constants.mjs';\nimport { StringUtils } from '../utils/StringUtils.mjs';\nimport { extractTokenClaims, checkMaxAge } from '../account/AuthToken.mjs';\nimport { PerformanceEvents } from '../telemetry/performance/PerformanceEvent.mjs';\nimport { invokeAsync } from '../utils/FunctionWrappers.mjs';\nimport { getTenantFromAuthorityString } from '../authority/Authority.mjs';\nimport { tokenRefreshRequired, noAccountInSilentRequest, authTimeNotFound } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/** @internal */\r\nclass SilentFlowClient extends BaseClient {\r\n    constructor(configuration, performanceClient) {\r\n        super(configuration, performanceClient);\r\n    }\r\n    /**\r\n     * Retrieves token from cache or throws an error if it must be refreshed.\r\n     * @param request\r\n     */\r\n    async acquireCachedToken(request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.SilentFlowClientAcquireCachedToken, request.correlationId);\r\n        let lastCacheOutcome = CacheOutcome.NOT_APPLICABLE;\r\n        if (request.forceRefresh ||\r\n            (!this.config.cacheOptions.claimsBasedCachingEnabled &&\r\n                !StringUtils.isEmptyObj(request.claims))) {\r\n            // Must refresh due to present force_refresh flag.\r\n            this.setCacheOutcome(CacheOutcome.FORCE_REFRESH_OR_CLAIMS, request.correlationId);\r\n            throw createClientAuthError(tokenRefreshRequired);\r\n        }\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw createClientAuthError(noAccountInSilentRequest);\r\n        }\r\n        const requestTenantId = request.account.tenantId ||\r\n            getTenantFromAuthorityString(request.authority);\r\n        const tokenKeys = this.cacheManager.getTokenKeys();\r\n        const cachedAccessToken = this.cacheManager.getAccessToken(request.account, request, tokenKeys, requestTenantId);\r\n        if (!cachedAccessToken) {\r\n            // must refresh due to non-existent access_token\r\n            this.setCacheOutcome(CacheOutcome.NO_CACHED_ACCESS_TOKEN, request.correlationId);\r\n            throw createClientAuthError(tokenRefreshRequired);\r\n        }\r\n        else if (wasClockTurnedBack(cachedAccessToken.cachedAt) ||\r\n            isTokenExpired(cachedAccessToken.expiresOn, this.config.systemOptions.tokenRenewalOffsetSeconds)) {\r\n            // must refresh due to the expires_in value\r\n            this.setCacheOutcome(CacheOutcome.CACHED_ACCESS_TOKEN_EXPIRED, request.correlationId);\r\n            throw createClientAuthError(tokenRefreshRequired);\r\n        }\r\n        else if (cachedAccessToken.refreshOn &&\r\n            isTokenExpired(cachedAccessToken.refreshOn, 0)) {\r\n            // must refresh (in the background) due to the refresh_in value\r\n            lastCacheOutcome = CacheOutcome.PROACTIVELY_REFRESHED;\r\n            // don't throw ClientAuthError.createRefreshRequiredError(), return cached token instead\r\n        }\r\n        const environment = request.authority || this.authority.getPreferredCache();\r\n        const cacheRecord = {\r\n            account: this.cacheManager.getAccount(this.cacheManager.generateAccountKey(request.account), request.correlationId),\r\n            accessToken: cachedAccessToken,\r\n            idToken: this.cacheManager.getIdToken(request.account, request.correlationId, tokenKeys, requestTenantId, this.performanceClient),\r\n            refreshToken: null,\r\n            appMetadata: this.cacheManager.readAppMetadataFromCache(environment),\r\n        };\r\n        this.setCacheOutcome(lastCacheOutcome, request.correlationId);\r\n        if (this.config.serverTelemetryManager) {\r\n            this.config.serverTelemetryManager.incrementCacheHits();\r\n        }\r\n        return [\r\n            await invokeAsync(this.generateResultFromCacheRecord.bind(this), PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, this.logger, this.performanceClient, request.correlationId)(cacheRecord, request),\r\n            lastCacheOutcome,\r\n        ];\r\n    }\r\n    setCacheOutcome(cacheOutcome, correlationId) {\r\n        this.serverTelemetryManager?.setCacheOutcome(cacheOutcome);\r\n        this.performanceClient?.addFields({\r\n            cacheOutcome: cacheOutcome,\r\n        }, correlationId);\r\n        if (cacheOutcome !== CacheOutcome.NOT_APPLICABLE) {\r\n            this.logger.info(`Token refresh is required due to cache outcome: ${cacheOutcome}`);\r\n        }\r\n    }\r\n    /**\r\n     * Helper function to build response object from the CacheRecord\r\n     * @param cacheRecord\r\n     */\r\n    async generateResultFromCacheRecord(cacheRecord, request) {\r\n        this.performanceClient?.addQueueMeasurement(PerformanceEvents.SilentFlowClientGenerateResultFromCacheRecord, request.correlationId);\r\n        let idTokenClaims;\r\n        if (cacheRecord.idToken) {\r\n            idTokenClaims = extractTokenClaims(cacheRecord.idToken.secret, this.config.cryptoInterface.base64Decode);\r\n        }\r\n        // token max_age check\r\n        if (request.maxAge || request.maxAge === 0) {\r\n            const authTime = idTokenClaims?.auth_time;\r\n            if (!authTime) {\r\n                throw createClientAuthError(authTimeNotFound);\r\n            }\r\n            checkMaxAge(authTime, request.maxAge);\r\n        }\r\n        return ResponseHandler.generateAuthenticationResult(this.cryptoUtils, this.authority, cacheRecord, true, request, idTokenClaims);\r\n    }\r\n}\n\nexport { SilentFlowClient };\n//# sourceMappingURL=SilentFlowClient.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { addClientId, addScopes, addRedirectUri, addCorrelationId, addResponseMode, addClientInfo, addPrompt, addDomainHint, addSid, addLoginHint, addCcsOid, addCcsUpn, addNonce, addState, addClaims, addBrokerParameters, addInstanceAware } from '../request/RequestParameterBuilder.mjs';\nimport { INSTANCE_AWARE, CLIENT_ID } from '../constants/AADServerParamKeys.mjs';\nimport { PromptValue } from '../utils/Constants.mjs';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.mjs';\nimport { mapToQueryString } from '../utils/UrlUtils.mjs';\nimport { UrlString } from '../url/UrlString.mjs';\nimport { createClientAuthError } from '../error/ClientAuthError.mjs';\nimport { isInteractionRequiredError, InteractionRequiredAuthError } from '../error/InteractionRequiredAuthError.mjs';\nimport { ServerError } from '../error/ServerError.mjs';\nimport { authorizationCodeMissingFromServerResponse, stateNotFound, invalidState, stateMismatch } from '../error/ClientAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n/**\r\n * Returns map of parameters that are applicable to all calls to /authorize whether using PKCE or EAR\r\n * @param config\r\n * @param request\r\n * @param logger\r\n * @param performanceClient\r\n * @returns\r\n */\r\nfunction getStandardAuthorizeRequestParameters(authOptions, request, logger, performanceClient) {\r\n    // generate the correlationId if not set by the user and add\r\n    const correlationId = request.correlationId;\r\n    const parameters = new Map();\r\n    addClientId(parameters, request.embeddedClientId ||\r\n        request.extraQueryParameters?.[CLIENT_ID] ||\r\n        authOptions.clientId);\r\n    const requestScopes = [\r\n        ...(request.scopes || []),\r\n        ...(request.extraScopesToConsent || []),\r\n    ];\r\n    addScopes(parameters, requestScopes, true, authOptions.authority.options.OIDCOptions?.defaultScopes);\r\n    addRedirectUri(parameters, request.redirectUri);\r\n    addCorrelationId(parameters, correlationId);\r\n    // add response_mode. If not passed in it defaults to query.\r\n    addResponseMode(parameters, request.responseMode);\r\n    // add client_info=1\r\n    addClientInfo(parameters);\r\n    if (request.prompt) {\r\n        addPrompt(parameters, request.prompt);\r\n        performanceClient?.addFields({ prompt: request.prompt }, correlationId);\r\n    }\r\n    if (request.domainHint) {\r\n        addDomainHint(parameters, request.domainHint);\r\n        performanceClient?.addFields({ domainHintFromRequest: true }, correlationId);\r\n    }\r\n    // Add sid or loginHint with preference for login_hint claim (in request) -> sid -> loginHint (upn/email) -> username of AccountInfo object\r\n    if (request.prompt !== PromptValue.SELECT_ACCOUNT) {\r\n        // AAD will throw if prompt=select_account is passed with an account hint\r\n        if (request.sid && request.prompt === PromptValue.NONE) {\r\n            // SessionID is only used in silent calls\r\n            logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from request\");\r\n            addSid(parameters, request.sid);\r\n            performanceClient?.addFields({ sidFromRequest: true }, correlationId);\r\n        }\r\n        else if (request.account) {\r\n            const accountSid = extractAccountSid(request.account);\r\n            let accountLoginHintClaim = extractLoginHint(request.account);\r\n            if (accountLoginHintClaim && request.domainHint) {\r\n                logger.warning(`AuthorizationCodeClient.createAuthCodeUrlQueryString: \"domainHint\" param is set, skipping opaque \"login_hint\" claim. Please consider not passing domainHint`);\r\n                accountLoginHintClaim = null;\r\n            }\r\n            // If login_hint claim is present, use it over sid/username\r\n            if (accountLoginHintClaim) {\r\n                logger.verbose(\"createAuthCodeUrlQueryString: login_hint claim present on account\");\r\n                addLoginHint(parameters, accountLoginHintClaim);\r\n                performanceClient?.addFields({ loginHintFromClaim: true }, correlationId);\r\n                try {\r\n                    const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                    addCcsOid(parameters, clientInfo);\r\n                }\r\n                catch (e) {\r\n                    logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                }\r\n            }\r\n            else if (accountSid && request.prompt === PromptValue.NONE) {\r\n                /*\r\n                 * If account and loginHint are provided, we will check account first for sid before adding loginHint\r\n                 * SessionId is only used in silent calls\r\n                 */\r\n                logger.verbose(\"createAuthCodeUrlQueryString: Prompt is none, adding sid from account\");\r\n                addSid(parameters, accountSid);\r\n                performanceClient?.addFields({ sidFromClaim: true }, correlationId);\r\n                try {\r\n                    const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                    addCcsOid(parameters, clientInfo);\r\n                }\r\n                catch (e) {\r\n                    logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                }\r\n            }\r\n            else if (request.loginHint) {\r\n                logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from request\");\r\n                addLoginHint(parameters, request.loginHint);\r\n                addCcsUpn(parameters, request.loginHint);\r\n                performanceClient?.addFields({ loginHintFromRequest: true }, correlationId);\r\n            }\r\n            else if (request.account.username) {\r\n                // Fallback to account username if provided\r\n                logger.verbose(\"createAuthCodeUrlQueryString: Adding login_hint from account\");\r\n                addLoginHint(parameters, request.account.username);\r\n                performanceClient?.addFields({ loginHintFromUpn: true }, correlationId);\r\n                try {\r\n                    const clientInfo = buildClientInfoFromHomeAccountId(request.account.homeAccountId);\r\n                    addCcsOid(parameters, clientInfo);\r\n                }\r\n                catch (e) {\r\n                    logger.verbose(\"createAuthCodeUrlQueryString: Could not parse home account ID for CCS Header\");\r\n                }\r\n            }\r\n        }\r\n        else if (request.loginHint) {\r\n            logger.verbose(\"createAuthCodeUrlQueryString: No account, adding login_hint from request\");\r\n            addLoginHint(parameters, request.loginHint);\r\n            addCcsUpn(parameters, request.loginHint);\r\n            performanceClient?.addFields({ loginHintFromRequest: true }, correlationId);\r\n        }\r\n    }\r\n    else {\r\n        logger.verbose(\"createAuthCodeUrlQueryString: Prompt is select_account, ignoring account hints\");\r\n    }\r\n    if (request.nonce) {\r\n        addNonce(parameters, request.nonce);\r\n    }\r\n    if (request.state) {\r\n        addState(parameters, request.state);\r\n    }\r\n    if (request.claims ||\r\n        (authOptions.clientCapabilities &&\r\n            authOptions.clientCapabilities.length > 0)) {\r\n        addClaims(parameters, request.claims, authOptions.clientCapabilities);\r\n    }\r\n    if (request.embeddedClientId) {\r\n        addBrokerParameters(parameters, authOptions.clientId, authOptions.redirectUri);\r\n    }\r\n    // If extraQueryParameters includes instance_aware its value will be added when extraQueryParameters are added\r\n    if (authOptions.instanceAware &&\r\n        (!request.extraQueryParameters ||\r\n            !Object.keys(request.extraQueryParameters).includes(INSTANCE_AWARE))) {\r\n        addInstanceAware(parameters);\r\n    }\r\n    return parameters;\r\n}\r\n/**\r\n * Returns authorize endpoint with given request parameters in the query string\r\n * @param authority\r\n * @param requestParameters\r\n * @returns\r\n */\r\nfunction getAuthorizeUrl(authority, requestParameters, encodeParams, extraQueryParameters) {\r\n    const queryString = mapToQueryString(requestParameters, encodeParams, extraQueryParameters);\r\n    return UrlString.appendQueryString(authority.authorizationEndpoint, queryString);\r\n}\r\n/**\r\n * Handles the hash fragment response from public client code request. Returns a code response used by\r\n * the client to exchange for a token in acquireToken.\r\n * @param serverParams\r\n * @param cachedState\r\n */\r\nfunction getAuthorizationCodePayload(serverParams, cachedState) {\r\n    // Get code response\r\n    validateAuthorizationResponse(serverParams, cachedState);\r\n    // throw when there is no auth code in the response\r\n    if (!serverParams.code) {\r\n        throw createClientAuthError(authorizationCodeMissingFromServerResponse);\r\n    }\r\n    return serverParams;\r\n}\r\n/**\r\n * Function which validates server authorization code response.\r\n * @param serverResponseHash\r\n * @param requestState\r\n */\r\nfunction validateAuthorizationResponse(serverResponse, requestState) {\r\n    if (!serverResponse.state || !requestState) {\r\n        throw serverResponse.state\r\n            ? createClientAuthError(stateNotFound, \"Cached State\")\r\n            : createClientAuthError(stateNotFound, \"Server State\");\r\n    }\r\n    let decodedServerResponseState;\r\n    let decodedRequestState;\r\n    try {\r\n        decodedServerResponseState = decodeURIComponent(serverResponse.state);\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(invalidState, serverResponse.state);\r\n    }\r\n    try {\r\n        decodedRequestState = decodeURIComponent(requestState);\r\n    }\r\n    catch (e) {\r\n        throw createClientAuthError(invalidState, serverResponse.state);\r\n    }\r\n    if (decodedServerResponseState !== decodedRequestState) {\r\n        throw createClientAuthError(stateMismatch);\r\n    }\r\n    // Check for error\r\n    if (serverResponse.error ||\r\n        serverResponse.error_description ||\r\n        serverResponse.suberror) {\r\n        const serverErrorNo = parseServerErrorNo(serverResponse);\r\n        if (isInteractionRequiredError(serverResponse.error, serverResponse.error_description, serverResponse.suberror)) {\r\n            throw new InteractionRequiredAuthError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror, serverResponse.timestamp || \"\", serverResponse.trace_id || \"\", serverResponse.correlation_id || \"\", serverResponse.claims || \"\", serverErrorNo);\r\n        }\r\n        throw new ServerError(serverResponse.error || \"\", serverResponse.error_description, serverResponse.suberror, serverErrorNo);\r\n    }\r\n}\r\n/**\r\n * Get server error No from the error_uri\r\n * @param serverResponse\r\n * @returns\r\n */\r\nfunction parseServerErrorNo(serverResponse) {\r\n    const errorCodePrefix = \"code=\";\r\n    const errorCodePrefixIndex = serverResponse.error_uri?.lastIndexOf(errorCodePrefix);\r\n    return errorCodePrefixIndex && errorCodePrefixIndex >= 0\r\n        ? serverResponse.error_uri?.substring(errorCodePrefixIndex + errorCodePrefix.length)\r\n        : undefined;\r\n}\r\n/**\r\n * Helper to get sid from account. Returns null if idTokenClaims are not present or sid is not present.\r\n * @param account\r\n */\r\nfunction extractAccountSid(account) {\r\n    return account.idTokenClaims?.sid || null;\r\n}\r\nfunction extractLoginHint(account) {\r\n    return account.loginHint || account.idTokenClaims?.login_hint || null;\r\n}\n\nexport { getAuthorizationCodePayload, getAuthorizeUrl, getStandardAuthorizeRequestParameters, validateAuthorizationResponse };\n//# sourceMappingURL=Authorize.mjs.map\n","/*! @azure/msal-common v15.12.0 2025-09-17 */\n'use strict';\nimport { CacheOutcome, Constants, SERVER_TELEM_CONSTANTS, Separators } from '../../utils/Constants.mjs';\nimport { AuthError } from '../../error/AuthError.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nconst skuGroupSeparator = \",\";\r\nconst skuValueSeparator = \"|\";\r\nfunction makeExtraSkuString(params) {\r\n    const { skus, libraryName, libraryVersion, extensionName, extensionVersion, } = params;\r\n    const skuMap = new Map([\r\n        [0, [libraryName, libraryVersion]],\r\n        [2, [extensionName, extensionVersion]],\r\n    ]);\r\n    let skuArr = [];\r\n    if (skus?.length) {\r\n        skuArr = skus.split(skuGroupSeparator);\r\n        // Ignore invalid input sku param\r\n        if (skuArr.length < 4) {\r\n            return skus;\r\n        }\r\n    }\r\n    else {\r\n        skuArr = Array.from({ length: 4 }, () => skuValueSeparator);\r\n    }\r\n    skuMap.forEach((value, key) => {\r\n        if (value.length === 2 && value[0]?.length && value[1]?.length) {\r\n            setSku({\r\n                skuArr,\r\n                index: key,\r\n                skuName: value[0],\r\n                skuVersion: value[1],\r\n            });\r\n        }\r\n    });\r\n    return skuArr.join(skuGroupSeparator);\r\n}\r\nfunction setSku(params) {\r\n    const { skuArr, index, skuName, skuVersion } = params;\r\n    if (index >= skuArr.length) {\r\n        return;\r\n    }\r\n    skuArr[index] = [skuName, skuVersion].join(skuValueSeparator);\r\n}\r\n/** @internal */\r\nclass ServerTelemetryManager {\r\n    constructor(telemetryRequest, cacheManager) {\r\n        this.cacheOutcome = CacheOutcome.NOT_APPLICABLE;\r\n        this.cacheManager = cacheManager;\r\n        this.apiId = telemetryRequest.apiId;\r\n        this.correlationId = telemetryRequest.correlationId;\r\n        this.wrapperSKU = telemetryRequest.wrapperSKU || Constants.EMPTY_STRING;\r\n        this.wrapperVer = telemetryRequest.wrapperVer || Constants.EMPTY_STRING;\r\n        this.telemetryCacheKey =\r\n            SERVER_TELEM_CONSTANTS.CACHE_KEY +\r\n                Separators.CACHE_KEY_SEPARATOR +\r\n                telemetryRequest.clientId;\r\n    }\r\n    /**\r\n     * API to add MSER Telemetry to request\r\n     */\r\n    generateCurrentRequestHeaderValue() {\r\n        const request = `${this.apiId}${SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR}${this.cacheOutcome}`;\r\n        const platformFieldsArr = [this.wrapperSKU, this.wrapperVer];\r\n        const nativeBrokerErrorCode = this.getNativeBrokerErrorCode();\r\n        if (nativeBrokerErrorCode?.length) {\r\n            platformFieldsArr.push(`broker_error=${nativeBrokerErrorCode}`);\r\n        }\r\n        const platformFields = platformFieldsArr.join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const regionDiscoveryFields = this.getRegionDiscoveryFields();\r\n        const requestWithRegionDiscoveryFields = [\r\n            request,\r\n            regionDiscoveryFields,\r\n        ].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [\r\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\r\n            requestWithRegionDiscoveryFields,\r\n            platformFields,\r\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    }\r\n    /**\r\n     * API to add MSER Telemetry for the last failed request\r\n     */\r\n    generateLastRequestHeaderValue() {\r\n        const lastRequests = this.getLastRequests();\r\n        const maxErrors = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        const failedRequests = lastRequests.failedRequests\r\n            .slice(0, 2 * maxErrors)\r\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const errors = lastRequests.errors\r\n            .slice(0, maxErrors)\r\n            .join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        const errorCount = lastRequests.errors.length;\r\n        // Indicate whether this header contains all data or partial data\r\n        const overflow = maxErrors < errorCount\r\n            ? SERVER_TELEM_CONSTANTS.OVERFLOW_TRUE\r\n            : SERVER_TELEM_CONSTANTS.OVERFLOW_FALSE;\r\n        const platformFields = [errorCount, overflow].join(SERVER_TELEM_CONSTANTS.VALUE_SEPARATOR);\r\n        return [\r\n            SERVER_TELEM_CONSTANTS.SCHEMA_VERSION,\r\n            lastRequests.cacheHits,\r\n            failedRequests,\r\n            errors,\r\n            platformFields,\r\n        ].join(SERVER_TELEM_CONSTANTS.CATEGORY_SEPARATOR);\r\n    }\r\n    /**\r\n     * API to cache token failures for MSER data capture\r\n     * @param error\r\n     */\r\n    cacheFailedRequest(error) {\r\n        const lastRequests = this.getLastRequests();\r\n        if (lastRequests.errors.length >=\r\n            SERVER_TELEM_CONSTANTS.MAX_CACHED_ERRORS) {\r\n            // Remove a cached error to make room, first in first out\r\n            lastRequests.failedRequests.shift(); // apiId\r\n            lastRequests.failedRequests.shift(); // correlationId\r\n            lastRequests.errors.shift();\r\n        }\r\n        lastRequests.failedRequests.push(this.apiId, this.correlationId);\r\n        if (error instanceof Error && !!error && error.toString()) {\r\n            if (error instanceof AuthError) {\r\n                if (error.subError) {\r\n                    lastRequests.errors.push(error.subError);\r\n                }\r\n                else if (error.errorCode) {\r\n                    lastRequests.errors.push(error.errorCode);\r\n                }\r\n                else {\r\n                    lastRequests.errors.push(error.toString());\r\n                }\r\n            }\r\n            else {\r\n                lastRequests.errors.push(error.toString());\r\n            }\r\n        }\r\n        else {\r\n            lastRequests.errors.push(SERVER_TELEM_CONSTANTS.UNKNOWN_ERROR);\r\n        }\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);\r\n        return;\r\n    }\r\n    /**\r\n     * Update server telemetry cache entry by incrementing cache hit counter\r\n     */\r\n    incrementCacheHits() {\r\n        const lastRequests = this.getLastRequests();\r\n        lastRequests.cacheHits += 1;\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);\r\n        return lastRequests.cacheHits;\r\n    }\r\n    /**\r\n     * Get the server telemetry entity from cache or initialize a new one\r\n     */\r\n    getLastRequests() {\r\n        const initialValue = {\r\n            failedRequests: [],\r\n            errors: [],\r\n            cacheHits: 0,\r\n        };\r\n        const lastRequests = this.cacheManager.getServerTelemetry(this.telemetryCacheKey);\r\n        return lastRequests || initialValue;\r\n    }\r\n    /**\r\n     * Remove server telemetry cache entry\r\n     */\r\n    clearTelemetryCache() {\r\n        const lastRequests = this.getLastRequests();\r\n        const numErrorsFlushed = ServerTelemetryManager.maxErrorsToSend(lastRequests);\r\n        const errorCount = lastRequests.errors.length;\r\n        if (numErrorsFlushed === errorCount) {\r\n            // All errors were sent on last request, clear Telemetry cache\r\n            this.cacheManager.removeItem(this.telemetryCacheKey, this.correlationId);\r\n        }\r\n        else {\r\n            // Partial data was flushed to server, construct a new telemetry cache item with errors that were not flushed\r\n            const serverTelemEntity = {\r\n                failedRequests: lastRequests.failedRequests.slice(numErrorsFlushed * 2),\r\n                errors: lastRequests.errors.slice(numErrorsFlushed),\r\n                cacheHits: 0,\r\n            };\r\n            this.cacheManager.setServerTelemetry(this.telemetryCacheKey, serverTelemEntity, this.correlationId);\r\n        }\r\n    }\r\n    /**\r\n     * Returns the maximum number of errors that can be flushed to the server in the next network request\r\n     * @param serverTelemetryEntity\r\n     */\r\n    static maxErrorsToSend(serverTelemetryEntity) {\r\n        let i;\r\n        let maxErrors = 0;\r\n        let dataSize = 0;\r\n        const errorCount = serverTelemetryEntity.errors.length;\r\n        for (i = 0; i < errorCount; i++) {\r\n            // failedRequests parameter contains pairs of apiId and correlationId, multiply index by 2 to preserve pairs\r\n            const apiId = serverTelemetryEntity.failedRequests[2 * i] ||\r\n                Constants.EMPTY_STRING;\r\n            const correlationId = serverTelemetryEntity.failedRequests[2 * i + 1] ||\r\n                Constants.EMPTY_STRING;\r\n            const errorCode = serverTelemetryEntity.errors[i] || Constants.EMPTY_STRING;\r\n            // Count number of characters that would be added to header, each character is 1 byte. Add 3 at the end to account for separators\r\n            dataSize +=\r\n                apiId.toString().length +\r\n                    correlationId.toString().length +\r\n                    errorCode.length +\r\n                    3;\r\n            if (dataSize < SERVER_TELEM_CONSTANTS.MAX_LAST_HEADER_BYTES) {\r\n                // Adding this entry to the header would still keep header size below the limit\r\n                maxErrors += 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return maxErrors;\r\n    }\r\n    /**\r\n     * Get the region discovery fields\r\n     *\r\n     * @returns string\r\n     */\r\n    getRegionDiscoveryFields() {\r\n        const regionDiscoveryFields = [];\r\n        regionDiscoveryFields.push(this.regionUsed || Constants.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionSource || Constants.EMPTY_STRING);\r\n        regionDiscoveryFields.push(this.regionOutcome || Constants.EMPTY_STRING);\r\n        return regionDiscoveryFields.join(\",\");\r\n    }\r\n    /**\r\n     * Update the region discovery metadata\r\n     *\r\n     * @param regionDiscoveryMetadata\r\n     * @returns void\r\n     */\r\n    updateRegionDiscoveryMetadata(regionDiscoveryMetadata) {\r\n        this.regionUsed = regionDiscoveryMetadata.region_used;\r\n        this.regionSource = regionDiscoveryMetadata.region_source;\r\n        this.regionOutcome = regionDiscoveryMetadata.region_outcome;\r\n    }\r\n    /**\r\n     * Set cache outcome\r\n     */\r\n    setCacheOutcome(cacheOutcome) {\r\n        this.cacheOutcome = cacheOutcome;\r\n    }\r\n    setNativeBrokerErrorCode(errorCode) {\r\n        const lastRequests = this.getLastRequests();\r\n        lastRequests.nativeBrokerErrorCode = errorCode;\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);\r\n    }\r\n    getNativeBrokerErrorCode() {\r\n        return this.getLastRequests().nativeBrokerErrorCode;\r\n    }\r\n    clearNativeBrokerErrorCode() {\r\n        const lastRequests = this.getLastRequests();\r\n        delete lastRequests.nativeBrokerErrorCode;\r\n        this.cacheManager.setServerTelemetry(this.telemetryCacheKey, lastRequests, this.correlationId);\r\n    }\r\n    static makeExtraSkuString(params) {\r\n        return makeExtraSkuString(params);\r\n    }\r\n}\n\nexport { ServerTelemetryManager };\n//# sourceMappingURL=ServerTelemetryManager.mjs.map\n","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/cache/serializer/Deserializer.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/internals.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/utils/Constants.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/utils/NetworkUtils.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/network/HttpClient.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/error/ManagedIdentityErrorCodes.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/error/ManagedIdentityError.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/config/ManagedIdentityId.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/error/NodeAuthError.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/config/Configuration.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/crypto/GuidGenerator.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/utils/EncodingUtils.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/crypto/HashUtils.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/crypto/PkceGenerator.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/crypto/CryptoProvider.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/cache/CacheHelpers.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/cache/NodeStorage.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/cache/TokenCache.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/ClientAssertion.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/packageMetadata.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/UsernamePasswordClient.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/protocol/Authorize.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/ClientApplication.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/network/LoopbackClient.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/DeviceCodeClient.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/PublicClientApplication.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/ClientCredentialClient.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/OnBehalfOfClient.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/ConfidentialClientApplication.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/utils/TimeUtils.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/network/HttpClientWithRetries.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/ManagedIdentitySources/BaseManagedIdentitySource.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/retry/LinearRetryStrategy.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/retry/DefaultManagedIdentityRetryPolicy.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/config/ManagedIdentityRequestParameters.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/ManagedIdentitySources/AppService.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/ManagedIdentitySources/AzureArc.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/ManagedIdentitySources/CloudShell.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/retry/ExponentialRetryStrategy.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/retry/ImdsRetryPolicy.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/ManagedIdentitySources/Imds.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/ManagedIdentitySources/ServiceFabric.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/ManagedIdentitySources/MachineLearning.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/ManagedIdentityClient.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/client/ManagedIdentityApplication.ts","unable to read source [project]/Downloads/mrpii 2/node_modules/@azure/src/cache/distributed/DistributedCachePlugin.ts"],"names":["Constants","LogLevel","name","version","DEFAULT_SYSTEM_OPTIONS","DEFAULT_CACHE_OPTIONS","DEFAULT_TELEMETRY_OPTIONS","ManagedIdentityErrorCodes.invalidFileExtension","ManagedIdentityErrorCodes.invalidFilePath","ManagedIdentityErrorCodes.invalidManagedIdentityIdType","ManagedIdentityErrorCodes.invalidSecret","ManagedIdentityErrorCodes.platformNotSupported","ManagedIdentityErrorCodes.missingId","ManagedIdentityErrorCodes.MsiEnvironmentVariableUrlMalformedErrorCodes","ManagedIdentityErrorCodes.networkUnavailable","ManagedIdentityErrorCodes.unableToCreateAzureArc","ManagedIdentityErrorCodes.unableToCreateCloudShell","ManagedIdentityErrorCodes.unableToCreateSource","ManagedIdentityErrorCodes.unableToReadSecretFile","ManagedIdentityErrorCodes.userAssignedNotAvailableAtRuntime","ManagedIdentityErrorCodes.wwwAuthenticateHeaderMissing","ManagedIdentityErrorCodes.wwwAuthenticateHeaderUnsupportedFormat","uuidv4","StubPerformanceClient","CacheHelpers.isIdTokenEntity","CacheHelpers.isAccessTokenEntity","CacheHelpers.isRefreshTokenEntity","CacheHelpers.isAppMetadataEntity","CacheHelpers.generateAppMetadataKey","CacheHelpers.isServerTelemetryEntity","CacheHelpers.isAuthorityMetadataEntity","CacheHelpers.isThrottlingEntity","ClientAuthErrorCodes.invalidAssertion","TimeUtils.nowSeconds","RequestParameterBuilder.addClientId","RequestParameterBuilder.addUsername","RequestParameterBuilder.addPassword","RequestParameterBuilder.addScopes","RequestParameterBuilder.addResponseType","RequestParameterBuilder.addGrantType","RequestParameterBuilder.addClientInfo","RequestParameterBuilder.addLibraryInfo","RequestParameterBuilder.addApplicationTelemetry","RequestParameterBuilder.addThrottling","RequestParameterBuilder.addServerTelemetry","RequestParameterBuilder.addCorrelationId","RequestParameterBuilder.addClientSecret","RequestParameterBuilder.addClientAssertion","RequestParameterBuilder.addClientAssertionType","RequestParameterBuilder.addClaims","RequestParameterBuilder.addCcsUpn","UrlUtils.mapToQueryString","AuthorizeProtocol.getStandardAuthorizeRequestParameters","NodeConstants","RequestParameterBuilder.addCodeChallengeParams","RequestParameterBuilder.addExtraQueryParameters","AuthorizeProtocol.getAuthorizeUrl","ClientAuthErrorCodes.tokenRefreshRequired","ClientAuthErrorCodes.stateMismatch","AuthorityFactory.createDiscoveredInstance","CommonConstants","UrlUtils.getDeserializedResponse","ClientAuthErrorCodes.deviceCodePollingCancelled","ClientAuthErrorCodes.userTimeoutReached","ClientAuthErrorCodes.deviceCodeExpired","TimeUtils.delay","AuthErrorCodes.postRequestFailed","ClientAuthErrorCodes.deviceCodeUnknownError","RequestParameterBuilder.addDeviceCode","AADServerParamKeys.X_CLIENT_EXTRA_SKU","TimeUtils.isTokenExpired","ClientAuthErrorCodes.multipleMatchingTokens","AuthToken.extractTokenClaims","RequestParameterBuilder.addRequestTokenUse","AADServerParamKeys.ON_BEHALF_OF","RequestParameterBuilder.addOboAssertion","ClientAuthErrorCodes.invalidClientCredential","ClientAuthErrorCodes.missingTenantIdError","ClientAuthErrorCodes.networkError","ManagedIdentityErrorCodes\r\n            .MsiEnvironmentVariableUrlMalformedErrorCodes","HttpStatus","accessSync","fsConstants","statSync","readFileSync","ClientConfigurationErrorCodes.urlEmptyError"],"mappings":";;;;;;;;AAAA;;;CAGG,GAmBH;;;CAGG,SACU,UAAU,CAAA;IACnB;;;KAGG,GACH,OAAO,iBAAiB,CAAC,IAAe,EAAA;QACpC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KAC/B;IAED;;;KAGG,GACH,OAAO,iBAAiB,CACpB,QAAsB,EAAA;QAEtB,MAAM,QAAQ,GAA4C,CAAA,CAAE,CAAC;QAC7D,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,SAAU,GAAG,EAAA;YACnC,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YACpC,QAAQ,CAAC,GAAG,CAAC,GAAG;gBACZ,eAAe,EAAE,aAAa,CAAC,aAAa;gBAC5C,WAAW,EAAE,aAAa,CAAC,WAAW;gBACtC,KAAK,EAAE,aAAa,CAAC,KAAK;gBAC1B,gBAAgB,EAAE,aAAa,CAAC,cAAc;gBAC9C,QAAQ,EAAE,aAAa,CAAC,QAAQ;gBAChC,cAAc,EAAE,aAAa,CAAC,aAAa;gBAC3C,IAAI,EAAE,aAAa,CAAC,IAAI;gBACxB,WAAW,EAAE,aAAa,CAAC,UAAU;gBACrC,sBAAsB,EAAE,aAAa,CAAC,oBAAoB;gBAC1D,qBAAqB,EAAE,aAAa,CAAC,mBAAmB;gBACxD,cAAc,EAAE,aAAa,CAAC,cAAc,EAAE,GAAG,CAC7C,CAAC,aAAa,KAAI;oBACd,OAAO,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;gBACzC,CAAC,CACJ;aACJ,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC;KACnB;IAED;;;KAGG,GACH,OAAO,iBAAiB,CACpB,QAAsB,EAAA;QAEtB,MAAM,QAAQ,GAA4C,CAAA,CAAE,CAAC;QAC7D,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,SAAU,GAAG,EAAA;YACnC,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAChC,QAAQ,CAAC,GAAG,CAAC,GAAG;gBACZ,eAAe,EAAE,SAAS,CAAC,aAAa;gBACxC,WAAW,EAAE,SAAS,CAAC,WAAW;gBAClC,eAAe,EAAE,SAAS,CAAC,cAAc;gBACzC,SAAS,EAAE,SAAS,CAAC,QAAQ;gBAC7B,MAAM,EAAE,SAAS,CAAC,MAAM;gBACxB,KAAK,EAAE,SAAS,CAAC,KAAK;aACzB,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,OAAO,QAAQ,CAAC;KACnB;IAED;;;KAGG,GACH,OAAO,qBAAqB,CACxB,OAAyB,EAAA;QAEzB,MAAM,YAAY,GAAgD,CAAA,CAAE,CAAC;QACrE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,SAAU,GAAG,EAAA;YAClC,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;YAC9B,YAAY,CAAC,GAAG,CAAC,GAAG;gBAChB,eAAe,EAAE,QAAQ,CAAC,aAAa;gBACvC,WAAW,EAAE,QAAQ,CAAC,WAAW;gBACjC,eAAe,EAAE,QAAQ,CAAC,cAAc;gBACxC,SAAS,EAAE,QAAQ,CAAC,QAAQ;gBAC5B,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,SAAS,EAAE,QAAQ,CAAC,QAAQ;gBAC5B,UAAU,EAAE,QAAQ,CAAC,SAAS;gBAC9B,mBAAmB,EAAE,QAAQ,CAAC,iBAAiB;gBAC/C,UAAU,EAAE,QAAQ,CAAC,SAAS;gBAC9B,MAAM,EAAE,QAAQ,CAAC,KAAK;gBACtB,UAAU,EAAE,QAAQ,CAAC,SAAS;gBAC9B,eAAe,EAAE,QAAQ,CAAC,eAAe;gBACzC,mBAAmB,EAAE,QAAQ,CAAC,mBAAmB;gBACjD,iBAAiB,EAAE,QAAQ,CAAC,iBAAiB;aAChD,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC;KACvB;IAED;;;KAGG,GACH,OAAO,sBAAsB,CACzB,OAA0B,EAAA;QAE1B,MAAM,aAAa,GAAiD,CAAA,CAAE,CAAC;QACvE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,SAAU,GAAG,EAAA;YAClC,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;YAC9B,aAAa,CAAC,GAAG,CAAC,GAAG;gBACjB,eAAe,EAAE,QAAQ,CAAC,aAAa;gBACvC,WAAW,EAAE,QAAQ,CAAC,WAAW;gBACjC,eAAe,EAAE,QAAQ,CAAC,cAAc;gBACxC,SAAS,EAAE,QAAQ,CAAC,QAAQ;gBAC5B,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,SAAS,EAAE,QAAQ,CAAC,QAAQ;gBAC5B,MAAM,EAAE,QAAQ,CAAC,MAAM;gBACvB,KAAK,EAAE,QAAQ,CAAC,KAAK;aACxB,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,OAAO,aAAa,CAAC;KACxB;IAED;;;KAGG,GACH,OAAO,oBAAoB,CACvB,SAA2B,EAAA;QAE3B,MAAM,WAAW,GAAgD,CAAA,CAAE,CAAC;QACpE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,SAAU,GAAG,EAAA;YACpC,MAAM,UAAU,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;YAClC,WAAW,CAAC,GAAG,CAAC,GAAG;gBACf,SAAS,EAAE,UAAU,CAAC,QAAQ;gBAC9B,WAAW,EAAE,UAAU,CAAC,WAAW;gBACnC,SAAS,EAAE,UAAU,CAAC,QAAQ;aACjC,CAAC;QACN,CAAC,CAAC,CAAC;QAEH,OAAO,WAAW,CAAC;KACtB;IAED;;;KAGG,GACH,OAAO,iBAAiB,CAAC,UAAyB,EAAA;QAC9C,OAAO;YACH,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,QAAQ,CAAC;YACpD,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,QAAQ,CAAC;YACpD,WAAW,EAAE,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,YAAY,CAAC;YAChE,YAAY,EAAE,IAAI,CAAC,sBAAsB,CAAC,UAAU,CAAC,aAAa,CAAC;YACnE,WAAW,EAAE,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,CAAC;SACjE,CAAC;KACL;AACJ;ACrLD,2CAAA,GAEA;;;CAGA,GACA,MAAMA,WAAS,GAAG;IACd,YAAY,EAAE,SAAS;IACvB,GAAG,EAAE,gBAAgB;IACzB,oBAAA;IACI,iBAAiB,EAAE,2CAA2C;IAC9D,sBAAsB,EAAE,2BAA2B;IACnD,qBAAqB,EAAE,QAAQ;IACnC,cAAA;IACI,IAAI,EAAE,MAAM;IACZ,IAAI,EAAE,QAAQ;IAClB,0CAAA;IACI,4BAA4B,EAAE,qGAAqG;IACvI,WAAA;IACI,aAAa,EAAE,gBAAgB;IAC/B,wBAAwB,EAAE,kBAAkB;IAChD,sDAAA;IACI,cAAc,EAAE,GAAG;IACvB,mDAAA;IACI,UAAU,EAAE,YAAY;IAC5B,SAAA;IACI,MAAM,EAAE,QAAQ;IACpB,gBAAA;IACI,aAAa,EAAE,sCAAsC;IACzD,iBAAA;IACI,YAAY,EAAE,QAAQ;IACtB,aAAa,EAAE,SAAS;IACxB,oBAAoB,EAAE,gBAAgB;IACtC,WAAW,EAAE,OAAO;IACpB,eAAe,EAAE,oBAAoB;IACrC,aAAa,EAAE,eAAe;IAC9B,0BAA0B,EAAE,MAAM;IAClC,qBAAqB,EAAE,iDAAiD;IACxE,qBAAqB,EAAE,uBAAuB;IAC9C,WAAW,EAAE,aAAa;IAC1B,YAAY,EAAE,EAAE;IAChB,cAAc,EAAE,KAAK;IACrB,aAAa,EAAE,eAAe;IAC9B,aAAa,EAAE,GAAG;IAClB,aAAa,EAAE,2DAA2D;IAC1E,YAAY,EAAE,YAAY;IAC1B,YAAY,EAAE,IAAI;IAClB,+BAA+B,EAAE,eAAe;IAChD,iCAAiC,EAAE,qBAAqB;IACxD,mBAAmB,EAAE;QACjB,2BAA2B;QAC3B,mBAAmB;QACnB,qBAAqB;QACrB,iBAAiB;KACpB;IACD,kBAAkB,EAAE,GAAG;IACvB,gBAAgB,EAAE,kBAAkB;AACxC,CAAC,CAAC;AACF,MAAM,UAAU,GAAG;IACf,OAAO,EAAE,GAAG;IACZ,mBAAmB,EAAE,GAAG;IACxB,iBAAiB,EAAE,GAAG;IACtB,QAAQ,EAAE,GAAG;IACb,YAAY,EAAE,GAAG;IACjB,wBAAwB,EAAE,GAAG;IAC7B,WAAW,EAAE,GAAG;IAChB,YAAY,EAAE,GAAG;IACjB,SAAS,EAAE,GAAG;IACd,eAAe,EAAE,GAAG;IACpB,IAAI,EAAE,GAAG;IACT,iBAAiB,EAAE,GAAG;IACtB,sBAAsB,EAAE,GAAG;IAC3B,YAAY,EAAE,GAAG;IACjB,wBAAwB,EAAE,GAAG;IAC7B,mBAAmB,EAAE,GAAG;IACxB,eAAe,EAAE,GAAG;IACpB,sBAAsB,EAAE,GAAG;IAC3B,iBAAiB,EAAE,GAAG;AAC1B,CAAC,CAAC;AAKF,MAAM,mBAAmB,GAAG;IACxBA,WAAS,CAAC,YAAY;IACtBA,WAAS,CAAC,aAAa;IACvBA,WAAS,CAAC,oBAAoB;CACjC,CAAC;AACF,MAAM,WAAW,GAAG,CAAC;OAAG,mBAAmB;IAAEA,WAAS,CAAC,WAAW;CAAC,CAAC;AACpE;;CAEA,GACA,MAAM,WAAW,GAAG;IAChB,YAAY,EAAE,cAAc;IAC5B,cAAc,EAAE,gBAAgB;IAChC,WAAW,EAAE,aAAa;IAC1B,UAAU,EAAE,iBAAiB;IAC7B,eAAe,EAAE,kBAAkB;IACnC,kBAAkB,EAAE,qBAAqB;IACzC,eAAe,EAAE,iBAAiB;IAClC,iBAAiB,EAAE,cAAc;AACrC,CAAC,CAAC;AAOF;;CAEA,GACA,MAAM,qBAAqB,GAAG;IAC1B,MAAM,EAAE,QAAQ;IAChB,aAAa,EAAE,eAAe;IAC9B,SAAS,EAAE,WAAW;AAC1B,CAAC,CAAC;AACF;;CAEA,GACA,MAAM,iBAAiB,GAAG;IACtB,YAAY,EAAE,cAAc;IAC5B,MAAM,EAAE,QAAQ;AACpB,CAAC,CAAC;AACF;;;;CAIA,GACK,MAAC,WAAW,GAAG;IAChB,KAAK,EAAE,OAAO;IACd,cAAc,EAAE,gBAAgB;IAChC,OAAO,EAAE,SAAS;IAClB,IAAI,EAAE,MAAM;IACZ,MAAM,EAAE,QAAQ;IAChB,UAAU,EAAE,YAAY;AAC5B,EAAE;AACF;;CAEA,GACA,MAAM,yBAAyB,GAAG;IAC9B,KAAK,EAAE,OAAO;IACd,IAAI,EAAE,MAAM;AAChB,CAAC,CAAC;AACF;;CAEA,GACA,MAAM,iBAAiB,GAAG;IACtB,IAAI,EAAE,MAAM;IACZ,aAAa,EAAE;AAEnB,CAAC,CAAC;AASF;;CAEA,GACK,MAAC,YAAY,GAAG;IACjB,KAAK,EAAE,OAAO;IACd,QAAQ,EAAE,UAAU;IACpB,SAAS,EAAE,WAAW;AAC1B,EAAE;AACF;;CAEA,GACA,MAAM,SAAS,GAAG;IAEd,wBAAwB,EAAE,oBAAoB;IAC9C,wBAAwB,EAAE,oBAAoB;IAC9C,6BAA6B,EAAE,UAAU;IACzC,mBAAmB,EAAE,eAAe;IACpC,iBAAiB,EAAE,aAAa;IAChC,UAAU,EAAE,6CAA6C;AAC7D,CAAC,CAAC;AACF;;CAEA,GACA,MAAM,gBAAgB,GAAG;IACrB,kBAAkB,EAAE,OAAO;IAC3B,iBAAiB,EAAE,MAAM;IAEzB,oBAAoB,EAAE,SAAS;AACnC,CAAC,CAAC;AACF;;CAEA,GACA,MAAM,UAAU,GAAG;IACf,mBAAmB,EAAE,GAAG;IACxB,qBAAqB,EAAE,GAAG;AAC9B,CAAC,CAAC;AACF;;CAEA,GACA,MAAM,cAAc,GAAG;IACnB,QAAQ,EAAE,SAAS;IACnB,YAAY,EAAE,aAAa;IAC3B,6BAA6B,EAAE,6BAA6B;IAC5D,aAAa,EAAE,cAAc;AACjC,CAAC,CAAC;AAeF;;CAEA,GACA,MAAM,YAAY,GAAG,aAAa,CAAC;AACnC,MAAM,WAAW,GAAG,aAAa,CAAC;AAClC,MAAM,aAAa,GAAG,GAAG,CAAC;AAC1B,MAAM,4BAA4B,GAAG;IACjC,SAAS,EAAE,oBAAoB;IAC/B,oBAAoB,EAAE,IAAI,GAAG,EAAE;AACnC,CAAC,CAAC;AACF,MAAM,uBAAuB,GAAG;IAC5B,MAAM,EAAE,QAAQ;IAChB,KAAK,EAAE,OAAO;IACd,OAAO,EAAE,SAAS;IAClB,gBAAgB,EAAE,kBAAkB;AACxC,CAAC,CAAC;AACF,MAAM,sBAAsB,GAAG;IAC3B,cAAc,EAAE,CAAC;IACjB,qBAAqB,EAAE,GAAG;IAC1B,iBAAiB,EAAE,EAAE;IACrB,SAAS,EAAE,kBAAkB;IAC7B,kBAAkB,EAAE,GAAG;IACvB,eAAe,EAAE,GAAG;IACpB,aAAa,EAAE,GAAG;IAClB,cAAc,EAAE,GAAG;IACnB,aAAa,EAAE,eAAe;AAClC,CAAC,CAAC;AACF;;CAEA,GACA,MAAM,oBAAoB,GAAG;IACzB,MAAM,EAAE,QAAQ;IAChB,GAAG,EAAE,KAAK;IACV,GAAG,EAAE,UAAU;AACnB,CAAC,CAAC;AACF;;CAEA,GACA,MAAM,mBAAmB,GAAG;IAC5B,wDAAA;IACI,6BAA6B,EAAE,EAAE;IACrC,oFAAA;IACI,iCAAiC,EAAE,IAAI;IAC3C,wCAAA;IACI,iBAAiB,EAAE,YAAY;IACnC,6GAAA;IACI,yBAAyB,EAAE,mBAAmB;AAClD,CAAC,CAAC;AACF,MAAM,MAAM,GAAG;IACX,mBAAmB,EAAE,eAAe;IACpC,qBAAqB,EAAE,iBAAiB;AAC5C,CAAC,CAAC;AACF;;CAEA,GACA,MAAM,sBAAsB,GAAG;IAC3B,QAAQ,EAAE,UAAU;IACpB,QAAQ,EAAE,UAAU;AACxB,CAAC,CAAC;AACF;;CAEA,GACA,MAAM,sBAAsB,GAAG;IAC3B,qBAAqB,EAAE,GAAG;IAC1B,cAAc,EAAE,GAAG;IACnB,oBAAoB,EAAE,GAAG;IACzB,IAAI,EAAE,GAAG;AACb,CAAC,CAAC;AACF;;CAEA,GACA,MAAM,uBAAuB,GAAG;IAC5B,4BAA4B,EAAE,GAAG;IACjC,mCAAmC,EAAE,GAAG;IACxC,+BAA+B,EAAE,GAAG;AACxC,CAAC,CAAC;AACF;;CAEA,GACA,MAAM,YAAY,GAAG;IACrB,oGAAA;IACI,cAAc,EAAE,GAAG;IACvB,mIAAA;IACI,uBAAuB,EAAE,GAAG;IAChC,6FAAA;IACI,sBAAsB,EAAE,GAAG;IAC/B,2FAAA;IACI,2BAA2B,EAAE,GAAG;IACpC,gIAAA;IACI,qBAAqB,EAAE,GAAG;AAC9B,CAAC,CAAC;AAOF,0CAAA;AACA,MAAM,gCAAgC,GAAG,GAAG,CAAC;AAC7C,MAAM,aAAa,GAAG;IAClB,MAAM,EAAE,QAAQ;IAChB,GAAG,EAAE,KAAK;IACV,IAAI,EAAE,OAAO;AACjB,CAAC;ACjUD,2CAAA,GAEA;;;CAGA,GACA;;CAEA,GACA,MAAM,eAAe,GAAG,kBAAkB,CAAC;AAC3C,MAAM,iBAAiB,GAAG,qBAAqB;;;;;;ACV/C,2CAAA,GAOA;;;CAGA,GACA,MAAM,iBAAiB,GAAG;IACtB,CAAC,eAAe,CAAA,EAAG,qCAAqC;IACxD,CAAC,iBAAiB,CAAA,EAAG,sIAAsI;AAC/J,CAAC,CAAC;AACF;;;CAGA,GACK,MAAC,gBAAgB,GAAG;IACrB,eAAe,EAAE;QACb,IAAI,EAAE,eAAe;QACrB,IAAI,EAAE,iBAAiB,CAAC,eAAe,CAAC;IAChD,CAAK;IACD,iBAAiB,EAAE;QACf,IAAI,EAAE,iBAAiB;QACvB,IAAI,EAAE,iBAAiB,CAAC,iBAAiB,CAAC;IAClD,CAAK;AACL,EAAE;AACF;;CAEA,GACA,MAAM,SAAS,SAAS,KAAK,CAAC;IAC1B,WAAW,CAAC,SAAS,EAAE,YAAY,EAAE,QAAQ,CAAE;QAC3C,MAAM,WAAW,GAAG,YAAY,GAC1B,CAAC,EAAE,SAAS,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC,GAC/B,SAAS,CAAC;QAChB,KAAK,CAAC,WAAW,CAAC,CAAC;QACnB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC;QACjD,IAAI,CAAC,SAAS,GAAG,SAAS,IAAIA,WAAS,CAAC,YAAY,CAAC;QACrD,IAAI,CAAC,YAAY,GAAG,YAAY,IAAIA,WAAS,CAAC,YAAY,CAAC;QAC3D,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAIA,WAAS,CAAC,YAAY,CAAC;QACnD,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC;IAChC,CAAK;IACD,gBAAgB,CAAC,aAAa,EAAE;QAC5B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IAC3C,CAAK;AACL,CAAC;AACD,SAAS,eAAe,CAAC,IAAI,EAAE,iBAAiB,EAAE;IAC9C,OAAO,IAAI,SAAS,CAAC,IAAI,EAAE,iBAAiB,GACtC,CAAC,EAAE,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,GACjD,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;AACnC;ACpDA,2CAAA,GAEA;;;CAGA,GACA,MAAM,uBAAuB,GAAG,4BAA4B,CAAC;AAC7D,MAAM,oBAAoB,GAAG,yBAAyB,CAAC;AACvD,MAAM,iBAAiB,GAAG,qBAAqB,CAAC;AAChD,MAAM,gBAAgB,GAAG,qBAAqB,CAAC;AAC/C,MAAM,uBAAuB,GAAG,4BAA4B,CAAC;AAC7D,MAAM,YAAY,GAAG,eAAe,CAAC;AACrC,MAAM,iBAAiB,GAAG,qBAAqB,CAAC;AAChD,MAAM,mBAAmB,GAAG,uBAAuB,CAAC;AACpD,MAAM,YAAY,GAAG,eAAe,CAAC;AACrC,MAAM,aAAa,GAAG,gBAAgB,CAAC;AACvC,MAAM,aAAa,GAAG,iBAAiB,CAAC;AACxC,MAAM,aAAa,GAAG,gBAAgB,CAAC;AACvC,MAAM,gBAAgB,GAAG,qBAAqB,CAAC;AAC/C,MAAM,gBAAgB,GAAG,oBAAoB,CAAC;AAC9C,MAAM,sBAAsB,GAAG,0BAA0B,CAAC;AAC1D,MAAM,wBAAwB,GAAG,4BAA4B,CAAC;AAC9D,MAAM,2BAA2B,GAAG,+BAA+B,CAAC;AACpE,MAAM,mBAAmB,GAAG,wBAAwB,CAAC;AACrD,MAAM,sBAAsB,GAAG,2BAA2B,CAAC;AAC3D,MAAM,oBAAoB,GAAG,wBAAwB,CAAC;AACtD,MAAM,kBAAkB,GAAG,sBAAsB,CAAC;AAClD,MAAM,0BAA0B,GAAG,+BAA+B,CAAC;AACnE,MAAM,iBAAiB,GAAG,qBAAqB,CAAC;AAChD,MAAM,sBAAsB,GAAG,2BAA2B,CAAC;AAC3D,MAAM,wBAAwB,GAAG,8BAA8B,CAAC;AAChE,MAAM,kBAAkB,GAAG,sBAAsB,CAAC;AAClD,MAAM,uBAAuB,GAAG,2BAA2B,CAAC;AAC5D,MAAM,cAAc,GAAG,kBAAkB,CAAC;AAC1C,MAAM,cAAc,GAAG,kBAAkB,CAAC;AAC1C,MAAM,wBAAwB,GAAG,4BAA4B,CAAC;AAC9D,MAAM,gBAAgB,GAAG,mBAAmB,CAAC;AAC7C,MAAM,uBAAuB,GAAG,2BAA2B,CAAC;AAC5D,MAAM,oBAAoB,GAAG,wBAAwB,CAAC;AACtD,MAAM,kBAAkB,GAAG,sBAAsB,CAAC;AAClD,MAAM,kCAAkC,GAAG,yCAAyC,CAAC;AACrF,MAAM,0CAA0C,GAAG,iDAAiD,CAAC;AACrG,MAAM,oBAAoB,GAAG,yBAAyB,CAAC;AACvD,MAAM,8BAA8B,GAAG,oCAAoC,CAAC;AAC5E,MAAM,YAAY,GAAG,gBAAgB,CAAC;AACtC,MAAM,qBAAqB,GAAG,yBAAyB,CAAC;AACxD,MAAM,YAAY,GAAG,eAAe,CAAC;AACrC,MAAM,oBAAoB,GAAG,yBAAyB,CAAC;AACvD,MAAM,oBAAoB,GAAG,wBAAwB,CAAC;AACtD,MAAM,2BAA2B,GAAG,iCAAiC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDrE,2CAAA,GAOA;;;CAGA,GACA;;CAEA,GACA,MAAM,uBAAuB,GAAG;IAC5B,CAAC,uBAAuB,CAAA,EAAG,uDAAuD;IAClF,CAAC,oBAAoB,CAAA,EAAG,2BAA2B;IACnD,CAAC,iBAAiB,CAAA,EAAG,wBAAwB;IAC7C,CAAC,gBAAgB,CAAA,EAAG,4BAA4B;IAChD,CAAC,uBAAuB,CAAA,EAAG,8BAA8B;IACzD,CAAC,YAAY,CAAA,EAAG,wBAAwB;IACxC,CAAC,iBAAiB,CAAA,EAAG,6IAA6I;IAClK,CAAC,mBAAmB,CAAA,EAAG,+CAA+C;IACtE,CAAC,YAAY,CAAA,EAAG,mCAAmC;IACnD,CAAC,aAAa,CAAA,EAAG,sBAAsB;IACvC,CAAC,aAAa,CAAA,EAAG,iBAAiB;IAClC,CAAC,aAAa,CAAA,EAAG,sBAAsB;IACvC,CAAC,gBAAgB,CAAA,EAAG,2EAA2E,GAC3F,qFAAqF,GACrF,kEAAkE;IACtE,CAAC,gBAAgB,CAAA,EAAG,2FAA2F;IAC/G,CAAC,sBAAsB,CAAA,EAAG,kEAAkE,GACxF,mFAAmF;IACvF,CAAC,wBAAwB,CAAA,EAAG,2HAA2H;IACvJ,CAAC,2BAA2B,CAAA,EAAG,kIAAkI;IACjK,CAAC,mBAAmB,CAAA,EAAG,2EAA2E;IAClG,CAAC,sBAAsB,CAAA,EAAG,iDAAiD;IAC3E,CAAC,oBAAoB,CAAA,EAAG,wBAAwB;IAChD,CAAC,kBAAkB,CAAA,EAAG,0CAA0C;IAChE,CAAC,0BAA0B,CAAA,EAAG,iHAAiH;IAC/I,CAAC,iBAAiB,CAAA,EAAG,yBAAyB;IAC9C,CAAC,sBAAsB,CAAA,EAAG,kDAAkD;IAC5E,CAAC,wBAAwB,CAAA,EAAG,yFAAyF;IACrH,CAAC,kBAAkB,CAAA,EAAG,4CAA4C;IAClE,CAAC,uBAAuB,CAAA,EAAG,2DAA2D;IACtF,CAAC,cAAc,CAAA,EAAG,0CAA0C;IAC5D,CAAC,cAAc,CAAA,EAAG,4BAA4B;IAC9C,CAAC,wBAAwB,CAAA,EAAG,6BAA6B;IACzD,CAAC,gBAAgB,CAAA,EAAG,0FAA0F;IAC9G,CAAC,uBAAuB,CAAA,EAAG,gKAAgK;IAC3L,CAAC,oBAAoB,CAAA,EAAG,oOAAoO;IAC5P,CAAC,kBAAkB,CAAA,EAAG,sDAAsD;IAC5E,CAAC,kCAAkC,CAAA,EAAG,iEAAiE;IACvG,CAAC,0CAA0C,CAAA,EAAG,mEAAmE;IACjH,CAAC,oBAAoB,CAAA,EAAG,6DAA6D;IACrF,CAAC,8BAA8B,CAAA,EAAG,gDAAgD;IAClF,CAAC,YAAY,CAAA,EAAG,uIAAuI;IACvJ,CAAC,qBAAqB,CAAA,EAAG,0DAA0D;IACnF,CAAC,YAAY,CAAA,EAAG,0BAA0B;IAC1C,CAAC,oBAAoB,CAAA,EAAG,mHAAmH;IAC3I,CAAC,oBAAoB,CAAA,EAAG,sCAAsC;IAC9D,CAAC,2BAA2B,CAAA,EAAG,wCAAwC;AAC3E,CAAC,CAAC;AACF;;;CAGA,GACK,MAAC,sBAAsB,GAAG;IAC3B,uBAAuB,EAAE;QACrB,IAAI,EAAE,uBAAuB;QAC7B,IAAI,EAAE,uBAAuB,CAAC,uBAAuB,CAAC;IAC9D,CAAK;IACD,oBAAoB,EAAE;QAClB,IAAI,EAAE,oBAAoB;QAC1B,IAAI,EAAE,uBAAuB,CAAC,oBAAoB,CAAC;IAC3D,CAAK;IACD,iBAAiB,EAAE;QACf,IAAI,EAAE,iBAAiB;QACvB,IAAI,EAAE,uBAAuB,CAAC,iBAAiB,CAAC;IACxD,CAAK;IACD,gBAAgB,EAAE;QACd,IAAI,EAAE,gBAAgB;QACtB,IAAI,EAAE,uBAAuB,CAAC,gBAAgB,CAAC;IACvD,CAAK;IACD,uBAAuB,EAAE;QACrB,IAAI,EAAE,uBAAuB;QAC7B,IAAI,EAAE,uBAAuB,CAAC,uBAAuB,CAAC;IAC9D,CAAK;IACD,YAAY,EAAE;QACV,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE,uBAAuB,CAAC,YAAY,CAAC;IACnD,CAAK;IACD,4BAA4B,EAAE;QAC1B,IAAI,EAAE,iBAAiB;QACvB,IAAI,EAAE,uBAAuB,CAAC,iBAAiB,CAAC;IACxD,CAAK;IACD,mBAAmB,EAAE;QACjB,IAAI,EAAE,mBAAmB;QACzB,IAAI,EAAE,uBAAuB,CAAC,mBAAmB,CAAC;IAC1D,CAAK;IACD,iBAAiB,EAAE;QACf,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE,uBAAuB,CAAC,YAAY,CAAC;IACnD,CAAK;IACD,kBAAkB,EAAE;QAChB,IAAI,EAAE,aAAa;QACnB,IAAI,EAAE,uBAAuB,CAAC,aAAa,CAAC;IACpD,CAAK;IACD,kBAAkB,EAAE;QAChB,IAAI,EAAE,aAAa;QACnB,IAAI,EAAE,uBAAuB,CAAC,aAAa,CAAC;IACpD,CAAK;IACD,kBAAkB,EAAE;QAChB,IAAI,EAAE,aAAa;QACnB,IAAI,EAAE,uBAAuB,CAAC,aAAa,CAAC;IACpD,CAAK;IACD,qBAAqB,EAAE;QACnB,IAAI,EAAE,gBAAgB;QACtB,IAAI,EAAE,uBAAuB,CAAC,gBAAgB,CAAC;IACvD,CAAK;IACD,gBAAgB,EAAE;QACd,IAAI,EAAE,gBAAgB;QACtB,IAAI,EAAE,uBAAuB,CAAC,gBAAgB,CAAC;IACvD,CAAK;IACD,sBAAsB,EAAE;QACpB,IAAI,EAAE,sBAAsB;QAC5B,IAAI,EAAE,uBAAuB,CAAC,sBAAsB,CAAC;IAC7D,CAAK;IACD,wBAAwB,EAAE;QACtB,IAAI,EAAE,wBAAwB;QAC9B,IAAI,EAAE,uBAAuB,CAAC,wBAAwB,CAAC;IAC/D,CAAK;IACD,2BAA2B,EAAE;QACzB,IAAI,EAAE,2BAA2B;QACjC,IAAI,EAAE,uBAAuB,CAAC,2BAA2B,CAAC;IAClE,CAAK;IACD,wBAAwB,EAAE;QACtB,IAAI,EAAE,mBAAmB;QACzB,IAAI,EAAE,uBAAuB,CAAC,mBAAmB,CAAC;IAC1D,CAAK;IACD,qBAAqB,EAAE;QACnB,IAAI,EAAE,sBAAsB;QAC5B,IAAI,EAAE,uBAAuB,CAAC,sBAAsB,CAAC;IAC7D,CAAK;IACD,mBAAmB,EAAE;QACjB,IAAI,EAAE,oBAAoB;QAC1B,IAAI,EAAE,uBAAuB,CAAC,oBAAoB,CAAC;IAC3D,CAAK;IACD,uBAAuB,EAAE;QACrB,IAAI,EAAE,kBAAkB;QACxB,IAAI,EAAE,uBAAuB,CAAC,kBAAkB,CAAC;IACzD,CAAK;IACD,0BAA0B,EAAE;QACxB,IAAI,EAAE,0BAA0B;QAChC,IAAI,EAAE,uBAAuB,CAAC,0BAA0B,CAAC;IACjE,CAAK;IACD,iBAAiB,EAAE;QACf,IAAI,EAAE,iBAAiB;QACvB,IAAI,EAAE,uBAAuB,CAAC,iBAAiB,CAAC;IACxD,CAAK;IACD,sBAAsB,EAAE;QACpB,IAAI,EAAE,sBAAsB;QAC5B,IAAI,EAAE,uBAAuB,CAAC,sBAAsB,CAAC;IAC7D,CAAK;IACD,wBAAwB,EAAE;QACtB,IAAI,EAAE,wBAAwB;QAC9B,IAAI,EAAE,uBAAuB,CAAC,wBAAwB,CAAC;IAC/D,CAAK;IACD,kBAAkB,EAAE;QAChB,IAAI,EAAE,kBAAkB;QACxB,IAAI,EAAE,uBAAuB,CAAC,kBAAkB,CAAC;IACzD,CAAK;IACD,uBAAuB,EAAE;QACrB,IAAI,EAAE,uBAAuB;QAC7B,IAAI,EAAE,uBAAuB,CAAC,uBAAuB,CAAC;IAC9D,CAAK;IACD,cAAc,EAAE;QACZ,IAAI,EAAE,cAAc;QACpB,IAAI,EAAE,uBAAuB,CAAC,cAAc,CAAC;IACrD,CAAK;IACD,WAAW,EAAE;QACT,IAAI,EAAE,cAAc;QACpB,IAAI,EAAE,uBAAuB,CAAC,cAAc,CAAC;IACrD,CAAK;IACD,wBAAwB,EAAE;QACtB,IAAI,EAAE,wBAAwB;QAC9B,IAAI,EAAE,uBAAuB,CAAC,wBAAwB,CAAC;IAC/D,CAAK;IACD,gBAAgB,EAAE;QACd,IAAI,EAAE,gBAAgB;QACtB,IAAI,EAAE,uBAAuB,CAAC,gBAAgB,CAAC;IACvD,CAAK;IACD,uBAAuB,EAAE;QACrB,IAAI,EAAE,uBAAuB;QAC7B,IAAI,EAAE,uBAAuB,CAAC,uBAAuB,CAAC;IAC9D,CAAK;IACD,oBAAoB,EAAE;QAClB,IAAI,EAAE,oBAAoB;QAC1B,IAAI,EAAE,uBAAuB,CAAC,oBAAoB,CAAC;IAC3D,CAAK;IACD,kBAAkB,EAAE;QAChB,IAAI,EAAE,kBAAkB;QACxB,IAAI,EAAE,uBAAuB,CAAC,kBAAkB,CAAC;IACzD,CAAK;IACD,mBAAmB,EAAE;QACjB,IAAI,EAAE,kCAAkC;QACxC,IAAI,EAAE,uBAAuB,CAAC,kCAAkC,CAAC;IACzE,CAAK;IACD,6BAA6B,EAAE;QAC3B,IAAI,EAAE,0CAA0C;QAChD,IAAI,EAAE,uBAAuB,CAAC,0CAA0C,CAAC;IACjF,CAAK;IACD,yBAAyB,EAAE;QACvB,IAAI,EAAE,oBAAoB;QAC1B,IAAI,EAAE,uBAAuB,CAAC,oBAAoB,CAAC;IAC3D,CAAK;IACD,kBAAkB,EAAE;QAChB,IAAI,EAAE,8BAA8B;QACpC,IAAI,EAAE,uBAAuB,CAAC,8BAA8B,CAAC;IACrE,CAAK;IACD,YAAY,EAAE;QACV,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE,uBAAuB,CAAC,YAAY,CAAC;IACnD,CAAK;IACD,qBAAqB,EAAE;QACnB,IAAI,EAAE,qBAAqB;QAC3B,IAAI,EAAE,uBAAuB,CAAC,qBAAqB,CAAC;IAC5D,CAAK;IACD,iBAAiB,EAAE;QACf,IAAI,EAAE,YAAY;QAClB,IAAI,EAAE,uBAAuB,CAAC,YAAY,CAAC;IACnD,CAAK;IACD,oBAAoB,EAAE;QAClB,IAAI,EAAE,oBAAoB;QAC1B,IAAI,EAAE,uBAAuB,CAAC,oBAAoB,CAAC;IAC3D,CAAK;IACD,2BAA2B,EAAE;QACzB,IAAI,EAAE,2BAA2B;QACjC,IAAI,EAAE,uBAAuB,CAAC,2BAA2B,CAAC;IAClE,CAAK;AACL,EAAE;AACF;;CAEA,GACA,MAAM,eAAe,SAAS,SAAS,CAAC;IACpC,WAAW,CAAC,SAAS,EAAE,iBAAiB,CAAE;QACtC,KAAK,CAAC,SAAS,EAAE,iBAAiB,GAC5B,CAAC,EAAE,uBAAuB,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC,GAC7D,uBAAuB,CAAC,SAAS,CAAC,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC;QAC9B,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,eAAe,CAAC,SAAS,CAAC,CAAC;IAC/D,CAAK;AACL,CAAC;AACD,SAAS,qBAAqB,CAAC,SAAS,EAAE,iBAAiB,EAAE;IACzD,OAAO,IAAI,eAAe,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC;AAC7D;AC/PA,2CAAA,GAKA;;;CAGA,GACA,MAAM,6BAA6B,GAAG;IAClC,aAAa,EAAE,MAAM;QACjB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,YAAY,EAAE,MAAM;QAChB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,YAAY,EAAE,MAAM;QAChB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,eAAe,EAAE,MAAM;QACnB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,SAAS,EAAE,MAAM;QACb,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,MAAM,sBAAsB,GAAG;QAC3B,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,MAAM,qBAAqB,GAAG;QAC1B,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,MAAM,aAAa,GAAG;QAClB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,MAAM,OAAO,GAAG;QACZ,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,MAAM,UAAU,GAAG;QACf,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;AACL,CAAC;ACxCD,2CAAA,GAIA;;;CAGA,GACA;;CAEA,GACIC,QAAAA,QAAAA,GAAAA,KAAAA,EAAS;AACb,CAAC,SAAU,QAAQ,EAAE;IACjB,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;IAC1C,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IAC9C,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC;IACxC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;IAC9C,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;AAC9C,CAAC,EAAEA,QAAAA,QAAQ,IAAA,CAAKA,QAAAA,QAAQ,GAAG,CAAA,CAAE,CAAC,CAAC,CAAC;AAChC;;CAEA,GACA,MAAM,MAAM,CAAC;IACT,WAAW,CAAC,aAAa,EAAE,WAAW,EAAE,cAAc,CAAE;QAC5D,uCAAA;QACQ,IAAI,CAAC,KAAK,GAAGA,QAAAA,QAAQ,CAAC,IAAI,CAAC;QAC3B,MAAM,qBAAqB,GAAG,MAAM;YAChC,OAAO;QACnB,CAAS,CAAC;QACF,MAAM,gBAAgB,GAAG,aAAa,IAAI,MAAM,CAAC,0BAA0B,EAAE,CAAC;QAC9E,IAAI,CAAC,aAAa,GACd,gBAAgB,CAAC,cAAc,IAAI,qBAAqB,CAAC;QAC7D,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC,iBAAiB,IAAI,KAAK,CAAC;QACrE,IAAI,CAAC,KAAK,GACN,OAAO,gBAAgB,CAAC,QAAQ,KAAK,QAAQ,GACvC,gBAAgB,CAAC,QAAQ,GACzBA,QAAAA,QAAQ,CAAC,IAAI,CAAC;QACxB,IAAI,CAAC,aAAa,GACd,gBAAgB,CAAC,aAAa,IAAID,WAAS,CAAC,YAAY,CAAC;QAC7D,IAAI,CAAC,WAAW,GAAG,WAAW,IAAIA,WAAS,CAAC,YAAY,CAAC;QACzD,IAAI,CAAC,cAAc,GAAG,cAAc,IAAIA,WAAS,CAAC,YAAY,CAAC;IACvE,CAAK;IACD,OAAO,0BAA0B,GAAG;QAChC,OAAO;YACH,cAAc,EAAE,MAAM;YAClC,wCAAA;YACA,CAAa;YACD,iBAAiB,EAAE,KAAK;YACxB,QAAQ,EAAEC,QAAAA,QAAQ,CAAC,IAAI;QACnC,CAAS,CAAC;IACV,CAAK;IACL;;KAEA,GACI,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,aAAa,EAAE;QAC9C,OAAO,IAAI,MAAM,CAAC;YACd,cAAc,EAAE,IAAI,CAAC,aAAa;YAClC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,QAAQ,EAAE,IAAI,CAAC,KAAK;YACpB,aAAa,EAAE,aAAa,IAAI,IAAI,CAAC,aAAa;QAC9D,CAAS,EAAE,WAAW,EAAE,cAAc,CAAC,CAAC;IACxC,CAAK;IACL;;KAEA,GACI,UAAU,CAAC,UAAU,EAAE,OAAO,EAAE;QAC5B,IAAI,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,IAC5B,CAAC,IAAI,CAAC,iBAAiB,IAAI,OAAO,CAAC,WAAW,CAAC,CAAE;YAClD,OAAO;QACnB,CAAS;QACD,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QACnD,2FAAA;QACQ,MAAM,SAAS,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,KAAK,EAAE,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5F,MAAM,GAAG,GAAG,CAAC,EAAE,SAAS,CAAC,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,GAAG,EAAEA,QAAAA,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC,CAAC;QAChI,qLAAA;QACQ,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,OAAO,CAAC,WAAW,IAAI,KAAK,CAAC,CAAC;IAClF,CAAK;IACL;;KAEA,GACI,eAAe,CAAC,KAAK,EAAE,OAAO,EAAE,WAAW,EAAE;QACzC,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;QAC5D,CAAS;IACT,CAAK;IACL;;KAEA,GACI,KAAK,CAAC,OAAO,EAAE,aAAa,EAAE;QAC1B,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACrB,QAAQ,EAAEA,QAAAA,QAAQ,CAAC,KAAK;YACxB,WAAW,EAAE,KAAK;YAClB,aAAa,EAAE,aAAa,IAAID,WAAS,CAAC,YAAY;QAClE,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;KAEA,GACI,QAAQ,CAAC,OAAO,EAAE,aAAa,EAAE;QAC7B,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACrB,QAAQ,EAAEC,QAAAA,QAAQ,CAAC,KAAK;YACxB,WAAW,EAAE,IAAI;YACjB,aAAa,EAAE,aAAa,IAAID,WAAS,CAAC,YAAY;QAClE,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;KAEA,GACI,OAAO,CAAC,OAAO,EAAE,aAAa,EAAE;QAC5B,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACrB,QAAQ,EAAEC,QAAAA,QAAQ,CAAC,OAAO;YAC1B,WAAW,EAAE,KAAK;YAClB,aAAa,EAAE,aAAa,IAAID,WAAS,CAAC,YAAY;QAClE,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;KAEA,GACI,UAAU,CAAC,OAAO,EAAE,aAAa,EAAE;QAC/B,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACrB,QAAQ,EAAEC,QAAAA,QAAQ,CAAC,OAAO;YAC1B,WAAW,EAAE,IAAI;YACjB,aAAa,EAAE,aAAa,IAAID,WAAS,CAAC,YAAY;QAClE,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;KAEA,GACI,IAAI,CAAC,OAAO,EAAE,aAAa,EAAE;QACzB,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACrB,QAAQ,EAAEC,QAAAA,QAAQ,CAAC,IAAI;YACvB,WAAW,EAAE,KAAK;YAClB,aAAa,EAAE,aAAa,IAAID,WAAS,CAAC,YAAY;QAClE,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;KAEA,GACI,OAAO,CAAC,OAAO,EAAE,aAAa,EAAE;QAC5B,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACrB,QAAQ,EAAEC,QAAAA,QAAQ,CAAC,IAAI;YACvB,WAAW,EAAE,IAAI;YACjB,aAAa,EAAE,aAAa,IAAID,WAAS,CAAC,YAAY;QAClE,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;KAEA,GACI,OAAO,CAAC,OAAO,EAAE,aAAa,EAAE;QAC5B,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACrB,QAAQ,EAAEC,QAAAA,QAAQ,CAAC,OAAO;YAC1B,WAAW,EAAE,KAAK;YAClB,aAAa,EAAE,aAAa,IAAID,WAAS,CAAC,YAAY;QAClE,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;KAEA,GACI,UAAU,CAAC,OAAO,EAAE,aAAa,EAAE;QAC/B,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACrB,QAAQ,EAAEC,QAAAA,QAAQ,CAAC,OAAO;YAC1B,WAAW,EAAE,IAAI;YACjB,aAAa,EAAE,aAAa,IAAID,WAAS,CAAC,YAAY;QAClE,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;KAEA,GACI,KAAK,CAAC,OAAO,EAAE,aAAa,EAAE;QAC1B,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACrB,QAAQ,EAAEC,QAAAA,QAAQ,CAAC,KAAK;YACxB,WAAW,EAAE,KAAK;YAClB,aAAa,EAAE,aAAa,IAAID,WAAS,CAAC,YAAY;QAClE,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;KAEA,GACI,QAAQ,CAAC,OAAO,EAAE,aAAa,EAAE;QAC7B,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;YACrB,QAAQ,EAAEC,QAAAA,QAAQ,CAAC,KAAK;YACxB,WAAW,EAAE,IAAI;YACjB,aAAa,EAAE,aAAa,IAAID,WAAS,CAAC,YAAY;QAClE,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;KAEA,GACI,mBAAmB,GAAG;QAClB,OAAO,IAAI,CAAC,iBAAiB,IAAI,KAAK,CAAC;IAC/C,CAAK;AACL;AC/LA,2CAAA,GAEA,gCAAA,GACA,MAAME,MAAI,GAAG,oBAAoB,CAAC;AAClC,MAAMC,SAAO,GAAG,SAAS;ACJzB,2CAAA,GAEA;;;CAGA,GACK,MAAC,kBAAkB,GAAG;IAC3B,uCAAA;IACI,IAAI,EAAE,MAAM;IAChB,+BAAA;IACI,WAAW,EAAE,mCAAmC;IACpD,gBAAA;IACI,QAAQ,EAAE,+BAA+B;IAC7C,4CAAA;IACI,UAAU,EAAE,gCAAgC;IAChD,4DAAA;IACI,YAAY,EAAE,kCAAkC;IACpD,sBAAA;IACI,iBAAiB,EAAE,kCAAkC;AACzD;ACnBA,2CAAA,GAEA;;;CAGA,GACA,MAAM,gBAAgB,GAAG,oBAAoB,CAAC;AAC9C,MAAM,yBAAyB,GAAG,8BAA8B,CAAC;AACjE,MAAM,oBAAoB,GAAG,wBAAwB,CAAC;AACtD,MAAM,aAAa,GAAG,iBAAiB,CAAC;AACxC,MAAM,aAAa,GAAG,iBAAiB,CAAC;AACxC,MAAM,qBAAqB,GAAG,0BAA0B,CAAC;AACzD,MAAM,aAAa,GAAG,gBAAgB,CAAC;AACvC,MAAM,iBAAiB,GAAG,qBAAqB,CAAC;AAChD,MAAM,kBAAkB,GAAG,sBAAsB,CAAC;AAClD,MAAM,0BAA0B,GAAG,+BAA+B,CAAC;AACnE,MAAM,iBAAiB,GAAG,qBAAqB,CAAC;AAChD,MAAM,6BAA6B,GAAG,kCAAkC,CAAC;AACzE,MAAM,wBAAwB,GAAG,4BAA4B,CAAC;AAC9D,MAAM,kBAAkB,GAAG,qBAAqB,CAAC;AACjD,MAAM,aAAa,GAAG,iBAAiB,CAAC;AACxC,MAAM,aAAa,GAAG,iBAAiB,CAAC;AACxC,MAAM,gCAAgC,GAAG,qCAAqC,CAAC;AAC/E,MAAM,2BAA2B,GAAG,+BAA+B,CAAC;AACpE,MAAM,oBAAoB,GAAG,wBAAwB,CAAC;AACtD,MAAM,yBAAyB,GAAG,8BAA8B,CAAC;AACjE,MAAM,iBAAiB,GAAG,oBAAoB,CAAC;AAC/C,MAAM,0BAA0B,GAAG,gCAAgC,CAAC;AACpE,MAAM,kCAAkC,GAAG,wCAAwC;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BnF,2CAAA,GAOA;;;CAGA,GACA,MAAM,gCAAgC,GAAG;IACrC,CAAC,gBAAgB,CAAA,EAAG,kEAAkE;IACtF,CAAC,yBAAyB,CAAA,EAAG,kDAAkD;IAC/E,CAAC,oBAAoB,CAAA,EAAG,2NAA2N;IACnP,CAAC,aAAa,CAAA,EAAG,oDAAoD;IACrE,CAAC,aAAa,CAAA,EAAG,wBAAwB;IACzC,CAAC,qBAAqB,CAAA,EAAG,gHAAgH;IACzI,CAAC,aAAa,CAAA,EAAG,2DAA2D;IAC5E,CAAC,iBAAiB,CAAA,EAAG,iDAAiD;IACtE,CAAC,kBAAkB,CAAA,EAAG,2CAA2C;IACjE,CAAC,0BAA0B,CAAA,EAAG,+EAA+E;IAC7G,CAAC,iBAAiB,CAAA,EAAG,qGAAqG;IAC1H,CAAC,6BAA6B,CAAA,EAAG,qIAAqI;IACtK,CAAC,wBAAwB,CAAA,EAAG,yIAAyI;IACrK,CAAC,kBAAkB,CAAA,EAAG,4HAA4H;IAClJ,CAAC,aAAa,CAAA,EAAG,6HAA6H;IAC9I,CAAC,aAAa,CAAA,EAAG,uJAAuJ;IACxK,CAAC,gCAAgC,CAAA,EAAG,gLAAgL;IACpN,CAAC,2BAA2B,CAAA,EAAG,wCAAwC;IACvE,CAAC,oBAAoB,CAAA,EAAG,6GAA6G;IACrI,CAAC,yBAAyB,CAAA,EAAG,iFAAiF;IAC9G,CAAC,iBAAiB,CAAA,EAAG,kPAAkP;IACvQ,CAAC,kCAAkC,CAAA,EAAG,iLAAiL;IACvN,CAAC,0BAA0B,CAAA,EAAG,wJAAwJ;AAC1L,CAAC,CAAC;AACF;;;CAGA,GACK,MAAC,+BAA+B,GAAG;IACpC,iBAAiB,EAAE;QACf,IAAI,EAAE,gBAAgB;QACtB,IAAI,EAAE,gCAAgC,CAAC,gBAAgB,CAAC;IAChE,CAAK;IACD,yBAAyB,EAAE;QACvB,IAAI,EAAE,yBAAyB;QAC/B,IAAI,EAAE,gCAAgC,CAAC,yBAAyB,CAAC;IACzE,CAAK;IACD,oBAAoB,EAAE;QAClB,IAAI,EAAE,oBAAoB;QAC1B,IAAI,EAAE,gCAAgC,CAAC,oBAAoB,CAAC;IACpE,CAAK;IACD,aAAa,EAAE;QACX,IAAI,EAAE,aAAa;QACnB,IAAI,EAAE,gCAAgC,CAAC,aAAa,CAAC;IAC7D,CAAK;IACD,aAAa,EAAE;QACX,IAAI,EAAE,aAAa;QACnB,IAAI,EAAE,gCAAgC,CAAC,aAAa,CAAC;IAC7D,CAAK;IACD,gBAAgB,EAAE;QACd,IAAI,EAAE,qBAAqB;QAC3B,IAAI,EAAE,gCAAgC,CAAC,qBAAqB,CAAC;IACrE,CAAK;IACD,oBAAoB,EAAE;QAClB,IAAI,EAAE,aAAa;QACnB,IAAI,EAAE,gCAAgC,CAAC,aAAa,CAAC;IAC7D,CAAK;IACD,sBAAsB,EAAE;QACpB,IAAI,EAAE,iBAAiB;QACvB,IAAI,EAAE,gCAAgC,CAAC,iBAAiB,CAAC;IACjE,CAAK;IACD,uBAAuB,EAAE;QACrB,IAAI,EAAE,kBAAkB;QACxB,IAAI,EAAE,gCAAgC,CAAC,kBAAkB,CAAC;IAClE,CAAK;IACD,0BAA0B,EAAE;QACxB,IAAI,EAAE,0BAA0B;QAChC,IAAI,EAAE,gCAAgC,CAAC,0BAA0B,CAAC;IAC1E,CAAK;IACD,0BAA0B,EAAE;QACxB,IAAI,EAAE,iBAAiB;QACvB,IAAI,EAAE,gCAAgC,CAAC,iBAAiB,CAAC;IACjE,CAAK;IACD,6BAA6B,EAAE;QAC3B,IAAI,EAAE,6BAA6B;QACnC,IAAI,EAAE,gCAAgC,CAAC,6BAA6B,CAAC;IAC7E,CAAK;IACD,wBAAwB,EAAE;QACtB,IAAI,EAAE,wBAAwB;QAC9B,IAAI,EAAE,gCAAgC,CAAC,wBAAwB,CAAC;IACxE,CAAK;IACD,kBAAkB,EAAE;QAChB,IAAI,EAAE,kBAAkB;QACxB,IAAI,EAAE,gCAAgC,CAAC,kBAAkB,CAAC;IAClE,CAAK;IACD,aAAa,EAAE;QACX,IAAI,EAAE,aAAa;QACnB,IAAI,EAAE,gCAAgC,CAAC,aAAa,CAAC;IAC7D,CAAK;IACD,aAAa,EAAE;QACX,IAAI,EAAE,aAAa;QACnB,IAAI,EAAE,gCAAgC,CAAC,aAAa,CAAC;IAC7D,CAAK;IACD,gCAAgC,EAAE;QAC9B,IAAI,EAAE,gCAAgC;QACtC,IAAI,EAAE,gCAAgC,CAAC,gCAAgC,CAAC;IAChF,CAAK;IACD,2BAA2B,EAAE;QACzB,IAAI,EAAE,2BAA2B;QACjC,IAAI,EAAE,gCAAgC,CAAC,2BAA2B,CAAC;IAC3E,CAAK;IACD,oBAAoB,EAAE;QAClB,IAAI,EAAE,oBAAoB;QAC1B,IAAI,EAAE,gCAAgC,CAAC,oBAAoB,CAAC;IACpE,CAAK;IACD,yBAAyB,EAAE;QACvB,IAAI,EAAE,yBAAyB;QAC/B,IAAI,EAAE,gCAAgC,CAAC,yBAAyB,CAAC;IACzE,CAAK;IACD,iBAAiB,EAAE;QACf,IAAI,EAAE,iBAAiB;QACvB,IAAI,EAAE,gCAAgC,CAAC,iBAAiB,CAAC;IACjE,CAAK;IACD,kCAAkC,EAAE;QAChC,IAAI,EAAE,kCAAkC;QACxC,IAAI,EAAE,gCAAgC,CAAC,kCAAkC,CAAC;IAClF,CAAK;IACD,0BAA0B,EAAE;QACxB,IAAI,EAAE,0BAA0B;QAChC,IAAI,EAAE,gCAAgC,CAAC,0BAA0B,CAAC;IAC1E,CAAK;AACL,EAAE;AACF;;CAEA,GACA,MAAM,wBAAwB,SAAS,SAAS,CAAC;IAC7C,WAAW,CAAC,SAAS,CAAE;QACnB,KAAK,CAAC,SAAS,EAAE,gCAAgC,CAAC,SAAS,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,IAAI,GAAG,0BAA0B,CAAC;QACvC,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,wBAAwB,CAAC,SAAS,CAAC,CAAC;IACxE,CAAK;AACL,CAAC;AACD,SAAS,8BAA8B,CAAC,SAAS,EAAE;IAC/C,OAAO,IAAI,wBAAwB,CAAC,SAAS,CAAC,CAAC;AACnD;AClJA,2CAAA,GAEA;;;CAGA,GACA;;CAEA,GACA,MAAM,WAAW,CAAC;IAClB;;;KAGA,GACI,OAAO,UAAU,CAAC,MAAM,EAAE;QACtB,IAAI,MAAM,EAAE;YACR,IAAI;gBACA,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBAC/B,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC;YACrD,CAAa,CACD,OAAO,CAAC,EAAE,CAAA,CAAG;QACzB,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,OAAO,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE;QAC3B,OAAO,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACzC,CAAK;IACD,OAAO,QAAQ,CAAC,GAAG,EAAE,MAAM,EAAE;QACzB,OAAQ,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,IAC/B,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE;IACpE,CAAK;IACL;;;;KAIA,GACI,OAAO,mBAAmB,CAAC,KAAK,EAAE;QAC9B,MAAM,GAAG,GAAG,CAAA,CAAE,CAAC;QACf,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,MAAM,GAAG,CAAC,CAAC,GAAK,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;QAChE,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK;YACrB,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE;gBACb,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAA,oDAAA;gBAC7C,IAAI,GAAG,IAAI,KAAK,EAAE;oBACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;gBACrD,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,GAAG,CAAC;IACnB,CAAK;IACL;;;;KAIA,GACI,OAAO,gBAAgB,CAAC,GAAG,EAAE;QACzB,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,GAAK,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;IAChD,CAAK;IACL;;;KAGA,GACI,OAAO,2BAA2B,CAAC,GAAG,EAAE;QACpC,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,KAAK,KAAK;YACzB,OAAO,CAAC,CAAC,KAAK,CAAC;QAC3B,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;KAGA,GACI,OAAO,eAAe,CAAC,GAAG,EAAE;QACxB,IAAI;YACA,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnC,CAAS,CACD,OAAO,CAAC,EAAE;YACN,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;IACL;;;;KAIA,GACI,OAAO,YAAY,CAAC,OAAO,EAAE,KAAK,EAAE;QACxC;;;SAGA,GACA,8DAAA;QACQ,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,OAAO,CAC3B,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CACtB,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CACvB,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;QAC5B,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACjC,CAAK;AACL;AChGA,2CAAA,GASA;;;CAGA,GACA;;;;CAIA,GACA,MAAM,QAAQ,CAAC;IACX,WAAW,CAAC,WAAW,CAAE;QAC7B,qDAAA;QACQ,MAAM,QAAQ,GAAG,WAAW,GACtB,WAAW,CAAC,gBAAgB,CAAC,CAAC;eAAG,WAAW;SAAC,CAAC,GAC9C,EAAE,CAAC;QACT,MAAM,aAAa,GAAG,QAAQ,GACxB,WAAW,CAAC,2BAA2B,CAAC,QAAQ,CAAC,GACjD,EAAE,CAAC;QACjB,gDAAA;QACQ,IAAI,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YACzC,MAAM,8BAA8B,CAAC,qBAAqB,CAAC,CAAC;QACxE,CAAS;QACD,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC,CAAA,gDAAA;QACxB,aAAa,CAAC,OAAO,CAAC,CAAC,KAAK,GAAK,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;IACjE,CAAK;IACL;;;;;KAKA,GACI,OAAO,UAAU,CAAC,gBAAgB,EAAE;QAChC,MAAM,WAAW,GAAG,gBAAgB,IAAIH,WAAS,CAAC,YAAY,CAAC;QAC/D,MAAM,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3C,OAAO,IAAI,QAAQ,CAAC,WAAW,CAAC,CAAC;IACzC,CAAK;IACL;;;;KAIA,GACI,OAAO,kBAAkB,CAAC,gBAAgB,EAAE;QAChD,oEAAA;QACQ,MAAM,WAAW,GAAG,gBAAgB,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,GAC7D,gBAAgB,GAChB,CAAC;eAAG,mBAAmB;SAAC,CAAC;QAC/B,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC3C,IAAI,CAAC,QAAQ,CAAC,sBAAsB,EAAE,EAAE;YACpC,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QACxC,CAAS,MACI;YACD,QAAQ,CAAC,WAAW,CAACA,WAAS,CAAC,oBAAoB,CAAC,CAAC;QACjE,CAAS;QACD,OAAO,QAAQ,CAAC;IACxB,CAAK;IACL;;;KAGA,GACI,aAAa,CAAC,KAAK,EAAE;QACjB,MAAM,eAAe,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/D,MAAM,kBAAkB,GAAG,IAAI,QAAQ,CAAC,eAAe,CAAC,CAAC;QACjE,2BAAA;QACQ,OAAO,KAAK,GACN,kBAAkB,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,GAClD,KAAK,CAAC;IACpB,CAAK;IACL;;;KAGA,GACI,gBAAgB,CAAC,QAAQ,EAAE;QACvB,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,EAAE;YACxC,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,OAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,IAC5C,QAAQ,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK,GAAK,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE;IAC5E,CAAK;IACL;;KAEA,GACI,sBAAsB,GAAG;QACrB,IAAI,iBAAiB,GAAG,CAAC,CAAC;QAC1B,WAAW,CAAC,OAAO,CAAC,CAAC,YAAY,KAAK;YAClC,IAAI,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE;gBAClC,iBAAiB,IAAI,CAAC,CAAC;YACvC,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,iBAAiB,CAAC;IACtD,CAAK;IACL;;;KAGA,GACI,WAAW,CAAC,QAAQ,EAAE;QAClB,IAAI,QAAQ,EAAE;YACV,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;QAC7C,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,YAAY,CAAC,SAAS,EAAE;QACpB,IAAI;YACA,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,GAAK,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;QACxE,CAAS,CACD,OAAO,CAAC,EAAE;YACN,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;QAC9D,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,WAAW,CAAC,KAAK,EAAE;QACf,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,qBAAqB,CAAC,sBAAsB,CAAC,CAAC;QAChE,CAAS;QACD,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;IACzC,CAAK;IACL;;;KAGA,GACI,gBAAgB,GAAG;QACf,WAAW,CAAC,OAAO,CAAC,CAAC,YAAY,KAAK;YAClC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QAC7C,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;KAGA,GACI,cAAc,CAAC,WAAW,EAAE;QACxB,IAAI,CAAC,WAAW,EAAE;YACd,MAAM,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;QAC5D,CAAS;QACD,MAAM,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC,CAAA,gDAAA;QAC9B,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,GAAK,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,GAAK,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QACrE,OAAO,WAAW,CAAC;IAC3B,CAAK;IACL;;;KAGA,GACI,qBAAqB,CAAC,WAAW,EAAE;QAC/B,IAAI,CAAC,WAAW,EAAE;YACd,MAAM,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;QAC5D,CAAS;QACT,8DAAA;QACQ,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAAE,EAAE;YACvC,WAAW,CAAC,gBAAgB,EAAE,CAAC;QAC3C,CAAS;QACD,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;QACrD,MAAM,eAAe,GAAG,WAAW,CAAC,aAAa,EAAE,CAAC;QACpD,MAAM,cAAc,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;QAC5C,MAAM,eAAe,GAAG,WAAW,CAAC,IAAI,CAAC;QACzC,OAAO,eAAe,GAAG,cAAc,GAAG,eAAe,CAAC;IAClE,CAAK;IACL;;KAEA,GACI,aAAa,GAAG;QACZ,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;IAChC,CAAK;IACL;;KAEA,GACI,OAAO,GAAG;QACN,MAAM,KAAK,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,GAAK,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9C,OAAO,KAAK,CAAC;IACrB,CAAK;IACL;;KAEA,GACI,WAAW,GAAG;QACV,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAChC,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtC,CAAS;QACD,OAAOA,WAAS,CAAC,YAAY,CAAC;IACtC,CAAK;IACL;;KAEA,GACI,oBAAoB,GAAG;QACnB,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,WAAW,EAAE,CAAC;IAChD,CAAK;AACL;ACxMA,2CAAA,GAEA;;;CAGA,GACA;;;;;CAKA,GACA,SAAS,yBAAyB,CAAC,QAAQ,EAAE,aAAa,EAAE;IACxD,OAAQ,CAAC,CAAC,QAAQ,IACd,CAAC,CAAC,aAAa,IACf,QAAQ,KAAK,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;AAClD,CAAC;AACD;;;;;;;CAOA,GACA,SAAS,kBAAkB,CAAC,aAAa,EAAE,cAAc,EAAE,QAAQ,EAAE,aAAa,EAAE;IAChF,IAAI,aAAa,EAAE;QACf,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,kBAAkB,EAAE,GAAG,EAAE,UAAU,EAAG,GAAG,aAAa,CAAC;QACtG;;;;;SAKA,GACQ,MAAM,QAAQ,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC;QACzC,OAAO;YACH,QAAQ,EAAE,QAAQ;YAClB,cAAc,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE;YAChC,IAAI,EAAE,IAAI;YACV,QAAQ,EAAE,kBAAkB,IAAI,GAAG,IAAI,EAAE;YACzC,SAAS,EAAE,UAAU;YACrB,YAAY,EAAE,yBAAyB,CAAC,QAAQ,EAAE,aAAa,CAAC;QAC5E,CAAS,CAAC;IACV,CAAK,MACI;QACD,OAAO;YACH,QAAQ;YACR,cAAc;YACd,QAAQ,EAAE,EAAE;YACZ,YAAY,EAAE,yBAAyB,CAAC,QAAQ,EAAE,aAAa,CAAC;QAC5E,CAAS,CAAC;IACV,CAAK;AACL,CAAC;AACD;;;;;CAKA,GACA,SAAS,8BAA8B,CAAC,eAAe,EAAE,aAAa,EAAE,aAAa,EAAE,aAAa,EAAE;IAClG,IAAI,kBAAkB,GAAG,eAAe,CAAC;IAC7C,kDAAA;IACI,IAAI,aAAa,EAAE;QACvB,6DAAA;QACQ,MAAM,EAAE,YAAY,EAAE,GAAG,qBAAqB,EAAE,GAAG,aAAa,CAAC;QACjE,kBAAkB,GAAG;YAAE,GAAG,eAAe;YAAE,GAAG,qBAAqB;QAAA,CAAE,CAAC;IAC9E,CAAK;IACL,qEAAA;IACI,IAAI,aAAa,EAAE;QACvB,qGAAA;QACA,6DAAA;QACQ,MAAM,EAAE,YAAY,EAAE,GAAG,0BAA0B,EAAE,GAAG,kBAAkB,CAAC,eAAe,CAAC,aAAa,EAAE,eAAe,CAAC,cAAc,EAAE,eAAe,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;QACnL,kBAAkB,GAAG;YACjB,GAAG,kBAAkB;YACrB,GAAG,0BAA0B;YAC7B,aAAa,EAAE,aAAa;YAC5B,OAAO,EAAE,aAAa;QAClC,CAAS,CAAC;QACF,OAAO,kBAAkB,CAAC;IAClC,CAAK;IACD,OAAO,kBAAkB,CAAC;AAC9B;ACjFA,2CAAA,GAKA;;;CAGA,GACA;;;;CAIA,GACA,SAAS,kBAAkB,CAAC,YAAY,EAAE,YAAY,EAAE;IACpD,MAAM,UAAU,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;IACnD,4CAAA;IACI,IAAI;QACR,4DAAA;QACQ,MAAM,aAAa,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC;QAC/C,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACzC,CAAK,CACD,OAAO,GAAG,EAAE;QACR,MAAM,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;IACvD,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,SAAS,aAAa,CAAC,SAAS,EAAE;IAC9B,IAAI,CAAC,SAAS,EAAE;QACZ,MAAM,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;IACtD,CAAK;IACD,MAAM,eAAe,GAAG,sCAAsC,CAAC;IAC/D,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAChD,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;QAChC,MAAM,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;IACvD,CAAK;IACL;;;;;;KAMA,GACI,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;AACtB,CAAC;AACD;;CAEA,GACA,SAAS,WAAW,CAAC,QAAQ,EAAE,MAAM,EAAE;IACvC;;;;KAIA,GACI,MAAM,cAAc,GAAG,MAAM,CAAC,CAAA,+BAAA;IAC9B,IAAI,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,cAAc,GAAG,QAAQ,GAAG,MAAM,EAAE;QACjE,MAAM,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;IACtD,CAAK;AACL;AC9DA,2CAAA,GAgCA;;;CAGA,GACA,SAAS,uBAAuB,CAAC,cAAc,EAAE;IAC7C,IAAI,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;QACjC,OAAO,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAK,MACI,IAAI,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,IACnC,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QAChC,OAAO,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IAC3C,CAAK;IACD,OAAO,cAAc,CAAC;AAC1B,CAAC;AACD;;CAEA,GACA,SAAS,uBAAuB,CAAC,cAAc,EAAE;IACjD,+BAAA;IACI,IAAI,CAAC,cAAc,IAAI,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;QACpD,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,IAAI;QACR,qCAAA;QACQ,MAAM,kBAAkB,GAAG,uBAAuB,CAAC,cAAc,CAAC,CAAC;QAC3E,2FAAA;QACQ,MAAM,gBAAgB,GAAG,MAAM,CAAC,WAAW,CAAC,IAAI,eAAe,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAC7F,sCAAA;QACQ,IAAI,gBAAgB,CAAC,IAAI,IACrB,gBAAgB,CAAC,OAAO,IACxB,gBAAgB,CAAC,KAAK,IACtB,gBAAgB,CAAC,iBAAiB,IAClC,gBAAgB,CAAC,KAAK,EAAE;YACxB,OAAO,gBAAgB,CAAC;QACpC,CAAS;IACT,CAAK,CACD,OAAO,CAAC,EAAE;QACN,MAAM,qBAAqB,CAAC,mBAAmB,CAAC,CAAC;IACzD,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD;;CAEA,GACA,SAAS,gBAAgB,CAAC,UAAU,EAAE,iBAAiB,GAAG,IAAI,EAAE,oBAAoB,EAAE;IAClF,MAAM,mBAAmB,GAAG,IAAI,KAAK,EAAE,CAAC;IACxC,UAAU,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,KAAK;QAC/B,IAAI,CAAC,iBAAiB,IAClB,oBAAoB,IACpB,GAAG,IAAI,oBAAoB,EAAE;YAC7B,mBAAmB,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QACxD,CAAS,MACI;YACD,mBAAmB,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,CAAS;IACT,CAAK,CAAC,CAAC;IACH,OAAO,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzC;ACzFA,2CAAA,GAQA;;;CAGA,GACA;;CAEA,GACA,MAAM,SAAS,CAAC;IACZ,IAAI,SAAS,GAAG;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC;IAC/B,CAAK;IACD,WAAW,CAAC,GAAG,CAAE;QACb,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;QACtB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAC9B,+BAAA;YACY,MAAM,8BAA8B,CAAC,aAAa,CAAC,CAAC;QAChE,CAAS;QACD,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACpB,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC7D,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,OAAO,eAAe,CAAC,GAAG,EAAE;QACxB,IAAI,GAAG,EAAE;YACL,IAAI,YAAY,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;YACrC,IAAI,WAAW,CAAC,QAAQ,CAAC,YAAY,EAAE,GAAG,CAAC,EAAE;gBACzC,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,CAAA,CAAE,CAAC,CAAC;YACzD,CAAa,MACI,IAAI,WAAW,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE;gBAC/C,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,CAAA,CAAE,CAAC,CAAC;YACzD,CAAa;YACD,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,EAAE,GAAG,CAAC,EAAE;gBAC1C,YAAY,IAAI,GAAG,CAAC;YACpC,CAAa;YACD,OAAO,YAAY,CAAC;QAChC,CAAS;QACD,OAAO,GAAG,CAAC;IACnB,CAAK;IACL;;KAEA,GACI,aAAa,GAAG;QACpB,2CAAA;QACQ,IAAI,UAAU,CAAC;QACf,IAAI;YACA,UAAU,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACjD,CAAS,CACD,OAAO,CAAC,EAAE;YACN,MAAM,8BAA8B,CAAC,aAAa,CAAC,CAAC;QAChE,CAAS;QACT,yDAAA;QACQ,IAAI,CAAC,UAAU,CAAC,eAAe,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE;YACzD,MAAM,8BAA8B,CAAC,aAAa,CAAC,CAAC;QAChE,CAAS;QACT,kCAAA;QACQ,IAAI,CAAC,UAAU,CAAC,QAAQ,IACpB,UAAU,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,QAAQ,EAAE;YAChD,MAAM,8BAA8B,CAAC,oBAAoB,CAAC,CAAC;QACvE,CAAS;IACT,CAAK;IACL;;;;KAIA,GACI,OAAO,iBAAiB,CAAC,GAAG,EAAE,WAAW,EAAE;QACvC,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,GAAG,CAAC;QACvB,CAAS;QACD,OAAO,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GACrB,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,GACvB,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;IACtC,CAAK;IACL;;;KAGA,GACI,OAAO,iBAAiB,CAAC,GAAG,EAAE;QAC1B,OAAO,SAAS,CAAC,eAAe,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5D,CAAK;IACL;;;;KAIA,GACI,iBAAiB,CAAC,QAAQ,EAAE;QACxB,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1C,MAAM,SAAS,GAAG,SAAS,CAAC,YAAY,CAAC;QACzC,IAAI,QAAQ,IACR,SAAS,CAAC,MAAM,KAAK,CAAC,IAClC,CAAa,SAAS,CAAC,CAAC,CAAC,KAAK,qBAAqB,CAAC,MAAM,IAC1C,SAAS,CAAC,CAAC,CAAC,KAAK,qBAAqB,CAAC,aAAa,CAAC,EAAE;YAC3D,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;QACpC,CAAS;QACD,OAAO,SAAS,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAC;IACpE,CAAK;IACL;;;KAGA,GACI,gBAAgB,GAAG;QACvB,uDAAA;QACQ,MAAM,KAAK,GAAG,MAAM,CAAC,4DAA4D,CAAC,CAAC;QAC3F,wDAAA;QACQ,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,8BAA8B,CAAC,aAAa,CAAC,CAAC;QAChE,CAAS;QACT,uBAAA;QACQ,MAAM,aAAa,GAAG;YAClB,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;YAClB,eAAe,EAAE,KAAK,CAAC,CAAC,CAAC;YACzB,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC;YACtB,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC;QACjC,CAAS,CAAC;QACF,IAAI,YAAY,GAAG,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACzD,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,GAAK,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAA,wBAAA;QACnE,aAAa,CAAC,YAAY,GAAG,YAAY,CAAC;QAC1C,IAAI,aAAa,CAAC,WAAW,IACzB,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YACzC,aAAa,CAAC,WAAW,GAAG,aAAa,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,aAAa,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACrH,CAAS;QACD,OAAO,aAAa,CAAC;IAC7B,CAAK;IACD,OAAO,gBAAgB,CAAC,GAAG,EAAE;QACzB,MAAM,KAAK,GAAG,MAAM,CAAC,0BAA0B,CAAC,CAAC;QACjD,MAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/B,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,8BAA8B,CAAC,aAAa,CAAC,CAAC;QAChE,CAAS;QACD,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;IACxB,CAAK;IACD,OAAO,cAAc,CAAC,WAAW,EAAE,OAAO,EAAE;QACxC,IAAI,WAAW,CAAC,CAAC,CAAC,KAAKA,WAAS,CAAC,aAAa,EAAE;YAC5C,MAAM,GAAG,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;YACnC,MAAM,cAAc,GAAG,GAAG,CAAC,gBAAgB,EAAE,CAAC;YAC9C,OAAQ,cAAc,CAAC,QAAQ,GAC3B,IAAI,GACJ,cAAc,CAAC,eAAe,GAC9B,WAAW,EAAE;QAC7B,CAAS;QACD,OAAO,WAAW,CAAC;IAC3B,CAAK;IACD,OAAO,+BAA+B,CAAC,SAAS,EAAE;QAC9C,OAAO,IAAI,SAAS,CAAC,SAAS,CAAC,QAAQ,GACnC,IAAI,GACJ,SAAS,CAAC,eAAe,GACzB,GAAG,GACH,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9C,CAAK;IACL;;;KAGA,GACI,OAAO,2BAA2B,CAAC,QAAQ,EAAE;QACzC,OAAO,CAAC,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;IACnD,CAAK;AACL;ACxKA,2CAAA,GAKA;;;CAGA,GACA,MAAM,cAAc,GAAG;IACnB,gBAAgB,EAAE;QACd,2BAA2B,EAAE;YACzB,cAAc,EAAE,gEAAgE;YAChF,QAAQ,EAAE,kEAAkE;YAC5E,MAAM,EAAE,mDAAmD;YAC3D,sBAAsB,EAAE,oEAAoE;YAC5F,oBAAoB,EAAE,iEAAiE;QACnG,CAAS;QACD,wBAAwB,EAAE;YACtB,cAAc,EAAE,6DAA6D;YAC7E,QAAQ,EAAE,+DAA+D;YACzE,MAAM,EAAE,0DAA0D;YAClE,sBAAsB,EAAE,iEAAiE;YACzF,oBAAoB,EAAE,8DAA8D;QAChG,CAAS;QACD,0BAA0B,EAAE;YACxB,cAAc,EAAE,+DAA+D;YAC/E,QAAQ,EAAE,iEAAiE;YAC3E,MAAM,EAAE,kDAAkD;YAC1D,sBAAsB,EAAE,mEAAmE;YAC3F,oBAAoB,EAAE,gEAAgE;QAClG,CAAS;IACT,CAAK;IACD,yBAAyB,EAAE;QACvB,QAAQ,EAAE;YACN;gBACI,iBAAiB,EAAE,2BAA2B;gBAC9C,eAAe,EAAE,mBAAmB;gBACpC,OAAO,EAAE;oBACL,2BAA2B;oBAC3B,mBAAmB;oBACnB,qBAAqB;oBACrB,iBAAiB;iBACpB;YACjB,CAAa;YACD;gBACI,iBAAiB,EAAE,kCAAkC;gBACrD,eAAe,EAAE,kCAAkC;gBACnD,OAAO,EAAE;oBACL,kCAAkC;oBAClC,wBAAwB;iBAC3B;YACjB,CAAa;YACD;gBACI,iBAAiB,EAAE,0BAA0B;gBAC7C,eAAe,EAAE,0BAA0B;gBAC3C,OAAO,EAAE;oBAAC,0BAA0B;iBAAC;YACrD,CAAa;YACD;gBACI,iBAAiB,EAAE,0BAA0B;gBAC7C,eAAe,EAAE,0BAA0B;gBAC3C,OAAO,EAAE;oBACL,0BAA0B;oBAC1B,yBAAyB;iBAC5B;YACjB,CAAa;YACD;gBACI,iBAAiB,EAAE,8BAA8B;gBACjD,eAAe,EAAE,8BAA8B;gBAC/C,OAAO,EAAE;oBAAC,8BAA8B;iBAAC;YACzD,CAAa;SACJ;IACT,CAAK;AACL,CAAC,CAAC;AACF,MAAM,gBAAgB,GAAG,cAAc,CAAC,gBAAgB,CAAC;AACzD,MAAM,yBAAyB,GAAG,cAAc,CAAC,yBAAyB,CAAC;AAC3E,MAAM,gCAAgC,GAAG,IAAI,GAAG,EAAE,CAAC;AACnD,yBAAyB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,aAAa,KAAK;IAC1D,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK;QACrC,gCAAgC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACpD,CAAK,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AACH;;;;;CAKA,GACA,SAAS,2BAA2B,CAAC,sBAAsB,EAAE,MAAM,EAAE;IACjE,IAAI,aAAa,CAAC;IAClB,MAAM,kBAAkB,GAAG,sBAAsB,CAAC,kBAAkB,CAAC;IACrE,IAAI,kBAAkB,EAAE;QACpB,MAAM,aAAa,GAAG,IAAI,SAAS,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,EAAE,CAAC,eAAe,CAAC;QAC3F,aAAa,GACT,sBAAsB,CAAC,aAAa,EAAE,sBAAsB,CAAC,sBAAsB,EAAE,QAAQ,EAAE,uBAAuB,CAAC,MAAM,EAAE,MAAM,CAAC,IAClI,sBAAsB,CAAC,aAAa,EAAE,yBAAyB,CAAC,QAAQ,EAAE,uBAAuB,CAAC,gBAAgB,EAAE,MAAM,CAAC,IAC3H,sBAAsB,CAAC,gBAAgB,CAAC;IACxD,CAAK;IACD,OAAO,aAAa,IAAI,EAAE,CAAC;AAC/B,CAAC;AACD;;;;;CAKA,GACA,SAAS,sBAAsB,CAAC,aAAa,EAAE,sBAAsB,EAAE,MAAM,EAAE,MAAM,EAAE;IACnF,MAAM,EAAE,KAAK,CAAC,CAAC,2CAA2C,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;IACtE,IAAI,aAAa,IAAI,sBAAsB,EAAE;QACzC,MAAM,QAAQ,GAAG,4CAA4C,CAAC,sBAAsB,EAAE,aAAa,CAAC,CAAC;QACrG,IAAI,QAAQ,EAAE;YACV,MAAM,EAAE,KAAK,CAAC,CAAC,0DAA0D,EAAE,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACxG,OAAO,QAAQ,CAAC,OAAO,CAAC;QACpC,CAAS,MACI;YACD,MAAM,EAAE,KAAK,CAAC,CAAC,iEAAiE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QACxG,CAAS;IACT,CAAK;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AACD;;CAEA,GACA,SAAS,4CAA4C,CAAC,aAAa,EAAE;IACjE,MAAM,QAAQ,GAAG,4CAA4C,CAAC,yBAAyB,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;IACjH,OAAO,QAAQ,CAAC;AACpB,CAAC;AACD;;;;CAIA,GACA,SAAS,4CAA4C,CAAC,QAAQ,EAAE,aAAa,EAAE;IAC3E,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QACtC,MAAM,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC7B,IAAI,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE;YAC1C,OAAO,QAAQ,CAAC;QAC5B,CAAS;IACT,CAAK;IACD,OAAO,IAAI,CAAC;AAChB;AC5IA,2CAAA,GAEA;;;CAGA,GACA,MAAM,kBAAkB,GAAG,sBAAsB,CAAC;AAClD,MAAM,iBAAiB,GAAG,qBAAqB;ACP/C,2CAAA,GAOA;;;CAGA,GACA,MAAM,kBAAkB,GAAG;IACvB,CAAC,kBAAkB,CAAA,EAAG,kCAAkC;IACxD,CAAC,iBAAiB,CAAA,EAAG,qDAAqD;AAC9E,CAAC,CAAC;AACF;;CAEA,GACA,MAAM,UAAU,SAAS,SAAS,CAAC;IAC/B,WAAW,CAAC,SAAS,EAAE,YAAY,CAAE;QACjC,MAAM,OAAO,GAAG,YAAY,IACpC,CAAa,kBAAkB,CAAC,SAAS,CAAC,GACxB,kBAAkB,CAAC,SAAS,CAAC,GAC7B,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACjD,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;QACzB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;IACpC,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,SAAS,gBAAgB,CAAC,CAAC,EAAE;IACzB,IAAI,CAAA,CAAE,CAAC,YAAY,KAAK,CAAC,EAAE;QACvB,OAAO,IAAI,UAAU,CAAC,iBAAiB,CAAC,CAAC;IACjD,CAAK;IACD,IAAI,CAAC,CAAC,IAAI,KAAK,oBAAoB,IAC/B,CAAC,CAAC,IAAI,KAAK,4BAA4B,IACvC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EAAE;QAC1C,OAAO,IAAI,UAAU,CAAC,kBAAkB,CAAC,CAAC;IAClD,CAAK,MACI;QACD,OAAO,IAAI,UAAU,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;IACjD,CAAK;AACL;AChDA,2CAAA,GAaA;;;CAGA,GACA;;;CAGA,GACA,MAAM,YAAY,CAAC;IACf,WAAW,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE,iBAAiB,EAAE,sBAAsB,CAAE;QACjF,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,KAAK,CAACE,MAAI,EAAEC,SAAO,CAAC,CAAC;QAChD,IAAI,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;QACrD,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IACnD,CAAK;IACL;;;;KAIA,GACI,cAAc,CAAC,aAAa,EAAE,aAAa,EAAE;QACzC,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,qBAAqB,CAAC,aAAa,EAAE,aAAa,CAAC,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;IAChI,CAAK;IACL;;KAEA,GACI,wBAAwB,CAAC,aAAa,EAAE,aAAa,EAAE;QACnD,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,KAAK,CAAC,IACvC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,GAAK,CAAC,KAAK,CAAC,EAAE;YACvD,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,8EAA8E,CAAC,CAAC;YAC1G,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;QACtE,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;YACpC,+EAAA;YACY,MAAM,cAAc,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,OAAO,KAAK;gBACjD,OAAO,OAAO,CAAC,aAAa,GAAG,CAAA,CAAE,GAAG,CAAC,CAAC;YACtD,CAAa,CAAC,CAAC;YACH,OAAO,cAAc,CAAC,CAAC,CAAC,CAAC;QACrC,CAAS,MACI,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3C,8FAAA;YACY,OAAO,WAAW,CAAC,CAAC,CAAC,CAAC;QAClC,CAAS,MACI;YACD,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;IACL;;;;KAIA,GACI,kBAAkB,CAAC,aAAa,EAAE,aAAa,EAAE;QAC7C,MAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;QACjF,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5B,OAAO,eAAe,CAAC,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;QACvD,CAAS,MACI;YACD,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;IACL;;;;;;KAMA,GACI,mBAAmB,CAAC,cAAc,EAAE,aAAa,EAAE,aAAa,EAAE;QAC9D,OAAO,cAAc,CAAC,OAAO,CAAC,CAAC,aAAa,KAAK;YAC7C,OAAO,IAAI,CAAC,kCAAkC,CAAC,aAAa,EAAE,aAAa,EAAE,aAAa,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;QACjI,CAAS,CAAC,CAAC;IACX,CAAK;IACD,8BAA8B,CAAC,WAAW,EAAE,SAAS,EAAE,aAAa,EAAE,aAAa,EAAE,mBAAmB,EAAE;QACtG,IAAI,mBAAmB,GAAG,IAAI,CAAC;QAC/B,IAAI,aAAa,CAAC;QAClB,IAAI,mBAAmB,EAAE;YACrB,IAAI,CAAC,IAAI,CAAC,0BAA0B,CAAC,aAAa,EAAE,mBAAmB,CAAC,EAAE;gBACtE,OAAO,IAAI,CAAC;YAC5B,CAAa;QACb,CAAS;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,aAAa,EAAE,SAAS,EAAE,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC/F,IAAI,OAAO,EAAE;YACT,aAAa,GAAG,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;YACjF,IAAI,CAAC,IAAI,CAAC,qCAAqC,CAAC,aAAa,EAAE,mBAAmB,CAAC,EAAE;gBACjG,4EAAA;gBACgB,OAAO,IAAI,CAAC;YAC5B,CAAa;QACb,CAAS;QACT,qHAAA;QACQ,mBAAmB,GAAG,8BAA8B,CAAC,WAAW,EAAE,aAAa,EAAE,aAAa,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QACjH,OAAO,mBAAmB,CAAC;IACnC,CAAK;IACD,kCAAkC,CAAC,aAAa,EAAE,aAAa,EAAE,cAAc,EAAE,mBAAmB,EAAE;QAClG,MAAM,WAAW,GAAG,aAAa,CAAC,cAAc,EAAE,CAAC;QACnD,IAAI,oBAAoB,GAAG,WAAW,CAAC,cAAc,IAAI,IAAI,GAAG,EAAE,CAAC;QACnE,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QAC9C,8FAAA;QACQ,IAAI,cAAc,EAAE;YAChB,MAAM,aAAa,GAAG,oBAAoB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAC/D,IAAI,aAAa,EAAE;gBAC/B,kDAAA;gBACgB,oBAAoB,GAAG,IAAI,GAAG,CAAC;oBAC3B;wBAAC,cAAc;wBAAE,aAAa;qBAAC;iBAClC,CAAC,CAAC;YACnB,CAAa,MACI;gBACjB,6DAAA;gBACgB,OAAO,EAAE,CAAC;YAC1B,CAAa;QACb,CAAS;QACD,MAAM,sBAAsB,GAAG,EAAE,CAAC;QAClC,oBAAoB,CAAC,OAAO,CAAC,CAAC,aAAa,KAAK;YAC5C,MAAM,mBAAmB,GAAG,IAAI,CAAC,8BAA8B,CAAC,WAAW,EAAE,SAAS,EAAE,aAAa,EAAE,aAAa,EAAE,mBAAmB,CAAC,CAAC;YAC3I,IAAI,mBAAmB,EAAE;gBACrB,sBAAsB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACjE,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,sBAAsB,CAAC;IACtC,CAAK;IACD,0BAA0B,CAAC,aAAa,EAAE,mBAAmB,EAAE;QAC3D,IAAI,CAAC,CAAC,mBAAmB,CAAC,cAAc,IACpC,CAAC,IAAI,CAAC,oCAAoC,CAAC,aAAa,EAAE,mBAAmB,CAAC,cAAc,CAAC,EAAE;YAC/F,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,CAAC,CAAC,mBAAmB,CAAC,IAAI,IAC1B,CAAA,CAAE,aAAa,CAAC,IAAI,KAAK,mBAAmB,CAAC,IAAI,CAAC,EAAE;YACpD,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,mBAAmB,CAAC,YAAY,KAAK,SAAS,IAC9C,CAAA,CAAE,aAAa,CAAC,YAAY,KAAK,mBAAmB,CAAC,YAAY,CAAC,EAAE;YACpE,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,qCAAqC,CAAC,aAAa,EAAE,mBAAmB,EAAE;QAC9E,2BAAA;QACQ,IAAI,mBAAmB,EAAE;YACrB,IAAI,CAAC,CAAC,mBAAmB,CAAC,cAAc,IACpC,CAAC,IAAI,CAAC,kCAAkC,CAAC,aAAa,EAAE,mBAAmB,CAAC,cAAc,CAAC,EAAE;gBAC7F,OAAO,KAAK,CAAC;YAC7B,CAAa;YACD,IAAI,CAAC,CAAC,mBAAmB,CAAC,SAAS,IAC/B,CAAC,IAAI,CAAC,6BAA6B,CAAC,aAAa,EAAE,mBAAmB,CAAC,SAAS,CAAC,EAAE;gBACnF,OAAO,KAAK,CAAC;YAC7B,CAAa;YACD,IAAI,CAAC,CAAC,mBAAmB,CAAC,QAAQ,IAC9B,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,kBAAkB,EAAE,mBAAmB,CAAC,QAAQ,CAAC,EAAE;gBACrF,OAAO,KAAK,CAAC;YAC7B,CAAa;YACD,IAAI,CAAC,CAAC,mBAAmB,CAAC,IAAI,IAC1B,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,mBAAmB,CAAC,IAAI,CAAC,EAAE;gBAC1D,OAAO,KAAK,CAAC;YAC7B,CAAa;YACD,IAAI,CAAC,CAAC,mBAAmB,CAAC,GAAG,IACzB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,mBAAmB,CAAC,GAAG,CAAC,EAAE;gBACxD,OAAO,KAAK,CAAC;YAC7B,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;;;KAKA,GACI,MAAM,eAAe,CAAC,WAAW,EAAE,aAAa,EAAE,YAAY,EAAE;QAC5D,IAAI,CAAC,WAAW,EAAE;YACd,MAAM,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;QAC5D,CAAS;QACD,IAAI;YACA,IAAI,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE;gBACvB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;YAC1E,CAAa;YACD,IAAI,CAAC,CAAC,WAAW,CAAC,OAAO,IAAI,YAAY,EAAE,OAAO,KAAK,KAAK,EAAE;gBAC1D,MAAM,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;YACpF,CAAa;YACD,IAAI,CAAC,CAAC,WAAW,CAAC,WAAW,IACzB,YAAY,EAAE,WAAW,KAAK,KAAK,EAAE;gBACrC,MAAM,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;YACnF,CAAa;YACD,IAAI,CAAC,CAAC,WAAW,CAAC,YAAY,IAC1B,YAAY,EAAE,YAAY,KAAK,KAAK,EAAE;gBACtC,MAAM,IAAI,CAAC,yBAAyB,CAAC,WAAW,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YAC9F,CAAa;YACD,IAAI,CAAC,CAAC,WAAW,CAAC,WAAW,EAAE;gBAC3B,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;YAC5E,CAAa;QACb,CAAS,CACD,OAAO,CAAC,EAAE;YACN,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,oCAAoC,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,YAAY,SAAS,EAAE;gBACxB,MAAM,CAAC,CAAC;YACxB,CAAa,MACI;gBACD,MAAM,gBAAgB,CAAC,CAAC,CAAC,CAAC;YAC1C,CAAa;QACb,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,MAAM,eAAe,CAAC,UAAU,EAAE,aAAa,EAAE;QAC7C,MAAM,iBAAiB,GAAG;YACtB,QAAQ,EAAE,UAAU,CAAC,QAAQ;YAC7B,cAAc,EAAE,UAAU,CAAC,cAAc;YACzC,WAAW,EAAE,UAAU,CAAC,WAAW;YACnC,aAAa,EAAE,UAAU,CAAC,aAAa;YACvC,KAAK,EAAE,UAAU,CAAC,KAAK;YACvB,SAAS,EAAE,UAAU,CAAC,SAAS;YAC/B,mBAAmB,EAAE,UAAU,CAAC,mBAAmB;QAC/D,CAAS,CAAC;QACF,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACtC,MAAM,aAAa,GAAG,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAC7D,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;YACnC,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,GAAG,EAAE,iBAAiB,EAAE,KAAK,CAAC,EAAE;gBAClE,OAAO;YACvB,CAAa;YACD,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;YACtE,IAAI,WAAW,IACX,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,iBAAiB,CAAC,EAAE;gBAC9D,MAAM,aAAa,GAAG,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBAC9D,IAAI,aAAa,CAAC,qBAAqB,CAAC,aAAa,CAAC,EAAE;oBACpD,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;gBAC/D,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC,CAAC;QACH,MAAM,IAAI,CAAC,wBAAwB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;IACvE,CAAK;IACL;;;;KAIA,GACI,qBAAqB,CAAC,aAAa,EAAE,aAAa,EAAE;QAChD,MAAM,cAAc,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC7C,MAAM,gBAAgB,GAAG,EAAE,CAAC;QAC5B,cAAc,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAK;YACjC,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;YACpE,4BAAA;YACY,IAAI,CAAC,MAAM,EAAE;gBACT,OAAO;YACvB,CAAa;YACD,IAAI,CAAC,CAAC,aAAa,CAAC,aAAa,IAC7B,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,aAAa,CAAC,aAAa,CAAC,EAAE;gBAC/D,OAAO;YACvB,CAAa;YACD,IAAI,CAAC,CAAC,aAAa,CAAC,QAAQ,IACxB,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,EAAE;gBAC9D,OAAO;YACvB,CAAa;YACD,IAAI,CAAC,CAAC,aAAa,CAAC,WAAW,IAC3B,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,aAAa,CAAC,WAAW,CAAC,EAAE;gBAC3D,OAAO;YACvB,CAAa;YACD,IAAI,CAAC,CAAC,aAAa,CAAC,KAAK,IACrB,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,KAAK,CAAC,EAAE;gBAC/C,OAAO;YACvB,CAAa;YACD,IAAI,CAAC,CAAC,aAAa,CAAC,eAAe,IAC/B,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,aAAa,CAAC,eAAe,CAAC,EAAE;gBACnE,OAAO;YACvB,CAAa;YACD,IAAI,CAAC,CAAC,aAAa,CAAC,aAAa,IAC7B,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,aAAa,CAAC,aAAa,CAAC,EAAE;gBAC/D,OAAO;YACvB,CAAa;YACb,qHAAA;YACY,MAAM,mBAAmB,GAAG;gBACxB,cAAc,EAAE,aAAa,EAAE,cAAc;gBAC7C,IAAI,EAAE,aAAa,EAAE,IAAI;YACzC,CAAa,CAAC;YACF,MAAM,sBAAsB,GAAG,MAAM,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC,aAAa,KAAK;gBAC5E,OAAO,IAAI,CAAC,0BAA0B,CAAC,aAAa,EAAE,mBAAmB,CAAC,CAAC;YAC3F,CAAa,CAAC,CAAC;YACH,IAAI,sBAAsB,IAAI,sBAAsB,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC/E,4FAAA;gBACgB,OAAO;YACvB,CAAa;YACD,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,CAAS,CAAC,CAAC;QACH,OAAO,gBAAgB,CAAC;IAChC,CAAK;IACL;;;;;KAKA,GACI,uBAAuB,CAAC,MAAM,EAAE,MAAM,EAAE;QACpC,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE;YACnE,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,CAAC,CAAC,MAAM,CAAC,iBAAiB,IAC1B,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,EAAE,MAAM,CAAC,iBAAiB,CAAC,EAAE;YAChE,OAAO,KAAK,CAAC;QACzB,CAAS;QACT;;;SAGA,GACQ,IAAI,OAAO,MAAM,CAAC,aAAa,KAAK,QAAQ,IACxC,CAAC,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,MAAM,CAAC,aAAa,CAAC,EAAE;YACxD,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,CAAC,CAAC,MAAM,CAAC,WAAW,IACpB,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,EAAE;YACpD,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE;YAC1D,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,CAAC,CAAC,MAAM,CAAC,cAAc,IACvB,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,MAAM,CAAC,cAAc,CAAC,EAAE;YAC1D,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE;YACnE,OAAO,KAAK,CAAC;QACzB,CAAS;QACT;;;SAGA,GACQ,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE;YAC7D,OAAO,KAAK,CAAC;QACzB,CAAS;QACT,6EAAA;QACQ,IAAI,MAAM,CAAC,mBAAmB,IAAI,MAAM,CAAC,mBAAmB,EAAE;YACtE,2DAAA;YACY,IAAI,MAAM,CAAC,mBAAmB,KAAK,MAAM,CAAC,mBAAmB,EAAE;gBAC3D,OAAO,KAAK,CAAC;YAC7B,CAAa;QACb,CAAS;QACT,kDAAA;QACQ,IAAI,MAAM,CAAC,cAAc,KACrB,cAAc,CAAC,6BAA6B,EAAE;YAC9C,IAAI,CAAC,CAAC,MAAM,CAAC,SAAS,IAClB,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,EAAE;gBAChD,OAAO,KAAK,CAAC;YAC7B,CAAa;YACb,gHAAA;YACY,IAAI,MAAM,CAAC,SAAS,KAAK,oBAAoB,CAAC,GAAG,EAAE;gBAC/C,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE;oBACxD,OAAO,KAAK,CAAC;gBACjC,CAAiB;YACjB,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;KAGA,GACI,wBAAwB,CAAC,MAAM,EAAE;QAC7B,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QACpC,MAAM,mBAAmB,GAAG,CAAA,CAAE,CAAC;QAC/B,YAAY,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAK;YAC3C,sDAAA;YACY,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;gBAC/B,OAAO;YACvB,CAAa;YACb,oBAAA;YACY,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC7C,IAAI,CAAC,MAAM,EAAE;gBACT,OAAO;YACvB,CAAa;YACD,IAAI,CAAC,CAAC,MAAM,CAAC,WAAW,IACpB,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,EAAE;gBACpD,OAAO;YACvB,CAAa;YACD,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,IACjB,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,QAAQ,CAAC,EAAE;gBAC9C,OAAO;YACvB,CAAa;YACD,mBAAmB,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC;QACnD,CAAS,CAAC,CAAC;QACH,OAAO,mBAAmB,CAAC;IACnC,CAAK;IACL;;;KAGA,GACI,2BAA2B,CAAC,IAAI,EAAE;QAC9B,MAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QACrD,IAAI,aAAa,GAAG,IAAI,CAAC;QACzB,YAAY,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAK;YAC3C,4DAAA;YACY,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IACnC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAA,CAAE,EAAE;gBACxC,OAAO;YACvB,CAAa;YACb,oBAAA;YACY,MAAM,MAAM,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;YACnD,IAAI,CAAC,MAAM,EAAE;gBACT,OAAO;YACvB,CAAa;YACD,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAA,CAAE,EAAE;gBACrC,OAAO;YACvB,CAAa;YACD,aAAa,GAAG,MAAM,CAAC;QACnC,CAAS,CAAC,CAAC;QACH,OAAO,aAAa,CAAC;IAC7B,CAAK;IACL;;KAEA,GACI,iBAAiB,CAAC,aAAa,EAAE;QAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,CAAA,CAAE,EAAE,aAAa,CAAC,CAAC;QACxD,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,KAAK;YAC1B,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QACvD,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;KAGA,GACI,aAAa,CAAC,OAAO,EAAE,aAAa,EAAE;QAClC,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;QAClD,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1C,MAAM,SAAS,GAAG,CAAC,GAAG,KAAK;YACvB,OAAQ,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,IACvC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;QACnD,CAAS,CAAC;QACF,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;YAC3C,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;YACpC,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC;gBAAE,eAAe,EAAE,CAAC;YAAA,CAAE,EAAE,aAAa,CAAC,CAAC;QAC1F,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;KAGA,GACI,oBAAoB,CAAC,OAAO,EAAE,aAAa,EAAE;QACzC,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACzC,MAAM,SAAS,GAAG,CAAC,GAAG,KAAK;YACvB,OAAQ,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,IACvC,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;QACnD,CAAS,CAAC;QACF,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;YACpD,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACnD,CAAS,CAAC,CAAC;QACH,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;YACxD,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACvD,CAAS,CAAC,CAAC;QACH,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;YACzD,IAAI,CAAC,kBAAkB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACxD,CAAS,CAAC,CAAC;IACX,CAAK;IACL;;;;KAIA,GACI,iBAAiB,CAAC,GAAG,EAAE,aAAa,EAAE;QAClC,MAAM,UAAU,GAAG,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACrE,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACpC,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC;YAAE,mBAAmB,EAAE,CAAC;QAAA,CAAE,EAAE,aAAa,CAAC,CAAC;QAClF,IAAI,CAAC,UAAU,IACX,UAAU,CAAC,cAAc,CAAC,WAAW,EAAE,KACnC,cAAc,CAAC,6BAA6B,CAAC,WAAW,EAAE,IAC9D,UAAU,CAAC,SAAS,KAAK,oBAAoB,CAAC,GAAG,EAAE;YAC/D,sDAAA;YACY,OAAO;QACnB,CAAS;QACT,qEAAA;QACQ,MAAM,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC;QAC7B,IAAI,GAAG,EAAE;YACL,KAAK,IAAI,CAAC,UAAU,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM;gBACxD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,mCAAmC,EAAE,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;gBACpF,IAAI,CAAC,iBAAiB,EAAE,eAAe,CAAC;oBAAE,4BAA4B,EAAE,CAAC;gBAAA,CAAE,EAAE,aAAa,CAAC,CAAC;YAC5G,CAAa,CAAC,CAAC;QACf,CAAS;IACT,CAAK;IACL;;KAEA,GACI,iBAAiB,CAAC,aAAa,EAAE;QAC7B,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QACpC,YAAY,CAAC,OAAO,CAAC,CAAC,QAAQ,KAAK;YAC/B,IAAI,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAAE;gBAC9B,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;YACzD,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;;;;;KAOA,GACI,UAAU,CAAC,OAAO,EAAE,aAAa,EAAE,SAAS,EAAE,WAAW,EAAE,iBAAiB,EAAE;QAC1E,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;QAC5D,MAAM,aAAa,GAAG;YAClB,aAAa,EAAE,OAAO,CAAC,aAAa;YACpC,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,cAAc,EAAE,cAAc,CAAC,QAAQ;YACvC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,KAAK,EAAE,WAAW;QAC9B,CAAS,CAAC;QACF,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,aAAa,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;QACrF,MAAM,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC;QACpC,IAAI,WAAW,GAAG,CAAC,EAAE;YACjB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;YACnE,OAAO,IAAI,CAAC;QACxB,CAAS,MACI,IAAI,WAAW,GAAG,CAAC,EAAE;YACtB,IAAI,iBAAiB,GAAG,UAAU,CAAC;YAC/C,sEAAA;YACY,IAAI,CAAC,WAAW,EAAE;gBACd,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;gBACjC,UAAU,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,GAAG,KAAK;oBACjC,IAAI,OAAO,CAAC,KAAK,KAAK,OAAO,CAAC,QAAQ,EAAE;wBACpC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;oBACzD,CAAqB;gBACrB,CAAiB,CAAC,CAAC;gBACH,MAAM,eAAe,GAAG,cAAc,CAAC,IAAI,CAAC;gBAC5C,IAAI,eAAe,GAAG,CAAC,EAAE;oBACrB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,gIAAgI,CAAC,CAAC;oBACzJ,OAAO,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;gBAC5D,CAAiB,MACI,IAAI,eAAe,KAAK,CAAC,EAAE;oBAC5B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,mGAAmG,CAAC,CAAC;oBAC5H,OAAO,cAAc,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;gBAChE,CAAiB,MACI;oBACrB,yEAAA;oBACoB,iBAAiB,GAAG,cAAc,CAAC;gBACvD,CAAiB;YACjB,CAAa;YACb,0EAAA;YACY,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,4EAA4E,CAAC,CAAC;YACrG,iBAAiB,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,GAAG,KAAK;gBACxC,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;YACvD,CAAa,CAAC,CAAC;YACH,IAAI,iBAAiB,IAAI,aAAa,EAAE;gBACpC,iBAAiB,CAAC,SAAS,CAAC;oBAAE,cAAc,EAAE,UAAU,CAAC,IAAI;gBAAA,CAAE,EAAE,aAAa,CAAC,CAAC;YAChG,CAAa;YACD,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;QACvE,OAAO,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;IAChD,CAAK;IACL;;;;KAIA,GACI,mBAAmB,CAAC,MAAM,EAAE,aAAa,EAAE,SAAS,EAAE;QAClD,MAAM,WAAW,GAAG,AAAC,SAAS,IAAI,SAAS,CAAC,OAAO,IAAK,IAAI,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC;QACpF,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;QAC3B,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;YACzB,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE;gBACnC,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,GAAG,MAAM;YACzB,CAAa,CAAC,EAAE;gBACA,OAAO;YACvB,CAAa;YACD,MAAM,OAAO,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;YAC9D,IAAI,OAAO,IAAI,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE;gBAC1D,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC3C,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IACxB,CAAK;IACL;;;;;KAKA,GACI,uBAAuB,CAAC,QAAQ,EAAE,MAAM,EAAE;QACtC,MAAM,GAAG,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;QACnC,IAAI,MAAM,CAAC,QAAQ,IACf,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,KAAK,CAAA,CAAE,EAAE;YACnD,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,MAAM,CAAC,aAAa,IACpB,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,KAAK,CAAA,CAAE,EAAE;YACxD,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;KAGA,GACI,aAAa,CAAC,GAAG,EAAE,aAAa,EAAE;QAC9B,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAC5C,CAAK;IACL;;;KAGA,GACI,kBAAkB,CAAC,GAAG,EAAE,aAAa,EAAE;QACnC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;IAC5C,CAAK;IACL;;;;;;;KAOA,GACI,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE;QACrD,MAAM,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;QAC5C,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,sCAAsC,EAAE,aAAa,CAAC,CAAC;QAC/E,MAAM,MAAM,GAAG,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC3D,MAAM,UAAU,GAAG,OAAO,CAAC,oBAAoB,IAAI,oBAAoB,CAAC,MAAM,CAAC;QACvF;;;SAGA,GACQ,MAAM,cAAc,GAChB,UAAU,CAAC,WAAW,EAAE,KACpB,oBAAoB,CAAC,MAAM,CAAC,WAAW,EAAE,GAC3C,cAAc,CAAC,6BAA6B,GAC5C,cAAc,CAAC,YAAY,CAAC;QAClC,MAAM,iBAAiB,GAAG;YACtB,aAAa,EAAE,OAAO,CAAC,aAAa;YACpC,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,cAAc,EAAE,cAAc;YAC9B,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,KAAK,EAAE,WAAW,IAAI,OAAO,CAAC,QAAQ;YACtC,MAAM,EAAE,MAAM;YACd,SAAS,EAAE,UAAU;YACrB,KAAK,EAAE,OAAO,CAAC,MAAM;YACrB,mBAAmB,EAAE,OAAO,CAAC,mBAAmB;QAC5D,CAAS,CAAC;QACF,MAAM,eAAe,GAAG,AAAC,SAAS,IAAI,SAAS,CAAC,WAAW,IACvD,IAAI,CAAC,YAAY,EAAE,CAAC,WAAW,CAAC;QACpC,MAAM,YAAY,GAAG,EAAE,CAAC;QACxB,eAAe,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;YACzC,eAAA;YACY,IAAI,IAAI,CAAC,2BAA2B,CAAC,GAAG,EAAE,iBAAiB,EAAE,IAAI,CAAC,EAAE;gBAChE,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;gBACtF,iBAAA;gBACgB,IAAI,WAAW,IACX,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,iBAAiB,CAAC,EAAE;oBAC9D,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBACnD,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC,CAAC;QACH,MAAM,eAAe,GAAG,YAAY,CAAC,MAAM,CAAC;QAC5C,IAAI,eAAe,GAAG,CAAC,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,8CAA8C,EAAE,aAAa,CAAC,CAAC;YACtF,OAAO,IAAI,CAAC;QACxB,CAAS,MACI,IAAI,eAAe,GAAG,CAAC,EAAE;YAC1B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,2EAA2E,EAAE,aAAa,CAAC,CAAC;YACnH,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW,KAAK;gBAClC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,EAAE,aAAa,CAAC,CAAC;YAC/F,CAAa,CAAC,CAAC;YACH,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC;gBAAE,cAAc,EAAE,YAAY,CAAC,MAAM;YAAA,CAAE,EAAE,aAAa,CAAC,CAAC;YACzF,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,sDAAsD,EAAE,aAAa,CAAC,CAAC;QAC9F,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;IAC/B,CAAK;IACL;;;;;;KAMA,GACI,2BAA2B,CAAC,QAAQ,EAAE,MAAM,EAAE,uBAAuB,EAAE;QACnE,MAAM,GAAG,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;QACnC,IAAI,MAAM,CAAC,QAAQ,IACf,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,KAAK,CAAA,CAAE,EAAE;YACnD,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,MAAM,CAAC,aAAa,IACpB,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,KAAK,CAAA,CAAE,EAAE;YACxD,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,MAAM,CAAC,KAAK,IAAI,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,KAAK,CAAA,CAAE,EAAE;YAChE,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,MAAM,CAAC,mBAAmB,IAC1B,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC,KAAK,CAAA,CAAE,EAAE;YAC9D,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,MAAM,CAAC,MAAM,EAAE;YACf,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YACvC,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;gBACpC,IAAI,uBAAuB,IACvB,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,EAAE;oBAC5D,uEAAA;oBACoB,OAAO,KAAK,CAAC;gBACjC,CAAiB,MACI,IAAI,CAAC,uBAAuB,IAC7B,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,EAAE;oBAC3D,gGAAA;oBACoB,OAAO,IAAI,CAAC;gBAChC,CAAiB;YACjB,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;;KAIA,GACI,uBAAuB,CAAC,MAAM,EAAE,aAAa,EAAE;QAC3C,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;QACtC,MAAM,YAAY,GAAG,EAAE,CAAC;QACxB,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;YACnC,IAAI,CAAC,IAAI,CAAC,2BAA2B,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,EAAE;gBACtD,OAAO;YACvB,CAAa;YACD,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;YACtE,IAAI,WAAW,IACX,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE;gBACnD,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC/C,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,YAAY,CAAC;IAC5B,CAAK;IACL;;;;;;;KAOA,GACI,eAAe,CAAC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAE,SAAS,EAAE,iBAAiB,EAAE;QAC5E,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;QACjE,MAAM,EAAE,GAAG,QAAQ,GAAG,aAAa,GAAG,SAAS,CAAC;QAChD,MAAM,kBAAkB,GAAG;YACvB,aAAa,EAAE,OAAO,CAAC,aAAa;YACpC,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,cAAc,EAAE,cAAc,CAAC,aAAa;YAC5C,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,QAAQ,EAAE,EAAE;QACxB,CAAS,CAAC;QACF,MAAM,gBAAgB,GAAG,AAAC,SAAS,IAAI,SAAS,CAAC,YAAY,IACzD,IAAI,CAAC,YAAY,EAAE,CAAC,YAAY,CAAC;QACrC,MAAM,aAAa,GAAG,EAAE,CAAC;QACzB,gBAAgB,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;YAC1C,eAAA;YACY,IAAI,IAAI,CAAC,4BAA4B,CAAC,GAAG,EAAE,kBAAkB,CAAC,EAAE;gBAC5D,MAAM,YAAY,GAAG,IAAI,CAAC,yBAAyB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;gBACxF,iBAAA;gBACgB,IAAI,YAAY,IACZ,IAAI,CAAC,uBAAuB,CAAC,YAAY,EAAE,kBAAkB,CAAC,EAAE;oBAChE,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBACrD,CAAiB;YACjB,CAAa;QACb,CAAS,CAAC,CAAC;QACH,MAAM,gBAAgB,GAAG,aAAa,CAAC,MAAM,CAAC;QAC9C,IAAI,gBAAgB,GAAG,CAAC,EAAE;YACtB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAC;YACjF,OAAO,IAAI,CAAC;QACxB,CAAS;QACT,2EAAA;QACQ,IAAI,gBAAgB,GAAG,CAAC,IAAI,iBAAiB,IAAI,aAAa,EAAE;YAC5D,iBAAiB,CAAC,SAAS,CAAC;gBAAE,cAAc,EAAE,gBAAgB;YAAA,CAAE,EAAE,aAAa,CAAC,CAAC;QAC7F,CAAS;QACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,wDAAwD,CAAC,CAAC;QACjF,OAAO,aAAa,CAAC,CAAC,CAAC,CAAC;IAChC,CAAK;IACL;;;;KAIA,GACI,4BAA4B,CAAC,QAAQ,EAAE,MAAM,EAAE;QAC3C,MAAM,GAAG,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;QACnC,IAAI,MAAM,CAAC,QAAQ,IACf,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,KAAK,CAAA,CAAE,EAAE;YACnD,OAAO,KAAK,CAAC;QACzB,CAAS;QACT,kDAAA;QACQ,IAAI,CAAC,MAAM,CAAC,QAAQ,IAChB,MAAM,CAAC,QAAQ,IACf,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,KAAK,CAAA,CAAE,EAAE;YACnD,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,MAAM,CAAC,aAAa,IACpB,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,KAAK,CAAA,CAAE,EAAE;YACxD,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;KAEA,GACI,wBAAwB,CAAC,WAAW,EAAE;QAClC,MAAM,iBAAiB,GAAG;YACtB,WAAW;YACX,QAAQ,EAAE,IAAI,CAAC,QAAQ;QACnC,CAAS,CAAC;QACF,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;QACrE,MAAM,kBAAkB,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAK,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;QACnF,MAAM,cAAc,GAAG,kBAAkB,CAAC,MAAM,CAAC;QACjD,IAAI,cAAc,GAAG,CAAC,EAAE;YACpB,OAAO,IAAI,CAAC;QACxB,CAAS,MACI,IAAI,cAAc,GAAG,CAAC,EAAE;YACzB,MAAM,qBAAqB,CAAC,2BAA2B,CAAC,CAAC;QACrE,CAAS;QACD,OAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACrC,CAAK;IACL;;;;KAIA,GACI,iBAAiB,CAAC,WAAW,EAAE;QAC3B,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,CAAC;QAC/D,OAAO,CAAC,CAAA,CAAE,WAAW,IAAI,WAAW,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC;IACzE,CAAK;IACL;;;;KAIA,GACI,kBAAkB,CAAC,MAAM,EAAE,aAAa,EAAE;QACtC,OAAO,CAAC,CAAA,CAAE,OAAO,MAAM,CAAC,aAAa,KAAK,QAAQ,IAC9C,aAAa,KAAK,MAAM,CAAC,aAAa,CAAC,CAAC;IACpD,CAAK;IACL;;;;;KAKA,GACI,kCAAkC,CAAC,WAAW,EAAE,cAAc,EAAE;QAC5D,MAAM,qBAAqB,GAAG,WAAW,CAAC,GAAG,IAAI,WAAW,CAAC,GAAG,CAAC;QACjE,OAAO,cAAc,KAAK,qBAAqB,CAAC;IACxD,CAAK;IACD,oCAAoC,CAAC,aAAa,EAAE,cAAc,EAAE;QAChE,OAAO,aAAa,CAAC,cAAc,KAAK,cAAc,CAAC;IAC/D,CAAK;IACL;;;;;KAKA,GACI,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE;QACpB,OAAO,CAAC,CAAA,CAAE,IAAI,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;IACrE,CAAK;IACL;;;;;KAKA,GACI,aAAa,CAAC,cAAc,EAAE,cAAc,EAAE;QAC1C,OAAO,CAAC,CAAA,CAAE,cAAc,IACpB,OAAO,cAAc,KAAK,QAAQ,IAClC,cAAc,EAAE,WAAW,EAAE,KAAK,cAAc,CAAC,WAAW,EAAE,CAAC,CAAC;IAC5E,CAAK;IACL;;;;KAIA,GACI,sBAAsB,CAAC,MAAM,EAAE,iBAAiB,EAAE;QAC9C,OAAO,CAAC,CAAA,CAAE,MAAM,CAAC,iBAAiB,IAC9B,iBAAiB,KAAK,MAAM,CAAC,iBAAiB,CAAC,CAAC;IAC5D,CAAK;IACL;;;;KAIA,GACI,gBAAgB,CAAC,MAAM,EAAE,WAAW,EAAE;QAC1C,+GAAA;QACQ,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC7B,MAAM,aAAa,GAAG,2BAA2B,CAAC,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YAClG,IAAI,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,IACnC,aAAa,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE;gBAC5C,OAAO,IAAI,CAAC;YAC5B,CAAa;QACb,CAAS;QACT,8FAAA;QACQ,MAAM,aAAa,GAAG,IAAI,CAAC,2BAA2B,CAAC,WAAW,CAAC,CAAC;QACpE,IAAI,aAAa,IACb,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAA,CAAE,EAAE;YACxD,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,OAAO,KAAK,CAAC;IACrB,CAAK;IACL;;;;KAIA,GACI,mBAAmB,CAAC,MAAM,EAAE,cAAc,EAAE;QACxC,OAAQ,MAAM,CAAC,cAAc,IACzB,cAAc,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,cAAc,CAAC,WAAW,EAAE,EAAE;IAClF,CAAK;IACL;;;;KAIA,GACI,aAAa,CAAC,MAAM,EAAE,QAAQ,EAAE;QAC5B,OAAO,CAAC,CAAA,CAAE,MAAM,CAAC,QAAQ,IAAI,QAAQ,KAAK,MAAM,CAAC,QAAQ,CAAC,CAAC;IACnE,CAAK;IACL;;;;KAIA,GACI,aAAa,CAAC,MAAM,EAAE,QAAQ,EAAE;QAC5B,OAAO,CAAC,CAAA,CAAE,MAAM,CAAC,QAAQ,IAAI,QAAQ,KAAK,MAAM,CAAC,QAAQ,CAAC,CAAC;IACnE,CAAK;IACL;;;;KAIA,GACI,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE;QACtB,OAAO,CAAC,CAAA,CAAE,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,KAAK,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC;IACvE,CAAK;IACL;;;;;KAKA,GACI,oBAAoB,CAAC,MAAM,EAAE,eAAe,EAAE;QAC1C,OAAO,CAAC,CAAA,CAAE,MAAM,CAAC,eAAe,IAAI,eAAe,KAAK,MAAM,CAAC,eAAe,CAAC,CAAC;IACxF,CAAK;IACL;;;;;;;;KAQA,GACI,6BAA6B,CAAC,WAAW,EAAE,SAAS,EAAE;QAClD,IAAI,WAAW,CAAC,UAAU,KAAK,SAAS,EAAE;YACtC,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,IAAI,WAAW,CAAC,kBAAkB,KAAK,SAAS,EAAE;YAC9C,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,IAAI,WAAW,CAAC,GAAG,KAAK,SAAS,EAAE;YAC/B,OAAO,IAAI,CAAC;QACxB,CAAS;QACD,OAAO,KAAK,CAAC;IACrB,CAAK;IACL;;;;;KAKA,GACI,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QACzB,OAAO,aAAa,CAAC,GAAG,KAAK,GAAG,CAAC;IACzC,CAAK;IACD,kBAAkB,CAAC,MAAM,EAAE,aAAa,EAAE;QACtC,OAAO,CAAC,CAAA,CAAE,MAAM,CAAC,aAAa,IAC1B,aAAa,CAAC,WAAW,EAAE,KAAK,MAAM,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,CAAC;IAChF,CAAK;IACL;;;;KAIA,GACI,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE;QACxB,MAAM,0BAA0B,GAAG,MAAM,CAAC,cAAc,KAAK,cAAc,CAAC,YAAY,IACpF,MAAM,CAAC,cAAc,KACjB,cAAc,CAAC,6BAA6B,CAAC;QACrD,IAAI,0BAA0B,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;YAC9C,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,MAAM,cAAc,GAAG,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC1D,OAAO,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IACvD,CAAK;IACL;;;;KAIA,GACI,cAAc,CAAC,MAAM,EAAE,SAAS,EAAE;QAC9B,OAAO,CAAC,CAAA,CAAE,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC;IACtE,CAAK;IACL;;;;KAIA,GACI,UAAU,CAAC,MAAM,EAAE,KAAK,EAAE;QACtB,OAAO,CAAC,CAAA,CAAE,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;IAC1D,CAAK;IACL;;;KAGA,GACI,aAAa,CAAC,GAAG,EAAE;QACf,OAAO,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAA,CAAE,CAAC;IAChD,CAAK;IACL;;;KAGA,GACI,mBAAmB,CAAC,GAAG,EAAE;QACrB,OAAO,GAAG,CAAC,OAAO,CAAC,4BAA4B,CAAC,SAAS,CAAC,KAAK,CAAA,CAAE,CAAC;IAC1E,CAAK;IACL;;KAEA,GACI,iCAAiC,CAAC,SAAS,EAAE;QACzC,OAAO,CAAC,EAAE,4BAA4B,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;IACzF,CAAK;IACL;;;;KAIA,GACI,OAAO,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE;QACvB,IAAK,MAAM,YAAY,IAAI,IAAI,CAAE;YAC7B,GAAG,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;QACnD,CAAS;QACD,OAAO,GAAG,CAAC;IACnB,CAAK;AACL,CAAC;AACD,cAAA,GACA,MAAM,mBAAmB,SAAS,YAAY,CAAC;IAC3C,MAAM,UAAU,GAAG;QACf,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,UAAU,GAAG;QACT,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,MAAM,oBAAoB,GAAG;QACzB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,oBAAoB,GAAG;QACnB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,MAAM,wBAAwB,GAAG;QAC7B,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,wBAAwB,GAAG;QACvB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,MAAM,yBAAyB,GAAG;QAC9B,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,yBAAyB,GAAG;QACxB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,cAAc,GAAG;QACb,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,cAAc,GAAG;QACb,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,kBAAkB,GAAG;QACjB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,kBAAkB,GAAG;QACjB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,oBAAoB,GAAG;QACnB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,oBAAoB,GAAG;QACnB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,wBAAwB,GAAG;QACvB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,kBAAkB,GAAG;QACjB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,kBAAkB,GAAG;QACjB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,UAAU,GAAG;QACT,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,OAAO,GAAG;QACN,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,cAAc,GAAG;QACb,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,YAAY,GAAG;QACX,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,qBAAqB,GAAG;QACpB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,kBAAkB,GAAG;QACjB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;AACL;AC9lCA,2CAAA,GAEA;;;CAGA,GACA;;CAEA,GACK,MAAC,YAAY,GAAG;IACrB;;KAEA,GACI,GAAG,EAAE,KAAK;IACd;;;KAGA,GACI,IAAI,EAAE,MAAM;IAChB;;KAEA,GACI,GAAG,EAAE,KAAK;AACd;ACvBA,2CAAA,GAEA;;;CAGA,GACA;;;;;CAKA,GACA,MAAM,iBAAiB,GAAG;IAC1B;;;KAGA,GACI,kBAAkB,EAAE,oBAAoB;IAC5C;;;KAGA,GACI,0BAA0B,EAAE,4BAA4B;IAC5D;;;KAGA,GACI,kBAAkB,EAAE,oBAAoB;IAC5C;;;KAGA,GACI,uBAAuB,EAAE,yBAAyB;IACtD;;;KAGA,GACI,iBAAiB,EAAE,mBAAmB;IAC1C;;;;KAIA,GACI,uBAAuB,EAAE,yBAAyB;IACtD;;;;KAIA,GACI,oBAAoB,EAAE,sBAAsB;IAChD;;;KAGA,GACI,gCAAgC,EAAE,kCAAkC;IACxE;;;KAGA,GACI,iBAAiB,EAAE,mBAAmB;IAC1C;;;KAGA,GACI,6BAA6B,EAAE,+BAA+B;IAClE;;;KAGA,GACI,8BAA8B,EAAE,gCAAgC;IAChE,qBAAqB,EAAE,uBAAuB;IAClD;;;KAGA,GACI,+BAA+B,EAAE,iCAAiC;IACtE;;;KAGA,GACI,SAAS,EAAE,WAAW;IAC1B;;;KAGA,GACI,+CAA+C,EAAE,iDAAiD;IACtG;;;KAGA,GACI,8BAA8B,EAAE,gCAAgC;IACpE;;;KAGA,GACI,mCAAmC,EAAE,qCAAqC;IAC9E;;KAEA,GACI,mCAAmC,EAAE,qCAAqC;IAC9E;;KAEA,GACI,iCAAiC,EAAE,mCAAmC;IACtE,4CAA4C,EAAE,8CAA8C;IAC5F,iDAAiD,EAAE,mDAAmD;IAC1G;;KAEA,GACI,gBAAgB,EAAE,iBAAiB;IACvC;;KAEA,GACI,kCAAkC,EAAE,oCAAoC;IAC5E;;KAEA,GACI,oBAAoB,EAAE,sBAAsB;IAChD;;KAEA,GACI,qCAAqC,EAAE,uCAAuC;IAClF;;KAEA,GACI,8BAA8B,EAAE,gCAAgC;IACpE;;KAEA,GACI,oDAAoD,EAAE,sDAAsD;IAChH;;KAEA,GACI,4CAA4C,EAAE,8CAA8C;IAChG;;KAEA,GACI,wCAAwC,EAAE,0CAA0C;IACxF;;;KAGA,GACI,qBAAqB,EAAE,uBAAuB;IAC9C,kCAAkC,EAAE,oCAAoC;IACxE,6CAA6C,EAAE,+CAA+C;IAClG;;;KAGA,GACI,0BAA0B,EAAE,4BAA4B;IAC5D;;KAEA,GACI,qBAAqB,EAAE,uBAAuB;IAClD;;KAEA,GACI,uBAAuB,EAAE,yBAAyB;IAClD,2BAA2B,EAAE,6BAA6B;IAC1D,eAAe,EAAE,iBAAiB;IACtC;;KAEA,GACI,6BAA6B,EAAE,+BAA+B;IAClE;;KAEA,GACI,gCAAgC,EAAE,kCAAkC;IACpE,iCAAiC,EAAE,mCAAmC;IACtE,sBAAsB,EAAE,wBAAwB;IAChD,0BAA0B,EAAE,4BAA4B;IAC5D;;KAEA,GACI,6CAA6C,EAAE,+CAA+C;IAC9F,+CAA+C,EAAE,iDAAiD;IAClG,uDAAuD,EAAE,yDAAyD;IACtH;;KAEA,GACI,cAAc,EAAE,gBAAgB;IAChC,iBAAiB,EAAE,mBAAmB;IAC1C;;KAEA,GACI,4BAA4B,EAAE,8BAA8B;IAC5D,kBAAkB,EAAE,oBAAoB;IACxC,iBAAiB,EAAE,mBAAmB;IACtC,4BAA4B,EAAE,8BAA8B;IAC5D,kBAAkB,EAAE,oBAAoB;IACxC,4BAA4B,EAAE,8BAA8B;IAChE;;KAEA,GACI,sBAAsB,EAAE,wBAAwB;IAChD,6BAA6B,EAAE,+BAA+B;IAC9D,gCAAgC,EAAE,kCAAkC;IACxE;;KAEA,GACI,mBAAmB,EAAE,qBAAqB;IAC1C,mBAAmB,EAAE,qBAAqB;IAC9C;;KAEA,GACI,yBAAyB,EAAE,2BAA2B;IACtD,mBAAmB,EAAE,qBAAqB;IAC9C;;KAEA,GACI,wCAAwC,EAAE,0CAA0C;IACpF,8BAA8B,EAAE,gCAAgC;IAChE,yCAAyC,EAAE,2CAA2C;IACtF,6CAA6C,EAAE,+CAA+C;IAC9F,qCAAqC,EAAE,uCAAuC;IAC9E,uCAAuC,EAAE,yCAAyC;IAClF,+BAA+B,EAAE,iCAAiC;IAClE,8CAA8C,EAAE,gDAAgD;IACpG;;KAEA,GACI,2BAA2B,EAAE,6BAA6B;IAC1D,gCAAgC,EAAE,kCAAkC;IACpE,gCAAgC,EAAE,kCAAkC;IACpE,uBAAuB,EAAE,yBAAyB;IAClD,8BAA8B,EAAE,gCAAgC;IAChE,+CAA+C,EAAE,iDAAiD;IAClG,gCAAgC,EAAE,uBAAuB;IACzD,sCAAsC,EAAE,6BAA6B;IACrE,uCAAuC,EAAE,yCAAyC;IAClF,kCAAkC,EAAE,oCAAoC;IACxE,6BAA6B,EAAE,+BAA+B;IAC9D,wBAAwB,EAAE,0BAA0B;IACpD,kBAAkB,EAAE,oBAAoB;IAC5C;;KAEA,GACI,4BAA4B,EAAE,8BAA8B;IAC5D,2BAA2B,EAAE,6BAA6B;IAC1D,mBAAmB,EAAE,qBAAqB;IAC1C,WAAW,EAAE,aAAa;IAC1B,mBAAmB,EAAE,qBAAqB;IAC9C;;KAEA,GACI,iBAAiB,EAAE,mBAAmB;IACtC,oBAAoB,EAAE,sBAAsB;IAC5C,iCAAiC,EAAE,mCAAmC;IACtE,YAAY,EAAE,cAAc;IAC5B,eAAe,EAAE,iBAAiB;IAClC,YAAY,EAAE,cAAc;IAC5B,eAAe,EAAE,iBAAiB;IAClC,YAAY,EAAE,cAAc;IAC5B,YAAY,EAAE,cAAc;IAC5B,OAAO,EAAE,SAAS;IAClB,OAAO,EAAE,SAAS;IAClB,cAAc,EAAE,gBAAgB;IAChC,kBAAkB,EAAE,oBAAoB;AAC5C,CAAC,CAAC;AAoOF;;;;;CAKA,GACA,MAAM,sBAAsB,GAAG;IAE3B,UAAU,EAAE;AAEhB,CAAC;AChfD,2CAAA,GAIA;;;CAGA,GACA,MAAM,0BAA0B,CAAC;IAC7B,gBAAgB,GAAG;QACf,OAAO;IACf,CAAK;IACD,cAAc,GAAG;QACb,OAAO;IACf,CAAK;IACD,gBAAgB,GAAG;QACf,OAAO,IAAI,CAAC;IACpB,CAAK;AACL,CAAC;AACD,MAAM,qBAAqB,CAAC;IACxB,UAAU,GAAG;QACT,OAAO,aAAa,CAAC;IAC7B,CAAK;IACD,gBAAgB,CAAC,WAAW,EAAE,aAAa,EAAE;QACzC,OAAO;YACH,GAAG,EAAE,IAAM,IAAI;YACf,OAAO,EAAE,KAAM,CAAA,AAAG;YAClB,GAAG,EAAE,KAAM,CAAA,AAAG;YACd,SAAS,EAAE,KAAM,CAAA,AAAG;YACpB,KAAK,EAAE;gBACH,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;gBAC1B,MAAM,EAAE,sBAAsB,CAAC,UAAU;gBACzC,SAAS,EAAE,EAAE;gBACb,WAAW,EAAE,EAAE;gBACf,cAAc,EAAE,EAAE;gBAClB,QAAQ,EAAE,EAAE;gBACZ,IAAI,EAAE,WAAW;gBACjB,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE;gBACvB,aAAa,EAAE,aAAa,IAAI,EAAE;YAClD,CAAa;YACD,WAAW,EAAE,IAAI,0BAA0B,EAAE;QACzD,CAAS,CAAC;IACV,CAAK;IACD,2BAA2B,GAAG;QAC1B,OAAO,IAAI,0BAA0B,EAAE,CAAC;IAChD,CAAK;IACD,mBAAmB,GAAG;QAClB,OAAO,CAAC,CAAC;IACjB,CAAK;IACD,mBAAmB,GAAG;QAClB,OAAO;IACf,CAAK;IACD,eAAe,GAAG;QACd,OAAO;IACf,CAAK;IACD,cAAc,GAAG;QACb,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,mBAAmB,GAAG;QAClB,OAAO;IACf,CAAK;IACD,yBAAyB,GAAG;QACxB,OAAO,IAAI,CAAC;IACpB,CAAK;IACD,sBAAsB,GAAG;QACrB,OAAO,EAAE,CAAC;IAClB,CAAK;IACD,UAAU,GAAG;QACT,OAAO;IACf,CAAK;IACD,SAAS,GAAG;QACR,OAAO;IACf,CAAK;IACD,eAAe,GAAG;QACd,OAAO;IACf,CAAK;IACD,yBAAyB,GAAG;QACxB,OAAO;IACf,CAAK;AACL;AC/EA,2CAAA,GAaA;;;CAGA,GACA,MAAMC,wBAAsB,GAAG;IAC3B,yBAAyB,EAAE,gCAAgC;IAC3D,oBAAoB,EAAE,KAAK;AAC/B,CAAC,CAAC;AACF,MAAM,6BAA6B,GAAG;IAClC,cAAc,EAAE,MAAM;IAC1B,wCAAA;IACA,CAAK;IACD,iBAAiB,EAAE,KAAK;IACxB,QAAQ,EAAEH,QAAAA,QAAQ,CAAC,IAAI;IACvB,aAAa,EAAED,WAAS,CAAC,YAAY;AACzC,CAAC,CAAC;AACF,MAAMK,uBAAqB,GAAG;IAC1B,yBAAyB,EAAE,KAAK;AACpC,CAAC,CAAC;AACF,MAAM,8BAA8B,GAAG;IACnC,MAAM,mBAAmB,GAAG;QACxB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,MAAM,oBAAoB,GAAG;QACzB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;AACL,CAAC,CAAC;AACF,MAAM,oBAAoB,GAAG;IACzB,GAAG,EAAEL,WAAS,CAAC,GAAG;IAClB,OAAO,EAAEG,SAAO;IAChB,GAAG,EAAEH,WAAS,CAAC,YAAY;IAC3B,EAAE,EAAEA,WAAS,CAAC,YAAY;AAC9B,CAAC,CAAC;AACF,MAAM,0BAA0B,GAAG;IAC/B,YAAY,EAAEA,WAAS,CAAC,YAAY;IACpC,eAAe,EAAE,SAAS;AAC9B,CAAC,CAAC;AACF,MAAM,2BAA2B,GAAG;IAChC,kBAAkB,EAAE,kBAAkB,CAAC,IAAI;IAC3C,MAAM,EAAE,CAAC,EAAEA,WAAS,CAAC,qBAAqB,CAAC,CAAC;AAChD,CAAC,CAAC;AACF,MAAMM,2BAAyB,GAAG;IAC9B,WAAW,EAAE;QACT,OAAO,EAAE,EAAE;QACX,UAAU,EAAE,EAAE;IACtB,CAAK;AACL,CAAC,CAAC;AACF;;;;;;CAMA,GACA,SAAS,wBAAwB,CAAC,EAAE,WAAW,EAAE,eAAe,EAAE,aAAa,EAAE,iBAAiB,EAAE,aAAa,EAAE,gBAAgB,EAAE,YAAY,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,qBAAqB,EAAE,gBAAgB,EAAE,qBAAqB,EAAE,eAAe,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,WAAW,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,EAAG,EAAE;IAC/e,MAAM,aAAa,GAAG;QAClB,GAAG,6BAA6B;QAChC,GAAG,gBAAgB;IAC3B,CAAK,CAAC;IACF,OAAO;QACH,WAAW,EAAE,gBAAgB,CAAC,eAAe,CAAC;QAC9C,aAAa,EAAE;YAAE,GAAGF,wBAAsB;YAAE,GAAG,iBAAiB;QAAA,CAAE;QAClE,aAAa,EAAE,aAAa;QAC5B,YAAY,EAAE;YAAE,GAAGC,uBAAqB;YAAE,GAAG,gBAAgB;QAAA,CAAE;QAC/D,gBAAgB,EAAE,qBAAqB,IACnC,IAAI,mBAAmB,CAAC,eAAe,CAAC,QAAQ,EAAE,6BAA6B,EAAE,IAAI,MAAM,CAAC,aAAa,CAAC,EAAE,IAAI,qBAAqB,EAAE,CAAC;QAC5I,gBAAgB,EAAE,qBAAqB,IAAI,8BAA8B;QACzE,eAAe,EAAE,oBAAoB,IAAI,6BAA6B;QACtE,iBAAiB,EAAE,iBAAiB,IAAI,0BAA0B;QAClE,WAAW,EAAE;YAAE,GAAG,oBAAoB;YAAE,GAAG,WAAW;QAAA,CAAE;QACxD,SAAS,EAAE;YAAE,GAAGC,2BAAyB;YAAE,GAAG,SAAS;QAAA,CAAE;QACzD,sBAAsB,EAAE,sBAAsB,IAAI,IAAI;QACtD,iBAAiB,EAAE,iBAAiB,IAAI,IAAI;QAC5C,iBAAiB,EAAE,iBAAiB,IAAI,IAAI;IACpD,CAAK,CAAC;AACN,CAAC;AACD;;;CAGA,GACA,SAAS,gBAAgB,CAAC,WAAW,EAAE;IACnC,OAAO;QACH,kBAAkB,EAAE,EAAE;QACtB,iBAAiB,EAAE,2BAA2B;QAC9C,0BAA0B,EAAE,KAAK;QACjC,aAAa,EAAE,KAAK;QACpB,sBAAsB,EAAE,KAAK;QAC7B,GAAG,WAAW;IACtB,CAAK,CAAC;AACN,CAAC;AACD;;;CAGA,GACA,SAAS,kBAAkB,CAAC,MAAM,EAAE;IAChC,OAAQ,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY,KAAK,YAAY,CAAC,IAAI,EAAE;AACrF;AC7GA,2CAAA,GAEA;;;CAGA,GACA,MAAM,iBAAiB,GAAG;IACtB,eAAe,EAAE,iBAAiB;IAClC,GAAG,EAAE,KAAK;AACd,CAAC;ACTD,2CAAA,GAMA;;;CAGA,GACA;;;;CAIA,GACA,SAAS,eAAe,CAAC,aAAa,EAAE,YAAY,EAAE;IAClD,IAAI,CAAC,aAAa,EAAE;QAChB,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;IAC1D,CAAK;IACD,IAAI;QACA,MAAM,iBAAiB,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC;QACtD,OAAO,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;IAC7C,CAAK,CACD,OAAO,CAAC,EAAE;QACN,MAAM,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;IAC7D,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,gCAAgC,CAAC,aAAa,EAAE;IACrD,IAAI,CAAC,aAAa,EAAE;QAChB,MAAM,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;IAC7D,CAAK;IACD,MAAM,eAAe,GAAG,aAAa,CAAC,KAAK,CAAC,UAAU,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC;IACjF,OAAO;QACH,GAAG,EAAE,eAAe,CAAC,CAAC,CAAC;QACvB,IAAI,EAAE,eAAe,CAAC,MAAM,GAAG,CAAC,GAC1BN,WAAS,CAAC,YAAY,GACtB,eAAe,CAAC,CAAC,CAAC;IAChC,CAAK,CAAC;AACN;AC1CA,2CAAA,GAEA;;;CAGA,GACA,MAAM,SAAS,GAAG,WAAW,CAAC;AAC9B,MAAM,YAAY,GAAG,cAAc,CAAC;AACpC,MAAM,aAAa,GAAG,eAAe,CAAC;AACtC,MAAM,aAAa,GAAG,eAAe,CAAC;AACtC,MAAM,UAAU,GAAG,YAAY,CAAC;AAChC,MAAM,MAAM,GAAG,QAAQ,CAAC;AACxB,MAAM,KAAK,GAAG,OAAO,CAAC;AAKtB,MAAM,aAAa,GAAG,eAAe,CAAC;AAGtC,MAAM,KAAK,GAAG,OAAO,CAAC;AACtB,MAAM,KAAK,GAAG,OAAO,CAAC;AACtB,MAAM,MAAM,GAAG,QAAQ,CAAC;AAGxB,MAAM,IAAI,GAAG,MAAM,CAAC;AACpB,MAAM,cAAc,GAAG,gBAAgB,CAAC;AACxC,MAAM,qBAAqB,GAAG,uBAAuB,CAAC;AACtD,MAAM,aAAa,GAAG,eAAe,CAAC;AACtC,MAAM,iBAAiB,GAAG,mBAAmB,CAAC;AAC9C,MAAM,YAAY,GAAG,cAAc,CAAC;AACpC,MAAM,YAAY,GAAG,cAAc,CAAC;AACpC,MAAM,WAAW,GAAG,aAAa,CAAC;AAClC,MAAM,YAAY,GAAG,cAAc,CAAC;AACpC,MAAM,mBAAmB,GAAG,4BAA4B,CAAC;AACzD,MAAM,mBAAmB,GAAG,yBAAyB,CAAC;AACtD,MAAM,mBAAmB,GAAG,qBAAqB,CAAC;AAClD,MAAM,UAAU,GAAG,YAAY,CAAC;AAChC,MAAM,SAAS,GAAG,WAAW,CAAC;AAC9B,MAAM,eAAe,GAAG,0BAA0B,CAAC;AACnD,MAAM,aAAa,GAAG,eAAe,CAAC;AACtC,MAAM,WAAW,GAAG,aAAa,CAAC;AAClC,MAAM,aAAa,GAAG,eAAe,CAAC;AACtC,MAAM,gBAAgB,GAAG,kBAAkB,CAAC;AAC5C,MAAM,qBAAqB,GAAG,uBAAuB,CAAC;AACtD,MAAM,UAAU,GAAG,YAAY,CAAC;AAChC,MAAM,OAAO,GAAG,SAAS,CAAC;AAC1B,MAAM,aAAa,GAAG,WAAW,CAAC;AAClC,MAAM,mBAAmB,GAAG,qBAAqB,CAAC;AAClD,MAAM,YAAY,GAAG,cAAc,CAAC;AAGpC,MAAM,eAAe,GAAG,iBAAiB,CAAC;AAE1C,MAAM,WAAW,GAAG,aAAa,CAAC;AAClC,MAAM,GAAG,GAAG,KAAK,CAAC;AAClB,MAAM,UAAU,GAAG,YAAY,CAAC;AAChC,MAAM,WAAW,GAAG,aAAa,CAAC;AAClC,MAAM,kBAAkB,GAAG,mBAAmB,CAAC;AAC/C,MAAM,gBAAgB,GAAG,eAAe,CAAC;AACzC,MAAM,mBAAmB,GAAG,kBAAkB,CAAC;AAC/C,MAAM,cAAc,GAAG,gBAAgB;AC7DvC,2CAAA,GAQA;;;CAGA,GACA,SAAS,sBAAsB,CAAC,UAAU,EAAE,aAAa,EAAE,iBAAiB,EAAE;IAC1E,IAAI,CAAC,aAAa,EAAE;QAChB,OAAO;IACf,CAAK;IACD,MAAM,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC3C,IAAI,QAAQ,IAAI,UAAU,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE;QAC9C,iBAAiB,EAAE,SAAS,CAAC;YACzB,gBAAgB,EAAE,QAAQ;YAC1B,mBAAmB,EAAE,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC;QAC7D,CAAS,EAAE,aAAa,CAAC,CAAC;IAC1B,CAAK;AACL,CAAC;AACD;;;;CAIA,GACA,SAAS,eAAe,CAAC,UAAU,EAAE,YAAY,EAAE;IAC/C,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;AAChD,CAAC;AACD;;;CAGA,GACA,SAAS,eAAe,CAAC,UAAU,EAAE,YAAY,EAAE;IAC/C,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,YAAY,GAAG,YAAY,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;AACpF,CAAC;AAOD;;;;CAIA,GACA,SAAS,SAAS,CAAC,UAAU,EAAE,MAAM,EAAE,aAAa,GAAG,IAAI,EAAE,aAAa,GAAG,mBAAmB,EAAE;IAClG,0DAAA;IACI,IAAI,aAAa,IACb,CAAC,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,IACjC,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC5B,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAK;IACD,MAAM,aAAa,GAAG,aAAa,GAC7B,CAAC;WAAI,MAAM,IAAI,EAAE,CAAC,EAAE;WAAG,aAAa;KAAC,GACrC,MAAM,IAAI,EAAE,CAAC;IACnB,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,aAAa,CAAC,CAAC;IAC7C,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;AAClD,CAAC;AACD;;;CAGA,GACA,SAAS,WAAW,CAAC,UAAU,EAAE,QAAQ,EAAE;IACvC,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;AACxC,CAAC;AACD;;;CAGA,GACA,SAAS,cAAc,CAAC,UAAU,EAAE,WAAW,EAAE;IAC7C,UAAU,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;AAC9C,CAAC;AACD;;;CAGA,GACA,SAAS,wBAAwB,CAAC,UAAU,EAAE,WAAW,EAAE;IACvD,UAAU,CAAC,GAAG,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;AACjD,CAAC;AACD;;;CAGA,GACA,SAAS,cAAc,CAAC,UAAU,EAAE,WAAW,EAAE;IAC7C,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;AAC/C,CAAC;AACD;;;CAGA,GACA,SAAS,aAAa,CAAC,UAAU,EAAE,UAAU,EAAE;IAC3C,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;AAC5C,CAAC;AACD;;;CAGA,GACA,SAAS,YAAY,CAAC,UAAU,EAAE,SAAS,EAAE;IACzC,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AAC1C,CAAC;AACD;;;CAGA,GACA,SAAS,SAAS,CAAC,UAAU,EAAE,SAAS,EAAE;IACtC,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;AAC/D,CAAC;AACD;;;CAGA,GACA,SAAS,SAAS,CAAC,UAAU,EAAE,UAAU,EAAE;IACvC,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACvF,CAAC;AACD;;;CAGA,GACA,SAAS,MAAM,CAAC,UAAU,EAAE,GAAG,EAAE;IAC7B,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC7B,CAAC;AACD;;;CAGA,GACA,SAAS,SAAS,CAAC,UAAU,EAAE,MAAM,EAAE,kBAAkB,EAAE;IACvD,MAAM,YAAY,GAAG,6BAA6B,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;IAC/E,IAAI;QACA,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IACjC,CAAK,CACD,OAAO,CAAC,EAAE;QACN,MAAM,8BAA8B,CAAC,aAAa,CAAC,CAAC;IAC5D,CAAK;IACD,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AACzC,CAAC;AACD;;;CAGA,GACA,SAAS,gBAAgB,CAAC,UAAU,EAAE,aAAa,EAAE;IACjD,UAAU,CAAC,GAAG,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC;AACrD,CAAC;AACD;;;CAGA,GACA,SAAS,cAAc,CAAC,UAAU,EAAE,WAAW,EAAE;IACjD,iBAAA;IACI,UAAU,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC;IAC9C,UAAU,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;IAClD,IAAI,WAAW,CAAC,EAAE,EAAE;QAChB,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,WAAW,CAAC,EAAE,CAAC,CAAC;IACpD,CAAK;IACD,IAAI,WAAW,CAAC,GAAG,EAAE;QACjB,UAAU,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC;IACtD,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,uBAAuB,CAAC,UAAU,EAAE,YAAY,EAAE;IACvD,IAAI,YAAY,EAAE,OAAO,EAAE;QACvB,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC;IACzD,CAAK;IACD,IAAI,YAAY,EAAE,UAAU,EAAE;QAC1B,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;IAC3D,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,SAAS,CAAC,UAAU,EAAE,MAAM,EAAE;IACnC,UAAU,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AACnC,CAAC;AACD;;;CAGA,GACA,SAAS,QAAQ,CAAC,UAAU,EAAE,KAAK,EAAE;IACjC,IAAI,KAAK,EAAE;QACP,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IACrC,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,QAAQ,CAAC,UAAU,EAAE,KAAK,EAAE;IACjC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AACjC,CAAC;AACD;;;;;CAKA,GACA,SAAS,sBAAsB,CAAC,UAAU,EAAE,aAAa,EAAE,mBAAmB,EAAE;IAC5E,IAAI,aAAa,IAAI,mBAAmB,EAAE;QACtC,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;QAC9C,UAAU,CAAC,GAAG,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;IACnE,CAAK,MACI;QACD,MAAM,8BAA8B,CAAC,iBAAiB,CAAC,CAAC;IAChE,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,oBAAoB,CAAC,UAAU,EAAE,IAAI,EAAE;IAC5C,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC/B,CAAC;AACD;;;CAGA,GACA,SAAS,aAAa,CAAC,UAAU,EAAE,IAAI,EAAE;IACrC,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AACtC,CAAC;AACD;;;CAGA,GACA,SAAS,eAAe,CAAC,UAAU,EAAE,YAAY,EAAE;IAC/C,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;AAChD,CAAC;AACD;;;CAGA,GACA,SAAS,eAAe,CAAC,UAAU,EAAE,YAAY,EAAE;IAC/C,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;AAChD,CAAC;AACD;;;CAGA,GACA,SAAS,eAAe,CAAC,UAAU,EAAE,YAAY,EAAE;IAC/C,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;AAChD,CAAC;AACD;;;CAGA,GACA,SAAS,kBAAkB,CAAC,UAAU,EAAE,eAAe,EAAE;IACrD,IAAI,eAAe,EAAE;QACjB,UAAU,CAAC,GAAG,CAAC,gBAAgB,EAAE,eAAe,CAAC,CAAC;IAC1D,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,sBAAsB,CAAC,UAAU,EAAE,mBAAmB,EAAE;IAC7D,IAAI,mBAAmB,EAAE;QACrB,UAAU,CAAC,GAAG,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;IACnE,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,eAAe,CAAC,UAAU,EAAE,YAAY,EAAE;IAC/C,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;AAChD,CAAC;AACD;;;CAGA,GACA,SAAS,kBAAkB,CAAC,UAAU,EAAE,QAAQ,EAAE;IAC9C,UAAU,CAAC,GAAG,CAAC,mBAAmB,EAAE,QAAQ,CAAC,CAAC;AAClD,CAAC;AACD;;;CAGA,GACA,SAAS,YAAY,CAAC,UAAU,EAAE,SAAS,EAAE;IACzC,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;AAC1C,CAAC;AACD;;;CAGA,GACA,SAAS,aAAa,CAAC,UAAU,EAAE;IAC/B,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;AACrC,CAAC;AACD,SAAS,gBAAgB,CAAC,UAAU,EAAE;IAClC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;QACjC,UAAU,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IAC/C,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,uBAAuB,CAAC,UAAU,EAAE,QAAQ,EAAE;IACnD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK;QAC/C,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,KAAK,EAAE;YAC/B,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACvC,CAAS;IACT,CAAK,CAAC,CAAC;AACP,CAAC;AACD,SAAS,6BAA6B,CAAC,MAAM,EAAE,kBAAkB,EAAE;IAC/D,IAAI,YAAY,CAAC;IACrB,oEAAA;IACI,IAAI,CAAC,MAAM,EAAE;QACT,YAAY,GAAG,CAAA,CAAE,CAAC;IAC1B,CAAK,MACI;QACD,IAAI;YACA,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAS,CACD,OAAO,CAAC,EAAE;YACN,MAAM,8BAA8B,CAAC,aAAa,CAAC,CAAC;QAChE,CAAS;IACT,CAAK;IACD,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE;QACrD,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,iBAAiB,CAAC,YAAY,CAAC,EAAE;YAC1E,wCAAA;YACY,YAAY,CAAC,iBAAiB,CAAC,YAAY,CAAC,GAAG,CAAA,CAAE,CAAC;QAC9D,CAAS;QACT,wEAAA;QACQ,YAAY,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,GAClE;YACI,MAAM,EAAE,kBAAkB;QAC1C,CAAa,CAAC;IACd,CAAK;IACD,OAAO,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AACxC,CAAC;AACD;;;CAGA,GACA,SAAS,WAAW,CAAC,UAAU,EAAE,QAAQ,EAAE;IACvC,UAAU,CAAC,GAAG,CAAC,sBAAsB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC9D,CAAC;AACD;;;CAGA,GACA,SAAS,WAAW,CAAC,UAAU,EAAE,QAAQ,EAAE;IACvC,UAAU,CAAC,GAAG,CAAC,sBAAsB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC9D,CAAC;AACD;;;CAGA,GACA,SAAS,WAAW,CAAC,UAAU,EAAE,SAAS,EAAE;IACxC,IAAI,SAAS,EAAE;QACX,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,oBAAoB,CAAC,GAAG,CAAC,CAAC;QACrD,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAC3C,CAAK;AACL,CAAC;AACD;;CAEA,GACA,SAAS,SAAS,CAAC,UAAU,EAAE,YAAY,EAAE;IACzC,IAAI,YAAY,EAAE;QACd,UAAU,CAAC,GAAG,CAAC,UAAU,EAAE,oBAAoB,CAAC,GAAG,CAAC,CAAC;QACrD,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IAC9C,CAAK;AACL,CAAC;AACD;;;CAGA,GACA,SAAS,kBAAkB,CAAC,UAAU,EAAE,sBAAsB,EAAE;IAC5D,UAAU,CAAC,GAAG,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,iCAAiC,EAAE,CAAC,CAAC;IAChG,UAAU,CAAC,GAAG,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,8BAA8B,EAAE,CAAC,CAAC;AACjG,CAAC;AACD;;CAEA,GACA,SAAS,aAAa,CAAC,UAAU,EAAE;IAC/B,UAAU,CAAC,GAAG,CAAC,mBAAmB,EAAE,mBAAmB,CAAC,yBAAyB,CAAC,CAAC;AACvF,CAAC;AACD;;CAEA,GACA,SAAS,aAAa,CAAC,UAAU,EAAE,UAAU,EAAE;IAC3C,UAAU,CAAC,GAAG,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;AAC5C,CAAC;AACD,SAAS,mBAAmB,CAAC,UAAU,EAAE,cAAc,EAAE,iBAAiB,EAAE;IACxE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE;QACnC,UAAU,CAAC,GAAG,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;IACzD,CAAK;IACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,mBAAmB,CAAC,EAAE;QACtC,UAAU,CAAC,GAAG,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,CAAC;IAC/D,CAAK;AACL;AC5YA,2CAAA,GAEA;;;CAGA,GACA;;CAEA,GACA,MAAM,aAAa,GAAG;IAClB,OAAO,EAAE,CAAC;IACV,IAAI,EAAE,CAAC;IACP,IAAI,EAAE,CAAC;IACP,IAAI,EAAE,CAAC;AACX,CAAC;ACdD,2CAAA,GAEA;;;CAGA,GACA,SAAS,sBAAsB,CAAC,QAAQ,EAAE;IACtC,OAAQ,QAAQ,CAAC,cAAc,CAAC,wBAAwB,CAAC,IACrD,QAAQ,CAAC,cAAc,CAAC,gBAAgB,CAAC,IACzC,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,IACjC,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;AAC7C;ACXA,2CAAA,GAEA;;;CAGA,GACA,SAAS,gCAAgC,CAAC,QAAQ,EAAE;IAChD,OAAQ,QAAQ,CAAC,cAAc,CAAC,2BAA2B,CAAC,IACxD,QAAQ,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;AAC7C;ACTA,2CAAA,GAEA;;;CAGA,GACA,SAAS,qCAAqC,CAAC,QAAQ,EAAE;IACrD,OAAQ,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,IACpC,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,EAAE;AACtD;ACTA,2CAAA,GAEA;;;CAGA,GACA;;;;;;;;;;CAUA,GACA,8DAAA;AACA,MAAM,MAAM,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,eAAe,EAAE,aAAa,KAAK;IAC5E,OAAO,CAAC,GAAG,IAAI,KAAK;QAChB,MAAM,CAAC,KAAK,CAAC,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;QAChD,MAAM,eAAe,GAAG,eAAe,EAAE,gBAAgB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QACpF,IAAI,aAAa,EAAE;YAC3B,+DAAA;YACY,MAAM,UAAU,GAAG,SAAS,GAAG,WAAW,CAAC;YAC3C,eAAe,EAAE,eAAe,CAAC;gBAAE,CAAC,UAAU,CAAA,EAAG,CAAC;YAAA,CAAE,EAAE,aAAa,CAAC,CAAC;QACjF,CAAS;QACD,IAAI;YACA,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;YACjC,eAAe,EAAE,GAAG,CAAC;gBACjB,OAAO,EAAE,IAAI;YAC7B,CAAa,CAAC,CAAC;YACH,MAAM,CAAC,KAAK,CAAC,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;YACnD,OAAO,MAAM,CAAC;QAC1B,CAAS,CACD,OAAO,CAAC,EAAE;YACN,MAAM,CAAC,KAAK,CAAC,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;YAC/C,IAAI;gBACA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,CAAa,CACD,OAAO,CAAC,EAAE;gBACN,MAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;YAC/D,CAAa;YACD,eAAe,EAAE,GAAG,CAAC;gBACjB,OAAO,EAAE,KAAK;YAC9B,CAAa,EAAE,CAAC,CAAC,CAAC;YACN,MAAM,CAAC,CAAC;QACpB,CAAS;IACT,CAAK,CAAC;AACN,CAAC,CAAC;AACF;;;;;;;;;;;CAWA,GACA,8DAAA;AACA,MAAM,WAAW,GAAG,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,EAAE,eAAe,EAAE,aAAa,KAAK;IACjF,OAAO,CAAC,GAAG,IAAI,KAAK;QAChB,MAAM,CAAC,KAAK,CAAC,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;QAChD,MAAM,eAAe,GAAG,eAAe,EAAE,gBAAgB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QACpF,IAAI,aAAa,EAAE;YAC3B,+DAAA;YACY,MAAM,UAAU,GAAG,SAAS,GAAG,WAAW,CAAC;YAC3C,eAAe,EAAE,eAAe,CAAC;gBAAE,CAAC,UAAU,CAAA,EAAG,CAAC;YAAA,CAAE,EAAE,aAAa,CAAC,CAAC;QACjF,CAAS;QACD,eAAe,EAAE,eAAe,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QAC3D,OAAO,QAAQ,CAAC,GAAG,IAAI,CAAC,CACnB,IAAI,CAAC,CAAC,QAAQ,KAAK;YACpB,MAAM,CAAC,KAAK,CAAC,CAAC,sBAAsB,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;YACnD,eAAe,EAAE,GAAG,CAAC;gBACjB,OAAO,EAAE,IAAI;YAC7B,CAAa,CAAC,CAAC;YACH,OAAO,QAAQ,CAAC;QAC5B,CAAS,CAAC,CACG,KAAK,CAAC,CAAC,CAAC,KAAK;YACd,MAAM,CAAC,KAAK,CAAC,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;YAC/C,IAAI;gBACA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAChD,CAAa,CACD,OAAO,CAAC,EAAE;gBACN,MAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;YAC/D,CAAa;YACD,eAAe,EAAE,GAAG,CAAC;gBACjB,OAAO,EAAE,KAAK;YAC9B,CAAa,EAAE,CAAC,CAAC,CAAC;YACN,MAAM,CAAC,CAAC;QACpB,CAAS,CAAC,CAAC;IACX,CAAK,CAAC;AACN,CAAC;AC/FD,2CAAA,GAMA;;;CAGA,GACA,MAAM,eAAe,CAAC;IAClB,WAAW,CAAC,gBAAgB,EAAE,MAAM,EAAE,iBAAiB,EAAE,aAAa,CAAE;QACpE,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IAC3C,CAAK;IACL;;;;KAIA,GACI,MAAM,YAAY,CAAC,iBAAiB,EAAE,uBAAuB,EAAE;QAC3D,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,2BAA2B,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACvH,uEAAA;QACQ,IAAI,sBAAsB,GAAG,iBAAiB,CAAC;QACvD,mGAAA;QACQ,IAAI,CAAC,sBAAsB,EAAE;YACzB,MAAM,OAAO,GAAG,eAAe,CAAC,YAAY,CAAC;YAC7C,IAAI;gBACA,MAAM,wBAAwB,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,gCAAgC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAACA,WAAS,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;gBACpO,IAAI,wBAAwB,CAAC,MAAM,KAAK,UAAU,CAAC,OAAO,EAAE;oBACxD,sBAAsB,GAAG,wBAAwB,CAAC,IAAI,CAAC;oBACvD,uBAAuB,CAAC,aAAa,GACjC,sBAAsB,CAAC,IAAI,CAAC;gBACpD,CAAiB;gBACjB,2GAAA;gBACgB,IAAI,wBAAwB,CAAC,MAAM,KAAK,UAAU,CAAC,WAAW,EAAE;oBAC5D,MAAM,kBAAkB,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,gCAAgC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC;oBACtM,IAAI,CAAC,kBAAkB,EAAE;wBACrB,uBAAuB,CAAC,aAAa,GACjC,sBAAsB,CAAC,qBAAqB,CAAC;wBACjD,OAAO,IAAI,CAAC;oBACpC,CAAqB;oBACD,MAAM,0BAA0B,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,gCAAgC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC;oBAClO,IAAI,0BAA0B,CAAC,MAAM,KAAK,UAAU,CAAC,OAAO,EAAE;wBAC1D,sBAAsB,GAClB,0BAA0B,CAAC,IAAI,CAAC;wBACpC,uBAAuB,CAAC,aAAa,GACjC,sBAAsB,CAAC,IAAI,CAAC;oBACxD,CAAqB;gBACrB,CAAiB;YACjB,CAAa,CACD,OAAO,CAAC,EAAE;gBACN,uBAAuB,CAAC,aAAa,GACjC,sBAAsB,CAAC,qBAAqB,CAAC;gBACjD,OAAO,IAAI,CAAC;YAC5B,CAAa;QACb,CAAS,MACI;YACD,uBAAuB,CAAC,aAAa,GACjC,sBAAsB,CAAC,oBAAoB,CAAC;QAC5D,CAAS;QACT,6HAAA;QACQ,IAAI,CAAC,sBAAsB,EAAE;YACzB,uBAAuB,CAAC,aAAa,GACjC,sBAAsB,CAAC,qBAAqB,CAAC;QAC7D,CAAS;QACD,OAAO,sBAAsB,IAAI,IAAI,CAAC;IAC9C,CAAK;IACL;;;;;KAKA,GACI,MAAM,iBAAiB,CAAC,OAAO,EAAE,OAAO,EAAE;QACtC,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,gCAAgC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACpH,OAAO,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,EAAEA,WAAS,CAAC,aAAa,CAAC,aAAa,EAAE,OAAO,CAAC,YAAY,CAAC,EAAE,OAAO,EAAEA,WAAS,CAAC,YAAY,CAAC,CAAC;IAC3J,CAAK;IACL;;;;KAIA,GACI,MAAM,iBAAiB,CAAC,OAAO,EAAE;QAC7B,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,gCAAgC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACpH,IAAI;YACA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC,EAAEA,WAAS,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,CAAC;YAChI,yHAAA;YACY,IAAI,QAAQ,CAAC,MAAM,KAAK,UAAU,CAAC,WAAW,IAC1C,QAAQ,CAAC,IAAI,IACb,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAChC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7C,OAAO,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3D,CAAa;YACD,OAAO,IAAI,CAAC;QACxB,CAAS,CACD,OAAO,CAAC,EAAE;YACN,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;AACL,CAAC;AACD,wCAAA;AACA,eAAe,CAAC,YAAY,GAAG;IAC3B,OAAO,EAAE;QACL,QAAQ,EAAE,MAAM;IACxB,CAAK;AACL,CAAC;AC5GD,2CAAA,GAEA;;;CAGA,GACA;;CAEA,GACA;;CAEA,GACA,SAAS,UAAU,GAAG;IACtB,0CAAA;IACI,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,MAAM,CAAC,CAAC;AACrD,CAAC;AASD;;;CAGA,GACA,SAAS,iBAAiB,CAAC,OAAO,EAAE;IAChC,IAAI,OAAO,EAAE;QACT,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;IAChD,CAAK;IACD,OAAO,IAAI,IAAI,EAAE,CAAC;AACtB,CAAC;AACD;;;CAGA,GACA,SAAS,cAAc,CAAC,SAAS,EAAE,MAAM,EAAE;IAC3C,gCAAA;IACI,MAAM,aAAa,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC7C,MAAM,oBAAoB,GAAG,UAAU,EAAE,GAAG,MAAM,CAAC;IACvD,yFAAA;IACI,OAAO,oBAAoB,GAAG,aAAa,CAAC;AAChD,CAAC;AAWD;;;;;CAKA,GACA,SAAS,kBAAkB,CAAC,QAAQ,EAAE;IAClC,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;IACrC,OAAO,WAAW,GAAG,UAAU,EAAE,CAAC;AACtC,CAAC;AACD;;;;CAIA,GACA,SAAS,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE;IACrB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,GAAK,UAAU,CAAC,IAAM,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACzE;ACxEA,2CAAA,GAQA;;;CAGA,GACA;;;;;;CAMA,GACA,SAAS,mBAAmB,CAAC,aAAa,EAAE,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE;IAClF,MAAM,aAAa,GAAG;QAClB,cAAc,EAAE,cAAc,CAAC,QAAQ;QACvC,aAAa,EAAE,aAAa;QAC5B,WAAW,EAAE,WAAW;QACxB,QAAQ,EAAE,QAAQ;QAClB,MAAM,EAAE,OAAO;QACf,KAAK,EAAE,QAAQ;QACf,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;IAC5C,CAAK,CAAC;IACF,OAAO,aAAa,CAAC;AACzB,CAAC;AACD;;;;;;;;;;CAUA,GACA,SAAS,uBAAuB,CAAC,aAAa,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,SAAS,EAAE,iBAAiB,EAAE,KAAK,EAAE,eAAe,EAAE,mBAAmB,EAAE;IAC/N,MAAM,QAAQ,GAAG;QACb,aAAa,EAAE,aAAa;QAC5B,cAAc,EAAE,cAAc,CAAC,YAAY;QAC3C,MAAM,EAAE,WAAW;QACnB,QAAQ,EAAE,UAAU,EAAE,CAAC,QAAQ,EAAE;QACjC,SAAS,EAAE,SAAS,CAAC,QAAQ,EAAE;QAC/B,iBAAiB,EAAE,YAAY,CAAC,QAAQ,EAAE;QAC1C,WAAW,EAAE,WAAW;QACxB,QAAQ,EAAE,QAAQ;QAClB,KAAK,EAAE,QAAQ;QACf,MAAM,EAAE,MAAM;QACd,SAAS,EAAE,SAAS,IAAI,oBAAoB,CAAC,MAAM;QACnD,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;IAC5C,CAAK,CAAC;IACF,IAAI,iBAAiB,EAAE;QACnB,QAAQ,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IACvD,CAAK;IACD,IAAI,SAAS,EAAE;QACX,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;IAClD,CAAK;IACD,IAAI,eAAe,EAAE;QACjB,QAAQ,CAAC,eAAe,GAAG,eAAe,CAAC;QAC3C,QAAQ,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IAC3D,CAAK;IACL;;;KAGA,GACI,IAAI,QAAQ,CAAC,SAAS,EAAE,WAAW,EAAE,KACjC,oBAAoB,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE;QAC3C,QAAQ,CAAC,cAAc,GAAG,cAAc,CAAC,6BAA6B,CAAC;QACvE,OAAQ,QAAQ,CAAC,SAAS;YACtB,KAAK,oBAAoB,CAAC,GAAG;gBACzC,sDAAA;gBACgB,MAAM,WAAW,GAAG,kBAAkB,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;gBAClE,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE,GAAG,EAAE;oBACxB,MAAM,qBAAqB,CAAC,kCAAkC,CAAC,CAAC;gBACpF,CAAiB;gBACD,QAAQ,CAAC,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC;gBACrC,MAAM;YACV,KAAK,oBAAoB,CAAC,GAAG;gBACzB,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;QACvC,CAAS;IACT,CAAK;IACD,OAAO,QAAQ,CAAC;AACpB,CAAC;AACD;;;;;;CAMA,GACA,SAAS,wBAAwB,CAAC,aAAa,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,iBAAiB,EAAE,SAAS,EAAE;IAC1H,MAAM,QAAQ,GAAG;QACb,cAAc,EAAE,cAAc,CAAC,aAAa;QAC5C,aAAa,EAAE,aAAa;QAC5B,WAAW,EAAE,WAAW;QACxB,QAAQ,EAAE,QAAQ;QAClB,MAAM,EAAE,YAAY;QACpB,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;IAC5C,CAAK,CAAC;IACF,IAAI,iBAAiB,EAAE;QACnB,QAAQ,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IACvD,CAAK;IACD,IAAI,QAAQ,EAAE;QACV,QAAQ,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACrC,CAAK;IACD,IAAI,SAAS,EAAE;QACX,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC,QAAQ,EAAE,CAAC;IAClD,CAAK;IACD,OAAO,QAAQ,CAAC;AACpB,CAAC;AACD,SAAS,kBAAkB,CAAC,MAAM,EAAE;IAChC,OAAQ,MAAM,CAAC,cAAc,CAAC,eAAe,CAAC,IAC1C,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,IACpC,MAAM,CAAC,cAAc,CAAC,gBAAgB,CAAC,IACvC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,IACjC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;AACzC,CAAC;AACD;;;CAGA,GACA,SAAS,mBAAmB,CAAC,MAAM,EAAE;IACjC,IAAI,CAAC,MAAM,EAAE;QACT,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,OAAQ,kBAAkB,CAAC,MAAM,CAAC,IAC9B,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,IAC9B,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,IACvC,CAAS,MAAM,CAAC,gBAAgB,CAAC,KAAK,cAAc,CAAC,YAAY,IACrD,MAAM,CAAC,gBAAgB,CAAC,KACpB,cAAc,CAAC,6BAA6B,CAAC,EAAE;AAC/D,CAAC;AACD;;;CAGA,GACA,SAAS,eAAe,CAAC,MAAM,EAAE;IAC7B,IAAI,CAAC,MAAM,EAAE;QACT,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,OAAQ,kBAAkB,CAAC,MAAM,CAAC,IAC9B,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,IAC9B,MAAM,CAAC,gBAAgB,CAAC,KAAK,cAAc,CAAC,QAAQ,EAAE;AAC9D,CAAC;AACD;;;CAGA,GACA,SAAS,oBAAoB,CAAC,MAAM,EAAE;IAClC,IAAI,CAAC,MAAM,EAAE;QACT,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,OAAQ,kBAAkB,CAAC,MAAM,CAAC,IAC9B,MAAM,CAAC,gBAAgB,CAAC,KAAK,cAAc,CAAC,aAAa,EAAE;AACnE,CAAC;AACD;;;;CAIA,GACA,SAAS,uBAAuB,CAAC,GAAG,EAAE,MAAM,EAAE;IAC1C,MAAM,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC,sBAAsB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACxE,IAAI,cAAc,GAAG,IAAI,CAAC;IAC1B,IAAI,MAAM,EAAE;QACR,cAAc,GACV,MAAM,CAAC,cAAc,CAAC,gBAAgB,CAAC,IACnC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,IAC/B,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;IACnD,CAAK;IACD,OAAO,WAAW,IAAI,cAAc,CAAC;AACzC,CAAC;AACD;;;;CAIA,GACA,SAAS,kBAAkB,CAAC,GAAG,EAAE,MAAM,EAAE;IACrC,IAAI,WAAW,GAAG,KAAK,CAAC;IACxB,IAAI,GAAG,EAAE;QACL,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC,mBAAmB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAC/E,CAAK;IACD,IAAI,cAAc,GAAG,IAAI,CAAC;IAC1B,IAAI,MAAM,EAAE;QACR,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;IAC/D,CAAK;IACD,OAAO,WAAW,IAAI,cAAc,CAAC;AACzC,CAAC;AACD;;CAEA,GACA,SAAS,sBAAsB,CAAC,EAAE,WAAW,EAAE,QAAQ,EAAG,EAAE;IACxD,MAAM,mBAAmB,GAAG;QACxB,YAAY;QACZ,WAAW;QACX,QAAQ;KACX,CAAC;IACF,OAAO,mBAAmB,CACrB,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,CACpC,WAAW,EAAE,CAAC;AACvB,CAAC;AACD;;;CAGA,GACA,SAAS,mBAAmB,CAAC,GAAG,EAAE,MAAM,EAAE;IACtC,IAAI,CAAC,MAAM,EAAE;QACT,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,OAAQ,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,IACnC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,IACjC,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;AAC9C,CAAC;AACD;;;CAGA,GACA,SAAS,yBAAyB,CAAC,GAAG,EAAE,MAAM,EAAE;IAC5C,IAAI,CAAC,MAAM,EAAE;QACT,OAAO,KAAK,CAAC;IACrB,CAAK;IACD,OAAQ,GAAG,CAAC,OAAO,CAAC,4BAA4B,CAAC,SAAS,CAAC,KAAK,CAAC,IAC7D,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,IAChC,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,IACxC,MAAM,CAAC,cAAc,CAAC,mBAAmB,CAAC,IAC1C,MAAM,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAC5C,MAAM,CAAC,cAAc,CAAC,wBAAwB,CAAC,IAC/C,MAAM,CAAC,cAAc,CAAC,gBAAgB,CAAC,IACvC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,IAC/B,MAAM,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAC3C,MAAM,CAAC,cAAc,CAAC,sBAAsB,CAAC,IAC7C,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,IAClC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;AAC3C,CAAC;AACD;;CAEA,GACA,SAAS,kCAAkC,GAAG;IAC1C,OAAQ,UAAU,EAAE,GAChB,4BAA4B,CAAC,oBAAoB,EAAE;AAC3D,CAAC;AACD,SAAS,+BAA+B,CAAC,iBAAiB,EAAE,aAAa,EAAE,WAAW,EAAE;IACpF,iBAAiB,CAAC,sBAAsB,GACpC,aAAa,CAAC,sBAAsB,CAAC;IACzC,iBAAiB,CAAC,cAAc,GAAG,aAAa,CAAC,cAAc,CAAC;IAChE,iBAAiB,CAAC,oBAAoB,GAAG,aAAa,CAAC,oBAAoB,CAAC;IAC5E,iBAAiB,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;IAChD,iBAAiB,CAAC,oBAAoB,GAAG,WAAW,CAAC;IACrD,iBAAiB,CAAC,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC;AACxD,CAAC;AACD,SAAS,4BAA4B,CAAC,iBAAiB,EAAE,aAAa,EAAE,WAAW,EAAE;IACjF,iBAAiB,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC;IAClD,iBAAiB,CAAC,eAAe,GAAG,aAAa,CAAC,eAAe,CAAC;IAClE,iBAAiB,CAAC,iBAAiB,GAAG,aAAa,CAAC,iBAAiB,CAAC;IACtE,iBAAiB,CAAC,kBAAkB,GAAG,WAAW,CAAC;AACvD,CAAC;AACD;;CAEA,GACA,SAAS,0BAA0B,CAAC,QAAQ,EAAE;IAC1C,OAAO,QAAQ,CAAC,SAAS,IAAI,UAAU,EAAE,CAAC;AAC9C;AC1QA,2CAAA,GAqBA;;;CAGA,GACA;;;;CAIA,GACA,MAAM,SAAS,CAAC;IACZ,WAAW,CAAC,SAAS,EAAE,gBAAgB,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,EAAE,aAAa,EAAE,iBAAiB,EAAE,eAAe,CAAE;QAChI,IAAI,CAAC,kBAAkB,GAAG,SAAS,CAAC;QACpC,IAAI,CAAC,mBAAmB,CAAC,aAAa,EAAE,CAAC;QACzC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,uBAAuB,GAAG;YAC3B,WAAW,EAAE,SAAS;YACtB,aAAa,EAAE,SAAS;YACxB,cAAc,EAAE,SAAS;QACrC,CAAS,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,eAAe,GAAG,eAAe,IAAI,KAAK,CAAC;QAChD,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,CAAC,gBAAgB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9H,CAAK;IACL;;;;KAIA,GACI,gBAAgB,CAAC,YAAY,EAAE;QACnC,yEAAA;QACQ,IAAI,YAAY,CAAC,eAAe,CAAC,QAAQ,CAACA,WAAS,CAAC,aAAa,CAAC,EAAE;YAChE,OAAO,aAAa,CAAC,IAAI,CAAC;QACtC,CAAS;QACD,MAAM,YAAY,GAAG,YAAY,CAAC,YAAY,CAAC;QAC/C,IAAI,YAAY,CAAC,MAAM,EAAE;YACrB,OAAQ,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;gBACjC,KAAKA,WAAS,CAAC,IAAI;oBACf,OAAO,aAAa,CAAC,IAAI,CAAC;gBAC9B,KAAKA,WAAS,CAAC,IAAI;oBACf,OAAO,aAAa,CAAC,IAAI,CAAC;YAC9C,CAAa;QACb,CAAS;QACD,OAAO,aAAa,CAAC,OAAO,CAAC;IACrC,CAAK;IACL,8BAAA;IACI,IAAI,aAAa,GAAG;QAChB,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;IAC3E,CAAK;IACL;;KAEA,GACI,IAAI,YAAY,GAAG;QACf,OAAO,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC;IAClD,CAAK;IACL;;KAEA,GACI,IAAI,OAAO,GAAG;QACV,OAAO,IAAI,CAAC,gBAAgB,CAAC;IACrC,CAAK;IACL;;KAEA,GACI,IAAI,kBAAkB,GAAG;QACrB,OAAO,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC;IAClD,CAAK;IACL;;KAEA,GACI,IAAI,kBAAkB,CAAC,GAAG,EAAE;QACxB,IAAI,CAAC,mBAAmB,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;QAC9C,IAAI,CAAC,mBAAmB,CAAC,aAAa,EAAE,CAAC;QACzC,IAAI,CAAC,gCAAgC,GAAG,IAAI,CAAC;IACrD,CAAK;IACL;;KAEA,GACI,IAAI,+BAA+B,GAAG;QAClC,IAAI,CAAC,IAAI,CAAC,gCAAgC,EAAE;YACxC,IAAI,CAAC,gCAAgC,GACjC,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,EAAE,CAAC;QAC5D,CAAS;QACD,OAAO,IAAI,CAAC,gCAAgC,CAAC;IACrD,CAAK;IACL;;KAEA,GACI,IAAI,eAAe,GAAG;QAClB,OAAO,IAAI,CAAC,+BAA+B,CAAC,eAAe,CAAC,WAAW,EAAE,CAAC;IAClF,CAAK;IACL;;KAEA,GACI,IAAI,MAAM,GAAG;QACT,OAAO,IAAI,CAAC,+BAA+B,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACpE,CAAK;IACL;;KAEA,GACI,IAAI,qBAAqB,GAAG;QACxB,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;YAC1B,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC;QAC1E,CAAS,MACI;YACD,MAAM,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;QACjE,CAAS;IACT,CAAK;IACL;;KAEA,GACI,IAAI,aAAa,GAAG;QAChB,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;YAC1B,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;QAClE,CAAS,MACI;YACD,MAAM,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;QACjE,CAAS;IACT,CAAK;IACD,IAAI,kBAAkB,GAAG;QACrB,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;YAC1B,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC,CAAC;QACnG,CAAS,MACI;YACD,MAAM,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;QACjE,CAAS;IACT,CAAK;IACL;;KAEA,GACI,IAAI,kBAAkB,GAAG;QACrB,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;YACtC,sDAAA;YACY,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE;gBACrC,MAAM,qBAAqB,CAAC,8BAA8B,CAAC,CAAC;YAC5E,CAAa;YACD,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;QACxE,CAAS,MACI;YACD,MAAM,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;QACjE,CAAS;IACT,CAAK;IACL;;KAEA,GACI,IAAI,qBAAqB,GAAG;QACxB,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;YAC1B,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC1D,CAAS,MACI;YACD,MAAM,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;QACjE,CAAS;IACT,CAAK;IACL;;KAEA,GACI,IAAI,OAAO,GAAG;QACV,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;YAC1B,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC5D,CAAS,MACI;YACD,MAAM,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;QACjE,CAAS;IACT,CAAK;IACL;;;;KAIA,GACI,gBAAgB,CAAC,YAAY,EAAE;QAC3B,OAAQ,YAAY,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,IAC1C,CAAC,SAAS,CAAC,qBAAqB,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAClE,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,KAAK,aAAa,CAAC,OAAO,IAC7D,IAAI,CAAC,YAAY,KAAK,YAAY,CAAC,IAAI,EAAE;IACrD,CAAK;IACL;;;KAGA,GACI,aAAa,CAAC,SAAS,EAAE;QACrB,OAAO,SAAS,CAAC,OAAO,CAAC,sBAAsB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACtE,CAAK;IACL;;;KAGA,GACI,WAAW,CAAC,SAAS,EAAE;QACnB,IAAI,QAAQ,GAAG,SAAS,CAAC;QACzB,MAAM,kBAAkB,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QAC5E,MAAM,4BAA4B,GAAG,kBAAkB,CAAC,gBAAgB,EAAE,CAAC;QAC3E,MAAM,oBAAoB,GAAG,4BAA4B,CAAC,YAAY,CAAC;QACvE,MAAM,qBAAqB,GAAG,IAAI,CAAC,+BAA+B,CAAC,YAAY,CAAC;QAChF,qBAAqB,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,KAAK,KAAK;YAClD,IAAI,UAAU,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;YAC7C,IAAI,KAAK,KAAK,CAAC,IACX,IAAI,CAAC,gBAAgB,CAAC,4BAA4B,CAAC,EAAE;gBACrD,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC,gBAAgB,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;gBACxH;;;;iBAIA,GACgB,IAAI,UAAU,KAAK,QAAQ,EAAE;oBACzB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,6BAA6B,EAAE,UAAU,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACtF,UAAU,GAAG,QAAQ,CAAC;gBAC1C,CAAiB;YACjB,CAAa;YACD,IAAI,WAAW,KAAK,UAAU,EAAE;gBAC5B,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YACnF,CAAa;QACb,CAAS,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;IAC5C,CAAK;IACL;;KAEA,GACI,IAAI,kCAAkC,GAAG;QACrC,MAAM,sBAAsB,GAAG,IAAI,CAAC,eAAe,CAAC;QACpD,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC,IACzC,IAAI,CAAC,aAAa,KAAK,aAAa,CAAC,IAAI,IACxC,IAAI,CAAC,YAAY,KAAK,YAAY,CAAC,IAAI,IACpC,CAAC,IAAI,CAAC,gCAAgC,CAAC,sBAAsB,CAAC,CAAC,CAAE;YACrE,OAAO,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,gCAAgC,CAAC,CAAC;QAChF,CAAS;QACD,OAAO,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,qCAAqC,CAAC,CAAC;IACjF,CAAK;IACL;;KAEA,GACI,iBAAiB,GAAG;QAChB,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;IAC/B,CAAK;IACL;;;KAGA,GACI,MAAM,qBAAqB,GAAG;QAC1B,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,8BAA8B,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAClH,MAAM,cAAc,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QACvD,MAAM,oBAAoB,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,qCAAqC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,cAAc,CAAC,CAAC;QAC/N,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,cAAc,CAAC,iBAAiB,CAAC,CAAC;QAClH,MAAM,cAAc,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,+BAA+B,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,cAAc,CAAC,CAAC;QAC7M,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE,oBAAoB,EAAE;YAC5D,MAAM,EAAE,cAAc;QAClC,CAAS,CAAC,CAAC;QACH,IAAI,CAAC,iBAAiB,EAAE,SAAS,CAAC;YAC9B,oBAAoB,EAAE,oBAAoB;YAC1C,uBAAuB,EAAE,cAAc;QACnD,CAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAC/B,CAAK;IACL;;;;KAIA,GACI,wBAAwB,GAAG;QACvB,IAAI,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,2BAA2B,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACzF,IAAI,CAAC,cAAc,EAAE;YACjB,cAAc,GAAG;gBACb,OAAO,EAAE,EAAE;gBACX,eAAe,EAAE,IAAI,CAAC,eAAe;gBACrC,iBAAiB,EAAE,IAAI,CAAC,eAAe;gBACvC,mBAAmB,EAAE,IAAI,CAAC,kBAAkB;gBAC5C,sBAAsB,EAAE,EAAE;gBAC1B,cAAc,EAAE,EAAE;gBAClB,oBAAoB,EAAE,EAAE;gBACxB,MAAM,EAAE,EAAE;gBACV,kBAAkB,EAAE,KAAK;gBACzB,oBAAoB,EAAE,KAAK;gBAC3B,SAAS,EAAE,kCAAkC,EAAE;gBAC/C,QAAQ,EAAE,EAAE;YAC5B,CAAa,CAAC;QACd,CAAS;QACD,OAAO,cAAc,CAAC;IAC9B,CAAK;IACL;;;;;;KAMA,GACI,oBAAoB,CAAC,cAAc,EAAE,oBAAoB,EAAE,sBAAsB,EAAE;QAC/E,IAAI,oBAAoB,KAAK,uBAAuB,CAAC,KAAK,IACtD,sBAAsB,EAAE,MAAM,KAAK,uBAAuB,CAAC,KAAK,EAAE;YAC9E,mFAAA;YACY,cAAc,CAAC,SAAS,GACpB,kCAAkC,EAAE,CAAC;YACzC,cAAc,CAAC,mBAAmB,GAAG,IAAI,CAAC,kBAAkB,CAAC;QACzE,CAAS;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,iCAAiC,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;QACrG,IAAI,CAAC,YAAY,CAAC,oBAAoB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QACjE,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC;IACvC,CAAK;IACL;;;KAGA,GACI,MAAM,sBAAsB,CAAC,cAAc,EAAE;QACzC,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,+BAA+B,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACnH,MAAM,aAAa,GAAG,IAAI,CAAC,sCAAsC,CAAC,cAAc,CAAC,CAAC;QAC1F,0FAAA;QACQ,IAAI,aAAa,EAAE;YACf,IAAI,aAAa,CAAC,MAAM,KACpB,uBAAuB,CAAC,gBAAgB,EAAE;gBAC1D,qGAAA;gBACgB,IAAI,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,EAAE,WAAW,EAAE;oBAC7D,IAAI,aAAa,CAAC,QAAQ,EAAE;wBACxB,MAAM,iBAAiB,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,qCAAqC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,8CAA8C,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;wBACtP,+BAA+B,CAAC,cAAc,EAAE,iBAAiB,EAAE,KAAK,CAAC,CAAC;wBAC1E,cAAc,CAAC,mBAAmB,GAC9B,IAAI,CAAC,kBAAkB,CAAC;oBACpD,CAAqB;gBACrB,CAAiB;YACjB,CAAa;YACD,OAAO,aAAa,CAAC,MAAM,CAAC;QACxC,CAAS;QACT,8DAAA;QACQ,IAAI,QAAQ,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,uCAAuC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;QACvM,IAAI,QAAQ,EAAE;YACtB,qGAAA;YACY,IAAI,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,EAAE,WAAW,EAAE;gBAC7D,QAAQ,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,qCAAqC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,8CAA8C,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC;YACzO,CAAa;YACD,+BAA+B,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;YAChE,OAAO,uBAAuB,CAAC,OAAO,CAAC;QACnD,CAAS,MACI;YACb,qFAAA;YACY,MAAM,qBAAqB,CAAC,iBAAiB,EAAE,IAAI,CAAC,kCAAkC,CAAC,CAAC;QACpG,CAAS;IACT,CAAK;IACL;;;;;KAKA,GACI,sCAAsC,CAAC,cAAc,EAAE;QACnD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,kEAAkE,CAAC,CAAC;QACxF,MAAM,cAAc,GAAG,IAAI,CAAC,6BAA6B,EAAE,CAAC;QAC5D,IAAI,cAAc,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,oDAAoD,CAAC,CAAC;YAC1E,+BAA+B,CAAC,cAAc,EAAE,cAAc,EAAE,KAAK,CAAC,CAAC;YACvE,OAAO;gBACH,MAAM,EAAE,uBAAuB,CAAC,MAAM;YACtD,CAAa,CAAC;QACd,CAAS;QACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,gHAAgH,CAAC,CAAC;QAC9I,uLAAA;QACQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,0BAA0B,EAAE;YAClD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,yJAAyJ,CAAC,CAAC;QAC3L,CAAS,MACI;YACD,MAAM,iBAAiB,GAAG,IAAI,CAAC,sCAAsC,EAAE,CAAC;YACxE,IAAI,iBAAiB,EAAE;gBACnB,+BAA+B,CAAC,cAAc,EAAE,iBAAiB,EAAE,KAAK,CAAC,CAAC;gBAC1E,OAAO;oBACH,MAAM,EAAE,uBAAuB,CAAC,gBAAgB;oBAChD,QAAQ,EAAE,iBAAiB;gBAC/C,CAAiB,CAAC;YAClB,CAAa,MACI;gBACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,4HAA4H,CAAC,CAAC;YAClK,CAAa;QACb,CAAS;QACT,iDAAA;QACQ,MAAM,qBAAqB,GAAG,0BAA0B,CAAC,cAAc,CAAC,CAAC;QACzE,IAAI,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,IACxC,cAAc,CAAC,oBAAoB,IACnC,CAAC,qBAAqB,EAAE;YACpC,oBAAA;YACY,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,uCAAuC,CAAC,CAAC;YAC7D,OAAO;gBAAE,MAAM,EAAE,uBAAuB,CAAC,KAAK;YAAA,CAAE,CAAC;QAC7D,CAAS,MACI,IAAI,qBAAqB,EAAE;YAC5B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;QACnE,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;;;KAKA,GACI,mBAAmB,CAAC,cAAc,EAAE;QAChC,MAAM,kBAAkB,GAAG,IAAI,SAAS,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;QAC7E,MAAM,WAAW,GAAG,kBAAkB,CAAC,gBAAgB,EAAE,CAAC,YAAY,CAAC;QACvE,OAAQ,WAAW,CAAC,MAAM,KACtB,IAAI,CAAC,+BAA+B,CAAC,YAAY,CAAC,MAAM,EAAE;IACtE,CAAK;IACL;;KAEA,GACI,6BAA6B,GAAG;QAC5B,IAAI,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,EAAE;YACzC,IAAI;gBACA,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;YAC3E,CAAa,CACD,OAAO,CAAC,EAAE;gBACN,MAAM,8BAA8B,CAAC,wBAAwB,CAAC,CAAC;YAC/E,CAAa;QACb,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;;KAIA,GACI,MAAM,8BAA8B,GAAG;QACnC,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,uCAAuC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3H,MAAM,OAAO,GAAG,CAAA,CAAE,CAAC;QAC3B;;;SAGA,GACQ,MAAM,2BAA2B,GAAG,IAAI,CAAC,kCAAkC,CAAC;QAC5E,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,sFAAsF,EAAE,2BAA2B,CAAC,CAAC,CAAC,CAAC;QAC5I,IAAI;YACA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,2BAA2B,EAAE,OAAO,CAAC,CAAC;YACvG,MAAM,eAAe,GAAG,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC9D,IAAI,eAAe,EAAE;gBACjB,OAAO,QAAQ,CAAC,IAAI,CAAC;YACrC,CAAa,MACI;gBACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,0FAA0F,CAAC,CAAC,CAAC;gBAClH,OAAO,IAAI,CAAC;YAC5B,CAAa;QACb,CAAS,CACD,OAAO,CAAC,EAAE;YACN,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,0CAA0C,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACtE,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK;IACL;;KAEA,GACI,sCAAsC,GAAG;QACrC,IAAI,IAAI,CAAC,eAAe,IAAI,gBAAgB,EAAE;YAC1C,OAAO,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC1D,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;KAGA,GACI,MAAM,qCAAqC,CAAC,QAAQ,EAAE;QAClD,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,8CAA8C,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAClI,MAAM,yBAAyB,GAAG,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,EAAE,WAAW,CAAC;QAC9F,IAAI,yBAAyB,EAAE;YAC3B,IAAI,yBAAyB,KACzBA,WAAS,CAAC,+BAA+B,EAAE;gBAC3C,IAAI,CAAC,uBAAuB,CAAC,cAAc,GACvC,uBAAuB,CAAC,4BAA4B,CAAC;gBACzD,IAAI,CAAC,uBAAuB,CAAC,WAAW,GACpC,yBAAyB,CAAC;gBAC9B,OAAO,SAAS,CAAC,8BAA8B,CAAC,QAAQ,EAAE,yBAAyB,CAAC,CAAC;YACrG,CAAa;YACD,MAAM,sBAAsB,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,iBAAiB,CAAC,2BAA2B,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,EAC/P,iBAAiB,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;YACvD,IAAI,sBAAsB,EAAE;gBACxB,IAAI,CAAC,uBAAuB,CAAC,cAAc,GACvC,uBAAuB,CAAC,mCAAmC,CAAC;gBAChE,IAAI,CAAC,uBAAuB,CAAC,WAAW,GACpC,sBAAsB,CAAC;gBAC3B,OAAO,SAAS,CAAC,8BAA8B,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;YAClG,CAAa;YACD,IAAI,CAAC,uBAAuB,CAAC,cAAc,GACvC,uBAAuB,CAAC,+BAA+B,CAAC;QACxE,CAAS;QACD,OAAO,QAAQ,CAAC;IACxB,CAAK;IACL;;;;;KAKA,GACI,MAAM,4BAA4B,CAAC,cAAc,EAAE;QAC/C,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,qCAAqC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACzH,MAAM,mBAAmB,GAAG,IAAI,CAAC,4CAA4C,CAAC,cAAc,CAAC,CAAC;QAC9F,IAAI,mBAAmB,EAAE;YACrB,OAAO,mBAAmB,CAAC;QACvC,CAAS;QACT,yCAAA;QACQ,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,oCAAoC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,6CAA6C,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC;QACrN,IAAI,QAAQ,EAAE;YACV,4BAA4B,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;YAC7D,OAAO,uBAAuB,CAAC,OAAO,CAAC;QACnD,CAAS;QACT,qFAAA;QACQ,MAAM,8BAA8B,CAAC,kBAAkB,CAAC,CAAC;IACjE,CAAK;IACD,4CAA4C,CAAC,cAAc,EAAE;QACzD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,0EAA0E,CAAC,CAAC;QAChG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,mBAAmB,EAAE,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,IAC/EA,WAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QAChC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,oBAAoB,EAAE,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,IACjFA,WAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QAChC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,qBAAqB,EAAE,cAAc,CAAC,mBAAmB,IAAIA,WAAS,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QACjH,MAAM,QAAQ,GAAG,IAAI,CAAC,mCAAmC,EAAE,CAAC;QAC5D,IAAI,QAAQ,EAAE;YACV,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,2DAA2D,CAAC,CAAC;YACjF,4BAA4B,CAAC,cAAc,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;YAC9D,OAAO,uBAAuB,CAAC,MAAM,CAAC;QAClD,CAAS;QACT,0HAAA;QACQ,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,8HAA8H,CAAC,CAAC;QACpJ,IAAI,IAAI,CAAC,OAAO,CAAC,0BAA0B,EAAE;YACzC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,gLAAgL,CAAC,CAAC;QAClN,CAAS,MACI;YACD,MAAM,iBAAiB,GAAG,4CAA4C,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;YAC7F,IAAI,iBAAiB,EAAE;gBACnB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,uDAAuD,CAAC,CAAC;gBAC7E,4BAA4B,CAAC,cAAc,EAAE,iBAAiB,EAAE,KAAK,CAAC,CAAC;gBACvE,OAAO,uBAAuB,CAAC,gBAAgB,CAAC;YAChE,CAAa;YACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,0IAA0I,CAAC,CAAC;QAC5K,CAAS;QACD,MAAM,qBAAqB,GAAG,0BAA0B,CAAC,cAAc,CAAC,CAAC;QACzE,IAAI,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,IACxC,cAAc,CAAC,kBAAkB,IACjC,CAAC,qBAAqB,EAAE;YACxB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,8CAA8C,CAAC,CAAC;YAChF,oBAAA;YACY,OAAO,uBAAuB,CAAC,KAAK,CAAC;QACjD,CAAS,MACI,IAAI,qBAAqB,EAAE;YAC5B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;QACnE,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;KAEA,GACI,mCAAmC,GAAG;QAC1C,iDAAA;QACQ,IAAI,IAAI,CAAC,aAAa,KAAK,aAAa,CAAC,IAAI,EAAE;YAC3C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,qGAAqG,CAAC,CAAC;YAC3H,OAAO,SAAS,CAAC,oCAAoC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACxF,CAAS;QACT,mDAAA;QACQ,IAAI,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,EAAE;YAC9C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,sFAAsF,CAAC,CAAC;YAC5G,IAAI;gBACA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,mDAAmD,CAAC,CAAC;gBACzE,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;gBAChF,MAAM,QAAQ,GAAG,4CAA4C,CAAC,cAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;gBAC7G,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,sCAAsC,CAAC,CAAC;gBAC5D,IAAI,QAAQ,EAAE;oBACV,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,+EAA+E,CAAC,CAAC;oBACrG,OAAO,QAAQ,CAAC;gBACpC,CAAiB,MACI;oBACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,uEAAuE,CAAC,CAAC;gBACjH,CAAiB;YACjB,CAAa,CACD,OAAO,CAAC,EAAE;gBACN,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,gGAAgG,CAAC,CAAC;gBACtH,MAAM,8BAA8B,CAAC,6BAA6B,CAAC,CAAC;YACpF,CAAa;QACb,CAAS;QACT,0FAAA;QACQ,IAAI,IAAI,CAAC,oBAAoB,EAAE,EAAE;YAC7B,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,gGAAgG,CAAC,CAAC;YACtH,OAAO,SAAS,CAAC,oCAAoC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACxF,CAAS;QACD,OAAO,IAAI,CAAC;IACpB,CAAK;IACL;;;;KAIA,GACI,MAAM,oCAAoC,GAAG;QACzC,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,6CAA6C,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACjI,MAAM,yBAAyB,GAAG,CAAC,EAAEA,WAAS,CAAC,4BAA4B,CAAC,EAAE,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,CAAC;QAC7H,MAAM,OAAO,GAAG,CAAA,CAAE,CAAC;QAC3B;;;SAGA,GACQ,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,IAAI;YACA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,yBAAyB,EAAE,OAAO,CAAC,CAAC;YACrG,IAAI,iBAAiB,CAAC;YACtB,IAAI,QAAQ,CAAC;YACb,IAAI,gCAAgC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACjD,iBAAiB,GACb,QAAQ,CAAC,IAAI,CAAC;gBAClB,QAAQ,GAAG,iBAAiB,CAAC,QAAQ,CAAC;gBACtC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,8BAA8B,EAAE,iBAAiB,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC;YACvH,CAAa,MACI,IAAI,qCAAqC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAC3D,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,mHAAmH,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC7J,iBAAiB,GACb,QAAQ,CAAC,IAAI,CAAC;gBAClB,IAAI,iBAAiB,CAAC,KAAK,KAAKA,WAAS,CAAC,gBAAgB,EAAE;oBACxD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,oEAAoE,CAAC,CAAC;oBACxF,OAAO,IAAI,CAAC;gBAChC,CAAiB;gBACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,iDAAiD,EAAE,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,6DAA6D,EAAE,iBAAiB,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBAC3H,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,2FAA2F,CAAC,CAAC;gBACjH,QAAQ,GAAG,EAAE,CAAC;YAC9B,CAAa,MACI;gBACD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4FAA4F,CAAC,CAAC;gBAChH,OAAO,IAAI,CAAC;YAC5B,CAAa;YACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,wIAAwI,CAAC,CAAC;YAC9J,KAAK,GAAG,4CAA4C,CAAC,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACjG,CAAS,CACD,OAAO,KAAK,EAAE;YACV,IAAI,KAAK,YAAY,SAAS,EAAE;gBAC5B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,iGAAiG,EAAE,KAAK,CAAC,SAAS,CAAC,qBAAqB,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACnM,CAAa,MACI;gBACD,MAAM,UAAU,GAAG,KAAK,CAAC;gBACzB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,qGAAqG,EAAE,UAAU,CAAC,IAAI,CAAC,qBAAqB,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACvM,CAAa;YACD,OAAO,IAAI,CAAC;QACxB,CAAS;QACT,oFAAA;QACQ,IAAI,CAAC,KAAK,EAAE;YACR,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,sHAAsH,CAAC,CAAC;YAC5I,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,uDAAuD,CAAC,CAAC;YAC7E,KAAK,GAAG,SAAS,CAAC,oCAAoC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACzF,CAAS;QACD,OAAO,KAAK,CAAC;IACrB,CAAK;IACL;;KAEA,GACI,oBAAoB,GAAG;QACnB,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,SAAS,KAAK;YACzE,OAAQ,SAAS,IACb,SAAS,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,KAC/C,IAAI,CAAC,eAAe,EAAE;QAC1C,CAAS,CAAC,CAAC;QACH,OAAO,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IAClC,CAAK;IACL;;;;KAIA,GACI,OAAO,iBAAiB,CAAC,eAAe,EAAE,iBAAiB,EAAE;QACzD,IAAI,2BAA2B,CAAC;QAChC,IAAI,iBAAiB,IACjB,iBAAiB,CAAC,kBAAkB,KAAK,kBAAkB,CAAC,IAAI,EAAE;YAClE,MAAM,MAAM,GAAG,iBAAiB,CAAC,MAAM,GACjC,iBAAiB,CAAC,MAAM,GACxBA,WAAS,CAAC,qBAAqB,CAAC;YACtC,2BAA2B,GAAG,CAAC,EAAE,iBAAiB,CAAC,kBAAkB,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;QAC/F,CAAS;QACD,OAAO,2BAA2B,GAC5B,2BAA2B,GAC3B,eAAe,CAAC;IAC9B,CAAK;IACL;;;KAGA,GACI,OAAO,oCAAoC,CAAC,IAAI,EAAE;QAC9C,OAAO;YACH,iBAAiB,EAAE,IAAI;YACvB,eAAe,EAAE,IAAI;YACrB,OAAO,EAAE;gBAAC,IAAI;aAAC;QAC3B,CAAS,CAAC;IACV,CAAK;IACL;;KAEA,GACI,iBAAiB,GAAG;QAChB,IAAI,IAAI,CAAC,eAAe,EAAE;YACtB,OAAOA,WAAS,CAAC,sBAAsB,CAAC;QACpD,CAAS,MACI,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;YAC/B,OAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC;QACjD,CAAS,MACI;YACD,MAAM,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;QACjE,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,OAAO,CAAC,IAAI,EAAE;QACV,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAA,CAAE,CAAC;IACxD,CAAK;IACL;;;KAGA,GACI,gCAAgC,CAAC,IAAI,EAAE;QACnC,OAAO,gCAAgC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC1D,CAAK;IACL;;;;;KAKA,GACI,OAAO,sBAAsB,CAAC,IAAI,EAAE;QAChC,OAAOA,WAAS,CAAC,mBAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChE,CAAK;IACL;;;;;KAKA,GACI,OAAO,4BAA4B,CAAC,IAAI,EAAE,MAAM,EAAE,WAAW,EAAE;QACnE,4EAAA;QACQ,MAAM,oBAAoB,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;QACjD,oBAAoB,CAAC,aAAa,EAAE,CAAC;QACrC,MAAM,iBAAiB,GAAG,oBAAoB,CAAC,gBAAgB,EAAE,CAAC;QAClE,IAAI,eAAe,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,iBAAiB,CAAC,eAAe,CAAC,CAAC,CAAC;QACvE,IAAI,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,eAAe,CAAC,EAAE;YAChE,eAAe,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,EAAEA,WAAS,CAAC,iCAAiC,CAAC,CAAC,CAAC;QACzF,CAAS;QACT,8CAAA;QACQ,MAAM,GAAG,GAAG,SAAS,CAAC,+BAA+B,CAAC;YAClD,GAAG,oBAAoB,CAAC,gBAAgB,EAAE;YAC1C,eAAe,EAAE,eAAe;QAC5C,CAAS,CAAC,CAAC,SAAS,CAAC;QACrB,sDAAA;QACQ,IAAI,WAAW,EACX,OAAO,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC;QACnC,OAAO,GAAG,CAAC;IACnB,CAAK;IACL;;;;;KAKA,GACI,OAAO,8BAA8B,CAAC,QAAQ,EAAE,WAAW,EAAE;QACzD,MAAM,gBAAgB,GAAG;YAAE,GAAG,QAAQ;QAAA,CAAE,CAAC;QACzC,gBAAgB,CAAC,sBAAsB,GACnC,SAAS,CAAC,4BAA4B,CAAC,gBAAgB,CAAC,sBAAsB,EAAE,WAAW,CAAC,CAAC;QACjG,gBAAgB,CAAC,cAAc,GAC3B,SAAS,CAAC,4BAA4B,CAAC,gBAAgB,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;QACzF,IAAI,gBAAgB,CAAC,oBAAoB,EAAE;YACvC,gBAAgB,CAAC,oBAAoB,GACjC,SAAS,CAAC,4BAA4B,CAAC,gBAAgB,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAC;QAC3G,CAAS;QACD,OAAO,gBAAgB,CAAC;IAChC,CAAK;IACL;;;;;;;;KAQA,GACI,OAAO,sBAAsB,CAAC,SAAS,EAAE;QACrC,IAAI,aAAa,GAAG,SAAS,CAAC;QAC9B,MAAM,YAAY,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC;QAC9C,MAAM,sBAAsB,GAAG,YAAY,CAAC,gBAAgB,EAAE,CAAC;QACvE,oCAAA;QACQ,IAAI,sBAAsB,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,IAChD,sBAAsB,CAAC,eAAe,CAAC,QAAQ,CAACA,WAAS,CAAC,aAAa,CAAC,EAAE;YAC1E,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9E,aAAa,GAAG,CAAC,EAAE,aAAa,CAAC,EAAE,gBAAgB,CAAC,EAAEA,WAAS,CAAC,wBAAwB,CAAC,CAAC,CAAC;QACvG,CAAS;QACD,OAAO,aAAa,CAAC;IAC7B,CAAK;AACL,CAAC;AACD,wEAAA;AACA,SAAS,CAAC,qBAAqB,GAAG,IAAI,GAAG,CAAC;IACtC,UAAU;IACV,YAAY;IACZ,qBAAqB,CAAC,MAAM;IAC5B,qBAAqB,CAAC,SAAS;IAC/B,qBAAqB,CAAC,aAAa;CACtC,CAAC,CAAC;AACH;;CAEA,GACA,SAAS,4BAA4B,CAAC,SAAS,EAAE;IAC7C,MAAM,YAAY,GAAG,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC;IAC9C,MAAM,sBAAsB,GAAG,YAAY,CAAC,gBAAgB,EAAE,CAAC;IACnE;;;;;;;KAOA,GACI,MAAM,QAAQ,GAAG,sBAAsB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAA,CAAE,CAAC,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,CAAC;IACjF,OAAQ,QAAQ;QACZ,KAAK,qBAAqB,CAAC,MAAM,CAAC;QAClC,KAAK,qBAAqB,CAAC,aAAa,CAAC;QACzC,KAAK,qBAAqB,CAAC,SAAS;YAChC,OAAO,SAAS,CAAC;QACrB;YACI,OAAO,QAAQ,CAAC;IAC5B,CAAK;AACL,CAAC;AACD,SAAS,kBAAkB,CAAC,YAAY,EAAE;IACtC,OAAO,YAAY,CAAC,QAAQ,CAACA,WAAS,CAAC,aAAa,CAAC,GAC/C,YAAY,GACZ,CAAC,EAAE,YAAY,CAAC,EAAEA,WAAS,CAAC,aAAa,CAAC,CAAC,CAAC;AACtD,CAAC;AACD,SAAS,2BAA2B,CAAC,WAAW,EAAE;IAC9C,MAAM,yBAAyB,GAAG,WAAW,CAAC,sBAAsB,CAAC;IACrE,IAAI,sBAAsB,GAAG,SAAS,CAAC;IACvC,IAAI,yBAAyB,EAAE;QAC3B,IAAI;YACA,sBAAsB,GAAG,IAAI,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC3E,CAAS,CACD,OAAO,CAAC,EAAE;YACN,MAAM,8BAA8B,CAAC,6BAA6B,CAAC,CAAC;QAChF,CAAS;IACT,CAAK;IACD,OAAO;QACH,kBAAkB,EAAE,WAAW,CAAC,SAAS,GACnC,kBAAkB,CAAC,WAAW,CAAC,SAAS,CAAC,GACzC,SAAS;QACf,gBAAgB,EAAE,WAAW,CAAC,gBAAgB;QAC9C,sBAAsB,EAAE,sBAAsB;IACtD,CAAK,CAAC;AACN;ACx1BA,2CAAA,GAQA;;;CAGA,GACA;;;;;;;;;;CAUA,GACA,eAAe,wBAAwB,CAAC,YAAY,EAAE,aAAa,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,EAAE,aAAa,EAAE,iBAAiB,EAAE;IAC3I,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,wCAAwC,EAAE,aAAa,CAAC,CAAC;IAClH,MAAM,iBAAiB,GAAG,SAAS,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAC;IACjG,6DAAA;IACI,MAAM,qBAAqB,GAAG,IAAI,SAAS,CAAC,iBAAiB,EAAE,aAAa,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;IACxJ,IAAI;QACA,MAAM,WAAW,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,IAAI,CAAC,qBAAqB,CAAC,EAAE,iBAAiB,CAAC,8BAA8B,EAAE,MAAM,EAAE,iBAAiB,EAAE,aAAa,CAAC,EAAE,CAAC;QACzL,OAAO,qBAAqB,CAAC;IACrC,CAAK,CACD,OAAO,CAAC,EAAE;QACN,MAAM,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;IAC7D,CAAK;AACL;ACnCA,2CAAA,GAIA;;;CAGA,GACA;;CAEA,GACA,MAAM,WAAW,SAAS,SAAS,CAAC;IAChC,WAAW,CAAC,SAAS,EAAE,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAE;QAC5D,KAAK,CAAC,SAAS,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC;IAC3D,CAAK;AACL;ACnBA,2CAAA,GAEA;;;CAGA,GACA,SAAS,oBAAoB,CAAC,QAAQ,EAAE,OAAO,EAAE,aAAa,EAAE;IAC5D,OAAO;QACH,QAAQ,EAAE,QAAQ;QAClB,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,qBAAqB,EAAE,aAAa;QACpC,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;QAClD,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;QACpD,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;QAC9C,SAAS,EAAE,OAAO,CAAC,SAAS;QAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;QACtB,gBAAgB,EAAE,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,mBAAmB,EAAE,QAAQ;IAC3F,CAAK,CAAC;AACN;ACpBA,2CAAA,GAMA;;;CAGA,GACA,cAAA,GACA,MAAM,eAAe,CAAC;IACtB;;;KAGA,GACI,OAAO,4BAA4B,CAAC,UAAU,EAAE;QAC5C,OAAO,CAAC,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACxF,CAAK;IACL;;;;KAIA,GACI,OAAO,UAAU,CAAC,YAAY,EAAE,UAAU,EAAE,aAAa,EAAE;QACvD,MAAM,GAAG,GAAG,eAAe,CAAC,4BAA4B,CAAC,UAAU,CAAC,CAAC;QACrE,MAAM,KAAK,GAAG,YAAY,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;QACnD,IAAI,KAAK,EAAE;YACP,IAAI,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE;gBACjC,YAAY,CAAC,UAAU,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;gBAC5C,OAAO;YACvB,CAAa;YACD,MAAM,IAAI,WAAW,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC,IAAIA,WAAS,CAAC,YAAY,EAAE,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC7H,CAAS;IACT,CAAK;IACL;;;;;KAKA,GACI,OAAO,WAAW,CAAC,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa,EAAE;QAClE,IAAI,eAAe,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAC7C,eAAe,CAAC,0BAA0B,CAAC,QAAQ,CAAC,EAAE;YACtD,MAAM,eAAe,GAAG;gBACpB,YAAY,EAAE,eAAe,CAAC,qBAAqB,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC;gBACxG,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,KAAK;gBAC1B,UAAU,EAAE,QAAQ,CAAC,IAAI,CAAC,WAAW;gBACrC,YAAY,EAAE,QAAQ,CAAC,IAAI,CAAC,iBAAiB;gBAC7C,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,QAAQ;YAChD,CAAa,CAAC;YACF,YAAY,CAAC,kBAAkB,CAAC,eAAe,CAAC,4BAA4B,CAAC,UAAU,CAAC,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC;QACtI,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,OAAO,mBAAmB,CAAC,QAAQ,EAAE;QACjC,OAAQ,QAAQ,CAAC,MAAM,KAAK,GAAG,IAC1B,QAAQ,CAAC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAC,EAAE;IAC/D,CAAK;IACL;;;KAGA,GACI,OAAO,0BAA0B,CAAC,QAAQ,EAAE;QACxC,IAAI,QAAQ,CAAC,OAAO,EAAE;YAClB,OAAQ,QAAQ,CAAC,OAAO,CAAC,cAAc,CAAC,WAAW,CAAC,WAAW,CAAC,IAC5E,CAAiB,QAAQ,CAAC,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,MAAM,IAAI,GAAG,CAAC,EAAE;QACnE,CAAS;QACD,OAAO,KAAK,CAAC;IACrB,CAAK;IACL;;;KAGA,GACI,OAAO,qBAAqB,CAAC,YAAY,EAAE;QACvC,MAAM,IAAI,GAAG,YAAY,IAAI,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;QAClD,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;QACzC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,GACjD,CAAa,IAAI,IAAI,mBAAmB,CAAC,6BAA6B,CAAC,EAAE,cAAc,GAC3E,mBAAmB,CAAC,iCAAiC,CAAC,GAAG,IAAI,CAAC,CAAC;IAC3E,CAAK;IACD,OAAO,cAAc,CAAC,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAE,qBAAqB,EAAE;QAC1E,MAAM,UAAU,GAAG,oBAAoB,CAAC,QAAQ,EAAE,OAAO,EAAE,qBAAqB,CAAC,CAAC;QAClF,MAAM,GAAG,GAAG,IAAI,CAAC,4BAA4B,CAAC,UAAU,CAAC,CAAC;QAC1D,YAAY,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;IAC5D,CAAK;AACL;ACzFA,2CAAA,GAIA;;;CAGA,GACA;;CAEA,GACA,MAAM,YAAY,SAAS,SAAS,CAAC;IACjC,WAAW,CAAC,KAAK,EAAE,UAAU,EAAE,eAAe,CAAE;QAC5C,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC3D,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,YAAY,CAAC,SAAS,CAAC,CAAC;QACpD,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC;QAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC/C,CAAK;AACL;ACpBA,2CAAA,GAmBA;;;CAGA,GACA;;;CAGA,GACA,MAAM,UAAU,CAAC;IACb,WAAW,CAAC,aAAa,EAAE,iBAAiB,CAAE;QAClD,wBAAA;QACQ,IAAI,CAAC,MAAM,GAAG,wBAAwB,CAAC,aAAa,CAAC,CAAC;QAC9D,wBAAA;QACQ,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,EAAEE,MAAI,EAAEC,SAAO,CAAC,CAAC;QAC3E,oBAAA;QACQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC;QACvD,+BAAA;QACQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC;QACzD,4BAAA;QACQ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC;QAC1D,uBAAA;QACQ,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC;QACzE,gBAAA;QACQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC;QAC3D,mCAAA;QACQ,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IACnD,CAAK;IACL;;KAEA,GACI,yBAAyB,CAAC,OAAO,EAAE;QAC/B,MAAM,OAAO,GAAG,CAAA,CAAE,CAAC;QACnB,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,GAAGH,WAAS,CAAC,qBAAqB,CAAC;QACpE,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,oBAAoB,IAAI,OAAO,EAAE;YAC5D,OAAQ,OAAO,CAAC,IAAI;gBAChB,KAAK,iBAAiB,CAAC,eAAe;oBAClC,IAAI;wBACA,MAAM,UAAU,GAAG,gCAAgC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;wBACxE,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;oBACrG,CAAqB,CACD,OAAO,CAAC,EAAE;wBACN,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,kDAAkD,GAClE,CAAC,CAAC,CAAC;oBAC/B,CAAqB;oBACD,MAAM;gBACV,KAAK,iBAAiB,CAAC,GAAG;oBACtB,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC/D,MAAM;YAC1B,CAAa;QACb,CAAS;QACD,OAAO,OAAO,CAAC;IACvB,CAAK;IACL;;;;;;KAMA,GACI,MAAM,0BAA0B,CAAC,aAAa,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,EAAE,WAAW,EAAE;QAC1G,IAAI,WAAW,EAAE;YACb,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;QACpF,CAAS;QACD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,aAAa,EAAE;YAAE,IAAI,EAAE,WAAW;YAAE,OAAO,EAAE,OAAO;QAAA,CAAE,EAAE,aAAa,CAAC,CAAC;QAC/H,IAAI,IAAI,CAAC,MAAM,CAAC,sBAAsB,IAClC,QAAQ,CAAC,MAAM,GAAG,GAAG,IACrB,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;YACrC,sEAAA;YACY,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,mBAAmB,EAAE,CAAC;QACrE,CAAS;QACD,OAAO,QAAQ,CAAC;IACxB,CAAK;IACL;;;;;;KAMA,GACI,MAAM,eAAe,CAAC,UAAU,EAAE,aAAa,EAAE,OAAO,EAAE,aAAa,EAAE;QACrE,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;QACzE,IAAI,QAAQ,CAAC;QACb,IAAI;YACA,QAAQ,GAAG,MAAM,WAAW,CAAE,IAAI,CAAC,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,EAAG,iBAAiB,CAAC,iCAAiC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;YAClO,MAAM,eAAe,GAAG,QAAQ,CAAC,OAAO,IAAI,CAAA,CAAE,CAAC;YAC/C,IAAI,CAAC,iBAAiB,EAAE,SAAS,CAAC;gBAC9B,gBAAgB,EAAE,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,MAAM,IAAI,CAAC;gBAC1D,YAAY,EAAE,eAAe,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,EAAE;gBAClE,SAAS,EAAE,eAAe,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,EAAE;YAC7E,CAAa,EAAE,aAAa,CAAC,CAAC;QAC9B,CAAS,CACD,OAAO,CAAC,EAAE;YACN,IAAI,CAAC,YAAY,YAAY,EAAE;gBAC3B,MAAM,eAAe,GAAG,CAAC,CAAC,eAAe,CAAC;gBAC1C,IAAI,eAAe,EAAE;oBACjB,IAAI,CAAC,iBAAiB,EAAE,SAAS,CAAC;wBAC9B,YAAY,EAAE,eAAe,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,EAAE;wBAClE,SAAS,EAAE,eAAe,CAAC,WAAW,CAAC,eAAe,CAAC,IACnD,EAAE;wBACN,iBAAiB,EAAE,eAAe,CAAC,WAAW,CAAC,YAAY,CAAC,IACxD,SAAS;wBACb,mBAAmB,EAAE,eAAe,CAAC,WAAW,CAAC,cAAc,CAAC,IAC5D,SAAS;wBACb,UAAU,EAAE,CAAC,CAAC,UAAU;oBAChD,CAAqB,EAAE,aAAa,CAAC,CAAC;gBACtC,CAAiB;gBACD,MAAM,CAAC,CAAC,KAAK,CAAC;YAC9B,CAAa;YACD,IAAI,CAAC,YAAY,SAAS,EAAE;gBACxB,MAAM,CAAC,CAAC;YACxB,CAAa,MACI;gBACD,MAAM,qBAAqB,CAAC,YAAY,CAAC,CAAC;YAC1D,CAAa;QACb,CAAS;QACD,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;QACpF,OAAO,QAAQ,CAAC;IACxB,CAAK;IACL;;;KAGA,GACI,MAAM,eAAe,CAAC,qBAAqB,EAAE,aAAa,EAAE;QACxD,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,4BAA4B,EAAE,aAAa,CAAC,CAAC;QAC3G,MAAM,yBAAyB,GAAG,CAAC,QAAQ,EAAE,qBAAqB,CAAC,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC/F,MAAM,sBAAsB,GAAG,MAAM,wBAAwB,CAAC,yBAAyB,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC5M,IAAI,CAAC,SAAS,GAAG,sBAAsB,CAAC;IAChD,CAAK;IACL;;;KAGA,GACI,0BAA0B,CAAC,OAAO,EAAE;QAChC,MAAM,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;QAC7B,IAAI,OAAO,CAAC,gBAAgB,EAAE;YAC1B,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QACnH,CAAS;QACD,IAAI,OAAO,CAAC,oBAAoB,EAAE;YAC9B,uBAAuB,CAAC,UAAU,EAAE,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAC9E,CAAS;QACD,gBAAgB,CAAC,UAAU,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QACpD,sBAAsB,CAAC,UAAU,EAAE,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAClF,OAAO,gBAAgB,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAK;AACL;ACnKA,2CAAA,GAEA;;;CAGA,GACA;;;;;;;;CAQA,GACA,SAAS,4BAA4B,CAAC,aAAa,EAAE;IACjD,IAAI,aAAa,EAAE;QACf,MAAM,QAAQ,GAAG,aAAa,CAAC,GAAG,IAAI,aAAa,CAAC,GAAG,IAAI,aAAa,CAAC,GAAG,CAAC;QAC7E,OAAO,QAAQ,IAAI,IAAI,CAAC;IAChC,CAAK;IACD,OAAO,IAAI,CAAC;AAChB;ACrBA,2CAAA,GAWA;;;CAGA,GACA;;;;;;;;;;;;;;;;;;;;;;CAsBA,GACA,MAAM,aAAa,CAAC;IACpB;;KAEA,GACI,cAAc,GAAG;QACb,OAAO;YACH,aAAa,EAAE,IAAI,CAAC,aAAa;YACjC,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,QAAQ,EAAE,IAAI,CAAC,KAAK;YACpB,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,cAAc,EAAE,IAAI,CAAC,cAAc;YACnC,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,eAAe,EAAE,IAAI,CAAC,eAAe;YACrC,aAAa,EAAE,IAAI,CAAC,aAAa;YAC7C,+CAAA;YACY,cAAc,EAAE,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,EAAE,EAAE,GAAG,CAAC,CAAC,aAAa,KAAK;gBACvE,OAAO;oBAAC,aAAa,CAAC,QAAQ;oBAAE,aAAa;iBAAC,CAAC;YAC/D,CAAa,CAAC,CAAC;QACf,CAAS,CAAC;IACV,CAAK;IACL;;KAEA,GACI,cAAc,GAAG;QACb,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC;IACpC,CAAK;IACL;;;KAGA,GACI,OAAO,aAAa,CAAC,cAAc,EAAE,SAAS,EAAE,YAAY,EAAE;QAC1D,MAAM,OAAO,GAAG,IAAI,aAAa,EAAE,CAAC;QACpC,IAAI,SAAS,CAAC,aAAa,KAAK,aAAa,CAAC,IAAI,EAAE;YAChD,OAAO,CAAC,aAAa,GAAG,gBAAgB,CAAC,iBAAiB,CAAC;QACvE,CAAS,MACI,IAAI,SAAS,CAAC,YAAY,KAAK,YAAY,CAAC,IAAI,EAAE;YACnD,OAAO,CAAC,aAAa,GAAG,gBAAgB,CAAC,oBAAoB,CAAC;QAC1E,CAAS,MACI;YACD,OAAO,CAAC,aAAa,GAAG,gBAAgB,CAAC,kBAAkB,CAAC;QACxE,CAAS;QACD,IAAI,UAAU,CAAC;QACf,IAAI,cAAc,CAAC,UAAU,IAAI,YAAY,EAAE;YAC3C,UAAU,GAAG,eAAe,CAAC,cAAc,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC;QAClF,CAAS;QACD,OAAO,CAAC,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;QAC/C,OAAO,CAAC,aAAa,GAAG,cAAc,CAAC,aAAa,CAAC;QACrD,OAAO,CAAC,eAAe,GAAG,cAAc,CAAC,eAAe,CAAC;QACzD,MAAM,GAAG,GAAG,cAAc,CAAC,WAAW,IACjC,SAAS,IAAI,SAAS,CAAC,iBAAiB,EAAE,CAAC,CAAC;QACjD,IAAI,CAAC,GAAG,EAAE;YACN,MAAM,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;QACjE,CAAS;QACD,OAAO,CAAC,WAAW,GAAG,GAAG,CAAC;QAClC,yCAAA;QACQ,OAAO,CAAC,KAAK,GACT,UAAU,EAAE,IAAI,IACZ,4BAA4B,CAAC,cAAc,CAAC,aAAa,CAAC,IAC1D,EAAE,CAAC;QACnB,uCAAA;QACQ,OAAO,CAAC,cAAc,GAClB,UAAU,EAAE,GAAG,IACX,cAAc,CAAC,aAAa,EAAE,GAAG,IACjC,cAAc,CAAC,aAAa,EAAE,GAAG,IACjC,EAAE,CAAC;QACnB;;;;SAIA,GACQ,MAAM,iBAAiB,GAAG,cAAc,CAAC,aAAa,EAAE,kBAAkB,IACtE,cAAc,CAAC,aAAa,EAAE,GAAG,CAAC;QACtC,MAAM,KAAK,GAAG,cAAc,CAAC,aAAa,EAAE,MAAM,GAC5C,cAAc,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,GACtC,IAAI,CAAC;QACX,OAAO,CAAC,QAAQ,GAAG,iBAAiB,IAAI,KAAK,IAAI,EAAE,CAAC;QACpD,OAAO,CAAC,SAAS,GAAG,cAAc,CAAC,aAAa,EAAE,UAAU,CAAC;QAC7D,OAAO,CAAC,IAAI,GAAG,cAAc,CAAC,aAAa,EAAE,IAAI,IAAI,EAAE,CAAC;QACxD,OAAO,CAAC,kBAAkB,GAAG,cAAc,CAAC,kBAAkB,CAAC;QAC/D,OAAO,CAAC,WAAW,GAAG,cAAc,CAAC,WAAW,CAAC;QACjD,IAAI,cAAc,CAAC,cAAc,EAAE;YAC/B,OAAO,CAAC,cAAc,GAAG,cAAc,CAAC,cAAc,CAAC;QACnE,CAAS,MACI;YACD,MAAM,aAAa,GAAG,kBAAkB,CAAC,cAAc,CAAC,aAAa,EAAE,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,KAAK,EAAE,cAAc,CAAC,aAAa,CAAC,CAAC;YAC5I,OAAO,CAAC,cAAc,GAAG;gBAAC,aAAa;aAAC,CAAC;QACrD,CAAS;QACD,OAAO,OAAO,CAAC;IACvB,CAAK;IACL;;;;;;KAMA,GACI,OAAO,qBAAqB,CAAC,WAAW,EAAE,kBAAkB,EAAE,WAAW,EAAE;QACvE,MAAM,OAAO,GAAG,IAAI,aAAa,EAAE,CAAC;QACpC,OAAO,CAAC,aAAa,GACjB,WAAW,CAAC,aAAa,IAAI,gBAAgB,CAAC,oBAAoB,CAAC;QACvE,OAAO,CAAC,aAAa,GAAG,WAAW,CAAC,aAAa,CAAC;QAClD,OAAO,CAAC,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC;QACpD,OAAO,CAAC,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC;QACtD,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC;QACrC,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC;QAC9C,OAAO,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;QACxC,OAAO,CAAC,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;QAChC,OAAO,CAAC,SAAS,GAAG,WAAW,CAAC,SAAS,CAAC;QAC1C,OAAO,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAChD,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC;QAC1C,8CAAA;QACQ,OAAO,CAAC,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QAChF,OAAO,OAAO,CAAC;IACvB,CAAK;IACL;;;;KAIA,GACI,OAAO,qBAAqB,CAAC,gBAAgB,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,aAAa,EAAE;QAC/F,+DAAA;QACQ,IAAI,CAAA,CAAE,QAAQ,KAAK,aAAa,CAAC,IAAI,IACjC,QAAQ,KAAK,aAAa,CAAC,IAAI,CAAC,EAAE;YAC9C,sCAAA;YACY,IAAI,gBAAgB,EAAE;gBAClB,IAAI;oBACA,MAAM,UAAU,GAAG,eAAe,CAAC,gBAAgB,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC;oBAC7E,IAAI,UAAU,CAAC,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE;wBACnC,OAAO,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;oBACtE,CAAqB;gBACrB,CAAiB,CACD,OAAO,CAAC,EAAE,CAAA,CAAG;YAC7B,CAAa;YACD,MAAM,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;QACzD,CAAS;QACT,yBAAA;QACQ,OAAO,aAAa,EAAE,GAAG,IAAI,EAAE,CAAC;IACxC,CAAK;IACL;;;KAGA,GACI,OAAO,eAAe,CAAC,MAAM,EAAE;QAC3B,IAAI,CAAC,MAAM,EAAE;YACT,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,OAAQ,MAAM,CAAC,cAAc,CAAC,eAAe,CAAC,IAC1C,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,IACpC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,IAC9B,MAAM,CAAC,cAAc,CAAC,gBAAgB,CAAC,IACvC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,IACjC,MAAM,CAAC,cAAc,CAAC,eAAe,CAAC,EAAE;IACpD,CAAK;IACL;;;;;KAKA,GACI,OAAO,kBAAkB,CAAC,QAAQ,EAAE,QAAQ,EAAE,aAAa,EAAE;QACzD,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,EAAE;YACxB,OAAO,KAAK,CAAC;QACzB,CAAS;QACD,IAAI,WAAW,GAAG,IAAI,CAAC,CAAA,6EAAA;QACvB,IAAI,aAAa,EAAE;YACf,MAAM,cAAc,GAAI,QAAQ,CAAC,aAAa,IAC1C,CAAA,CAAE,CAAC,CAAC;YACR,MAAM,cAAc,GAAI,QAAQ,CAAC,aAAa,IAC1C,CAAA,CAAE,CAAC,CAAC;YACpB,4FAAA;YACY,WAAW,GACP,cAAc,CAAC,GAAG,KAAK,cAAc,CAAC,GAAG,IACrC,cAAc,CAAC,KAAK,KAAK,cAAc,CAAC,KAAK,CAAC;QAClE,CAAS;QACD,OAAQ,QAAQ,CAAC,aAAa,KAAK,QAAQ,CAAC,aAAa,IACrD,QAAQ,CAAC,cAAc,KAAK,QAAQ,CAAC,cAAc,IACnD,QAAQ,CAAC,QAAQ,KAAK,QAAQ,CAAC,QAAQ,IACvC,QAAQ,CAAC,QAAQ,KAAK,QAAQ,CAAC,QAAQ,IACvC,QAAQ,CAAC,SAAS,KAAK,QAAQ,CAAC,SAAS,IACzC,QAAQ,CAAC,WAAW,KAAK,QAAQ,CAAC,WAAW,IAC7C,QAAQ,CAAC,eAAe,KAAK,QAAQ,CAAC,eAAe,IACrD,WAAW,EAAE;IACzB,CAAK;AACL;AC9NA,2CAAA,GAEA;;;CAGA,GACA,wBAAA;AACA,MAAM,aAAa,GAAG,iBAAiB,CAAC;AACxC,MAAM,wBAAwB,GAAG,4BAA4B,CAAC;AAC9D,MAAM,mBAAmB,GAAG,uBAAuB,CAAC;AACpD,MAAM,YAAY,GAAG,gBAAgB,CAAC;AACtC,uCAAA;AACA,MAAM,mBAAmB,GAAG,sBAAsB,CAAC;AACnD,MAAM,eAAe,GAAG,kBAAkB,CAAC;AAC3C,MAAM,aAAa,GAAG,gBAAgB,CAAC;AACvC,MAAM,QAAQ,GAAG,WAAW;;;;;;;;;;;;ACf5B,2CAAA,GAQA;;;CAGA,GACA;;CAEA,GACA,MAAM,qCAAqC,GAAG;IAC1C,mBAAmB;IACnB,eAAe;IACf,aAAa;IACb,QAAQ;IACR,YAAY;CACf,CAAC;AACF,MAAM,sCAAsC,GAAG;IAC3C,cAAc;IACd,mBAAmB;IACnB,cAAc;IACd,uBAAuB;IACvB,kBAAkB;IAClB,WAAW;CACd,CAAC;AACF,MAAM,oCAAoC,GAAG;IACzC,CAAC,aAAa,CAAA,EAAG,sDAAsD;IACvE,CAAC,wBAAwB,CAAA,EAAG,qJAAqJ;IACjL,CAAC,mBAAmB,CAAA,EAAG,4BAA4B;IACnD,CAAC,QAAQ,CAAA,EAAG,+HAA+H;IAC3I,CAAC,YAAY,CAAA,EAAG,gIAAgI;AACpJ,CAAC,CAAC;AACF;;;CAGA,GACK,MAAC,mCAAmC,GAAG;IACxC,kBAAkB,EAAE;QAChB,IAAI,EAAE,aAAa;QACnB,IAAI,EAAE,oCAAoC,CAAC,aAAa,CAAC;IACjE,CAAK;IACD,0BAA0B,EAAE;QACxB,IAAI,EAAE,wBAAwB;QAC9B,IAAI,EAAE,oCAAoC,CAAC,wBAAwB,CAAC;IAC5E,CAAK;IACD,SAAS,EAAE;QACP,IAAI,EAAE,QAAQ;QACd,IAAI,EAAE,oCAAoC,CAAC,QAAQ,CAAC;IAC5D,CAAK;AACL,EAAE;AACF;;CAEA,GACA,MAAM,4BAA4B,SAAS,SAAS,CAAC;IACjD,WAAW,CAAC,SAAS,EAAE,YAAY,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,MAAM,EAAE,OAAO,CAAE;QAC/F,KAAK,CAAC,SAAS,EAAE,YAAY,EAAE,QAAQ,CAAC,CAAC;QACzC,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,4BAA4B,CAAC,SAAS,CAAC,CAAC;QACpE,IAAI,CAAC,SAAS,GAAG,SAAS,IAAIA,WAAS,CAAC,YAAY,CAAC;QACrD,IAAI,CAAC,OAAO,GAAG,OAAO,IAAIA,WAAS,CAAC,YAAY,CAAC;QACjD,IAAI,CAAC,aAAa,GAAG,aAAa,IAAIA,WAAS,CAAC,YAAY,CAAC;QAC7D,IAAI,CAAC,MAAM,GAAG,MAAM,IAAIA,WAAS,CAAC,YAAY,CAAC;QAC/C,IAAI,CAAC,IAAI,GAAG,8BAA8B,CAAC;QAC3C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC/B,CAAK;AACL,CAAC;AACD;;;;;CAKA,GACA,SAAS,0BAA0B,CAAC,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE;IAClE,MAAM,8BAA8B,GAAG,CAAC,CAAC,SAAS,IAC9C,qCAAqC,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAA,CAAE,CAAC;IAClE,MAAM,6BAA6B,GAAG,CAAC,CAAC,QAAQ,IAC5C,sCAAsC,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAA,CAAE,CAAC;IAClE,MAAM,8BAA8B,GAAG,CAAC,CAAC,WAAW,IAChD,qCAAqC,CAAC,IAAI,CAAC,CAAC,WAAW,KAAK;QACxD,OAAO,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAA,CAAE,CAAC;IACzD,CAAS,CAAC,CAAC;IACP,OAAQ,8BAA8B,IAClC,8BAA8B,IAC9B,6BAA6B,EAAE;AACvC,CAAC;AACD;;CAEA,GACA,SAAS,kCAAkC,CAAC,SAAS,EAAE;IACnD,OAAO,IAAI,4BAA4B,CAAC,SAAS,EAAE,oCAAoC,CAAC,SAAS,CAAC,CAAC,CAAC;AACxG;AC9FA,2CAAA,GAMA;;;CAGA,GACA;;CAEA,GACA,MAAM,aAAa,CAAC;IACpB;;;;KAIA,GACI,OAAO,eAAe,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE;QAC/C,MAAM,YAAY,GAAG,aAAa,CAAC,oBAAoB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACzE,OAAO,SAAS,GACV,CAAC,EAAE,YAAY,CAAC,EAAEA,WAAS,CAAC,cAAc,CAAC,EAAE,SAAS,CAAC,CAAC,GACxD,YAAY,CAAC;IAC3B,CAAK;IACL;;;;KAIA,GACI,OAAO,oBAAoB,CAAC,SAAS,EAAE,IAAI,EAAE;QACzC,IAAI,CAAC,SAAS,EAAE;YACZ,MAAM,qBAAqB,CAAC,cAAc,CAAC,CAAC;QACxD,CAAS;QACT,yFAAA;QACQ,MAAM,QAAQ,GAAG;YACb,EAAE,EAAE,SAAS,CAAC,aAAa,EAAE;QACzC,CAAS,CAAC;QACF,IAAI,IAAI,EAAE;YACN,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;QACjC,CAAS;QACD,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAC7C,OAAO,SAAS,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IACnD,CAAK;IACL;;;;KAIA,GACI,OAAO,iBAAiB,CAAC,SAAS,EAAE,KAAK,EAAE;QACvC,IAAI,CAAC,SAAS,EAAE;YACZ,MAAM,qBAAqB,CAAC,cAAc,CAAC,CAAC;QACxD,CAAS;QACD,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,qBAAqB,CAAC,YAAY,CAAC,CAAC;QACtD,CAAS;QACD,IAAI;YACZ,yFAAA;YACY,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAACA,WAAS,CAAC,cAAc,CAAC,CAAC;YACzD,MAAM,YAAY,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YACnC,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,GACjC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAACA,WAAS,CAAC,cAAc,CAAC,GAClDA,WAAS,CAAC,YAAY,CAAC;YAC7B,MAAM,kBAAkB,GAAG,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;YAChE,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;YACvD,OAAO;gBACH,gBAAgB,EAAE,SAAS,IAAIA,WAAS,CAAC,YAAY;gBACrD,YAAY,EAAE,eAAe;YAC7C,CAAa,CAAC;QACd,CAAS,CACD,OAAO,CAAC,EAAE;YACN,MAAM,qBAAqB,CAAC,YAAY,CAAC,CAAC;QACtD,CAAS;IACT,CAAK;AACL;AC1EA,2CAAA,GAOA;;;CAGA,GACA,MAAM,WAAW,GAAG;IAChB,EAAE,EAAE;AAAI,CAAC,CAAC;AACd,cAAA,GACA,MAAM,iBAAiB,CAAC;IACpB,WAAW,CAAC,WAAW,EAAE,iBAAiB,CAAE;QACxC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IACnD,CAAK;IACL;;;;;KAKA,GACI,MAAM,WAAW,CAAC,OAAO,EAAE,MAAM,EAAE;QAC/B,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QAC1G,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,mBAAmB,EAAE,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC;QACrK,MAAM,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;QAC9E,OAAO;YACH,GAAG,EAAE,MAAM,CAAC,GAAG;YACf,YAAY;QACxB,CAAS,CAAC;IACV,CAAK;IACL;;;;KAIA,GACI,MAAM,WAAW,CAAC,OAAO,EAAE;QACvB,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QAC1G,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QAC7E,OAAO;YACH,GAAG,EAAE,aAAa;YAClB,OAAO,EAAE,WAAW,CAAC,EAAE;QACnC,CAAS,CAAC;IACV,CAAK;IACL;;;;;KAKA,GACI,MAAM,YAAY,CAAC,WAAW,EAAE,KAAK,EAAE,OAAO,EAAE;QAC5C,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC7D,CAAK;IACL;;;;;;;KAOA,GACI,MAAM,WAAW,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE;QACvD,gDAAA;QACQ,MAAM,EAAE,qBAAqB,EAAE,kBAAkB,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAG,GAAG,OAAO,CAAC;QAChG,MAAM,iBAAiB,GAAG,kBAAkB,GACtC,IAAI,SAAS,CAAC,kBAAkB,CAAC,GACjC,SAAS,CAAC;QAChB,MAAM,qBAAqB,GAAG,iBAAiB,EAAE,gBAAgB,EAAE,CAAC;QACpE,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;YAC5B,EAAE,EAAE,OAAO;YACX,EAAE,EAAE,UAAU,EAAE;YAChB,CAAC,EAAE,qBAAqB,EAAE,WAAW,EAAE;YACvC,CAAC,EAAE,qBAAqB,EAAE,eAAe;YACzC,KAAK,EAAE,QAAQ,IAAI,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE;YACnD,CAAC,EAAE,qBAAqB,EAAE,YAAY;YACtC,CAAC,EAAE,qBAAqB,EAAE,WAAW,GAC/B;gBAAC,EAAE;gBAAE,qBAAqB,CAAC,WAAW;aAAC,GACvC,SAAS;YACf,aAAa,EAAE,SAAS,IAAI,SAAS;YACrC,GAAG,MAAM;QACrB,CAAS,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;IACrD,CAAK;AACL;ACrFA,2CAAA,GAEA;;;CAGA,GACA;;;CAGA,GAAI,MAAM,iBAAiB,CAAC;IACxB,WAAW,CAAC,UAAU,EAAE,UAAU,CAAE;QAChC,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;QACxB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,CAAK;IACL;;KAEA,GACI,IAAI,eAAe,GAAG;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC;IAC/B,CAAK;IACL;;KAEA,GACI,IAAI,UAAU,GAAG;QACb,OAAO,IAAI,CAAC,KAAK,CAAC;IAC1B,CAAK;AACL;AC1BA,2CAAA,GAmBA;;;CAGA,GACA;;;CAGA,GACA,MAAM,eAAe,CAAC;IAClB,WAAW,CAAC,QAAQ,EAAE,YAAY,EAAE,SAAS,EAAE,MAAM,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,iBAAiB,CAAE;QAC5G,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IACnD,CAAK;IACL;;;;KAIA,GACI,qBAAqB,CAAC,cAAc,EAAE,kBAAkB,EAAE;QAC9D,kBAAA;QACQ,IAAI,cAAc,CAAC,KAAK,IACpB,cAAc,CAAC,iBAAiB,IAChC,cAAc,CAAC,QAAQ,EAAE;YACzB,MAAM,SAAS,GAAG,CAAC,UAAU,EAAE,cAAc,CAAC,WAAW,IAAIA,WAAS,CAAC,aAAa,CAAC,cAAc,EAAE,cAAc,CAAC,SAAS,IAAIA,WAAS,CAAC,aAAa,CAAC,gBAAgB,EAAE,cAAc,CAAC,iBAAiB,IAAIA,WAAS,CAAC,aAAa,CAAC,mBAAmB,EAAE,cAAc,CAAC,cAAc,IAAIA,WAAS,CAAC,aAAa,CAAC,aAAa,EAAE,cAAc,CAAC,QAAQ,IAAIA,WAAS,CAAC,aAAa,CAAC,CAAC,CAAC;YACzX,MAAM,aAAa,GAAG,cAAc,CAAC,WAAW,EAAE,MAAM,GAClD,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,GAC7B,SAAS,CAAC;YAChB,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,cAAc,CAAC,KAAK,EAAE,SAAS,EAAE,cAAc,CAAC,QAAQ,EAAE,aAAa,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;YAChJ,qBAAA;YACY,IAAI,kBAAkB,IAClB,cAAc,CAAC,MAAM,IACrB,cAAc,CAAC,MAAM,IAAI,UAAU,CAAC,wBAAwB,IAC5D,cAAc,CAAC,MAAM,IAAI,UAAU,CAAC,sBAAsB,EAAE;gBAC5D,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,0HAA0H,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;gBAChL,mGAAA;gBACgB,OAAO;YACvB,qBAAA;YACA,CAAa,MACI,IAAI,kBAAkB,IACvB,cAAc,CAAC,MAAM,IACrB,cAAc,CAAC,MAAM,IAAI,UAAU,CAAC,wBAAwB,IAC5D,cAAc,CAAC,MAAM,IAAI,UAAU,CAAC,sBAAsB,EAAE;gBAC5D,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,mHAAmH,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;gBACzK,mGAAA;gBACgB,OAAO;YACvB,CAAa;YACD,IAAI,0BAA0B,CAAC,cAAc,CAAC,KAAK,EAAE,cAAc,CAAC,iBAAiB,EAAE,cAAc,CAAC,QAAQ,CAAC,EAAE;gBAC7G,MAAM,IAAI,4BAA4B,CAAC,cAAc,CAAC,KAAK,EAAE,cAAc,CAAC,iBAAiB,EAAE,cAAc,CAAC,QAAQ,EAAE,cAAc,CAAC,SAAS,IAAIA,WAAS,CAAC,YAAY,EAAE,cAAc,CAAC,QAAQ,IAAIA,WAAS,CAAC,YAAY,EAAE,cAAc,CAAC,cAAc,IAAIA,WAAS,CAAC,YAAY,EAAE,cAAc,CAAC,MAAM,IAAIA,WAAS,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;YACxW,CAAa;YACD,MAAM,WAAW,CAAC;QAC9B,CAAS;IACT,CAAK;IACL;;;;KAIA,GACI,MAAM,yBAAyB,CAAC,mBAAmB,EAAE,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,eAAe,EAAE,iBAAiB,EAAE,4BAA4B,EAAE,8BAA8B,EAAE,eAAe,EAAE;QACtM,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,yBAAyB,EAAE,mBAAmB,CAAC,cAAc,CAAC,CAAC;QACrI,wCAAA;QACQ,IAAI,aAAa,CAAC;QAClB,IAAI,mBAAmB,CAAC,QAAQ,EAAE;YAC9B,aAAa,GAAG,kBAAkB,CAAC,mBAAmB,CAAC,QAAQ,IAAIA,WAAS,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;YACpI,gEAAA;YACY,IAAI,eAAe,IAAI,eAAe,CAAC,KAAK,EAAE;gBAC1C,IAAI,aAAa,CAAC,KAAK,KAAK,eAAe,CAAC,KAAK,EAAE;oBAC/C,MAAM,qBAAqB,CAAC,aAAa,CAAC,CAAC;gBAC/D,CAAiB;YACjB,CAAa;YACb,sBAAA;YACY,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxC,MAAM,QAAQ,GAAG,aAAa,CAAC,SAAS,CAAC;gBACzC,IAAI,CAAC,QAAQ,EAAE;oBACX,MAAM,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;gBAClE,CAAiB;gBACD,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;YACtD,CAAa;QACb,CAAS;QACT,yBAAA;QACQ,IAAI,CAAC,qBAAqB,GAAG,aAAa,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,WAAW,IAAIA,WAAS,CAAC,YAAY,EAAE,SAAS,CAAC,aAAa,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;QACzM,2BAAA;QACQ,IAAI,eAAe,CAAC;QACpB,IAAI,CAAC,CAAC,eAAe,IAAI,CAAC,CAAC,eAAe,CAAC,KAAK,EAAE;YAC9C,eAAe,GAAG,aAAa,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,EAAE,eAAe,CAAC,KAAK,CAAC,CAAC;QACrG,CAAS;QACT,2DAAA;QACQ,mBAAmB,CAAC,MAAM,GACtB,mBAAmB,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,IAAI,SAAS,CAAC;QAC9D,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,EAAE,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,eAAe,CAAC,CAAC;QACvJ,IAAI,YAAY,CAAC;QACjB,IAAI;YACA,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,EAAE;gBAClD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,gDAAgD,CAAC,CAAC;gBACtE,YAAY,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;gBACnE,MAAM,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAC7E,CAAa;YACb;;;;;aAKA,GACY,IAAI,4BAA4B,IAC5B,CAAC,8BAA8B,IAC/B,WAAW,CAAC,OAAO,EAAE;gBACrB,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC;gBACvF,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;gBACzE,IAAI,CAAC,OAAO,EAAE;oBACV,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,qGAAqG,CAAC,CAAC;oBAC3H,OAAO,MAAM,eAAe,CAAC,4BAA4B,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC;gBAClM,CAAiB;YACjB,CAAa;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,WAAW,EAAE,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;QAC9G,CAAS,QACO;YACJ,IAAI,IAAI,CAAC,iBAAiB,IACtB,IAAI,CAAC,iBAAiB,IACtB,YAAY,EAAE;gBACd,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,+CAA+C,CAAC,CAAC;gBACrE,MAAM,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;YAC5E,CAAa;QACb,CAAS;QACD,OAAO,eAAe,CAAC,4BAA4B,CAAC,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,OAAO,EAAE,aAAa,EAAE,eAAe,EAAE,mBAAmB,EAAE,eAAe,CAAC,CAAC;IAC1L,CAAK;IACL;;;;;KAKA,GACI,mBAAmB,CAAC,mBAAmB,EAAE,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,eAAe,EAAE;QAC1H,MAAM,GAAG,GAAG,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAC1C,IAAI,CAAC,GAAG,EAAE;YACN,MAAM,qBAAqB,CAAC,uBAAuB,CAAC,CAAC;QACjE,CAAS;QACD,MAAM,cAAc,GAAG,4BAA4B,CAAC,aAAa,CAAC,CAAC;QAC3E,kDAAA;QACQ,IAAI,aAAa,CAAC;QAClB,IAAI,aAAa,CAAC;QAClB,IAAI,mBAAmB,CAAC,QAAQ,IAAI,CAAC,CAAC,aAAa,EAAE;YACjD,aAAa,GAAG,mBAAmB,CAAC,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,cAAc,IAAI,EAAE,CAAC,CAAC;YACxI,aAAa,GAAG,mBAAmB,CAAC,IAAI,CAAC,YAAY,EAAE,SAAS,EAAE,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,OAAO,CAAC,aAAa,EAAE,aAAa,EAAE,mBAAmB,CAAC,WAAW,EAAE,GAAG,EAAE,cAAc,EAAE,eAAe,EAAE,SAAS,EACjP,IAAI,CAAC,MAAM,CAAC,CAAC;QACzB,CAAS;QACT,cAAA;QACQ,IAAI,iBAAiB,GAAG,IAAI,CAAC;QAC7B,IAAI,mBAAmB,CAAC,YAAY,EAAE;YAC9C,gEAAA;YACY,MAAM,cAAc,GAAG,mBAAmB,CAAC,KAAK,GAC1C,QAAQ,CAAC,UAAU,CAAC,mBAAmB,CAAC,KAAK,CAAC,GAC9C,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;YACrD;;;aAGA,GACY,MAAM,SAAS,GAAG,CAAC,OAAO,mBAAmB,CAAC,UAAU,KAAK,QAAQ,GAC/D,QAAQ,CAAC,mBAAmB,CAAC,UAAU,EAAE,EAAE,CAAC,GAC5C,mBAAmB,CAAC,UAAU,KAAK,CAAC,CAAC;YAC3C,MAAM,YAAY,GAAG,CAAC,OAAO,mBAAmB,CAAC,cAAc,KAAK,QAAQ,GACtE,QAAQ,CAAC,mBAAmB,CAAC,cAAc,EAAE,EAAE,CAAC,GAChD,mBAAmB,CAAC,cAAc,KAAK,CAAC,CAAC;YAC/C,MAAM,SAAS,GAAG,CAAC,OAAO,mBAAmB,CAAC,UAAU,KAAK,QAAQ,GAC/D,QAAQ,CAAC,mBAAmB,CAAC,UAAU,EAAE,EAAE,CAAC,GAC5C,mBAAmB,CAAC,UAAU,KAAK,SAAS,CAAC;YACnD,MAAM,sBAAsB,GAAG,YAAY,GAAG,SAAS,CAAC;YACxD,MAAM,8BAA8B,GAAG,sBAAsB,GAAG,YAAY,CAAC;YAC7E,MAAM,gBAAgB,GAAG,SAAS,IAAI,SAAS,GAAG,CAAC,GAC7C,YAAY,GAAG,SAAS,GACxB,SAAS,CAAC;YAC5B,yCAAA;YACY,iBAAiB,GAAG,uBAAuB,CAAC,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,QAAQ,EAAE,cAAc,IAAI,SAAS,CAAC,MAAM,IAAI,EAAE,EAAE,cAAc,CAAC,WAAW,EAAE,EAAE,sBAAsB,EAAE,8BAA8B,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,gBAAgB,EAAE,mBAAmB,CAAC,UAAU,EAAE,iBAAiB,EAAE,mBAAmB,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,mBAAmB,CAAC,CAAC;QACrb,CAAS;QACT,eAAA;QACQ,IAAI,kBAAkB,GAAG,IAAI,CAAC;QAC9B,IAAI,mBAAmB,CAAC,aAAa,EAAE;YACnC,IAAI,WAAW,CAAC;YAChB,IAAI,mBAAmB,CAAC,wBAAwB,EAAE;gBAC9C,MAAM,WAAW,GAAG,OAAO,mBAAmB,CAAC,wBAAwB,KACnE,QAAQ,GACN,QAAQ,CAAC,mBAAmB,CAAC,wBAAwB,EAAE,EAAE,CAAC,GAC1D,mBAAmB,CAAC,wBAAwB,CAAC;gBACnD,WAAW,GAAG,YAAY,GAAG,WAAW,CAAC;YACzD,CAAa;YACD,kBAAkB,GAAG,wBAAwB,CAAC,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,EAAE,mBAAmB,CAAC,IAAI,EAAE,iBAAiB,EAAE,WAAW,CAAC,CAAC;QACvM,CAAS;QACT,cAAA;QACQ,IAAI,iBAAiB,GAAG,IAAI,CAAC;QAC7B,IAAI,mBAAmB,CAAC,IAAI,EAAE;YAC1B,iBAAiB,GAAG;gBAChB,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBACvB,WAAW,EAAE,GAAG;gBAChB,QAAQ,EAAE,mBAAmB,CAAC,IAAI;YAClD,CAAa,CAAC;QACd,CAAS;QACD,OAAO;YACH,OAAO,EAAE,aAAa;YACtB,OAAO,EAAE,aAAa;YACtB,WAAW,EAAE,iBAAiB;YAC9B,YAAY,EAAE,kBAAkB;YAChC,WAAW,EAAE,iBAAiB;QAC1C,CAAS,CAAC;IACV,CAAK;IACL;;;;;;;;;KASA,GACI,aAAa,4BAA4B,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,cAAc,EAAE,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,mBAAmB,EAAE,SAAS,EAAE;QAC/J,IAAI,WAAW,GAAGA,WAAS,CAAC,YAAY,CAAC;QACzC,IAAI,cAAc,GAAG,EAAE,CAAC;QACxB,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,IAAI,YAAY,CAAC;QACjB,IAAI,SAAS,CAAC;QACd,IAAI,QAAQ,GAAGA,WAAS,CAAC,YAAY,CAAC;QACtC,IAAI,WAAW,CAAC,WAAW,EAAE;YACrC;;;aAGA,GACY,IAAI,WAAW,CAAC,WAAW,CAAC,SAAS,KACjC,oBAAoB,CAAC,GAAG,IACxB,CAAC,OAAO,CAAC,MAAM,EAAE;gBACjB,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,SAAS,CAAC,CAAC;gBAC3D,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,WAAW,CAAC,WAAW,CAAC;gBAClD,IAAI,CAAC,KAAK,EAAE;oBACR,MAAM,qBAAqB,CAAC,YAAY,CAAC,CAAC;gBAC9D,CAAiB;gBACD,WAAW,GAAG,MAAM,iBAAiB,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;YAC3F,CAAa,MACI;gBACD,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC;YAC7D,CAAa;YACD,cAAc,GAAG,QAAQ,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;YAC3F,wFAAA;YACY,SAAS,GAAG,iBAAiB,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YACjE,YAAY,GAAG,iBAAiB,CAAC,WAAW,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;YAC5E,IAAI,WAAW,CAAC,WAAW,CAAC,SAAS,EAAE;gBACnC,SAAS,GAAG,iBAAiB,CAAC,WAAW,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;YACjF,CAAa;QACb,CAAS;QACD,IAAI,WAAW,CAAC,WAAW,EAAE;YACzB,QAAQ,GACJ,WAAW,CAAC,WAAW,CAAC,QAAQ,KAAK,aAAa,GAC5C,aAAa,GACb,EAAE,CAAC;QACzB,CAAS;QACD,MAAM,GAAG,GAAG,aAAa,EAAE,GAAG,IAAI,aAAa,EAAE,GAAG,IAAI,EAAE,CAAC;QAC3D,MAAM,GAAG,GAAG,aAAa,EAAE,GAAG,IAAI,EAAE,CAAC;QAC7C,yEAAA;QACQ,IAAI,mBAAmB,EAAE,aAAa,IAAI,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE;YAC7D,WAAW,CAAC,OAAO,CAAC,eAAe,GAC/B,mBAAmB,EAAE,aAAa,CAAC;QACnD,CAAS;QACD,MAAM,WAAW,GAAG,WAAW,CAAC,OAAO,GACjC,8BAA8B,CAAC,WAAW,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,SAAS,EAChF,aAAa,EAAE,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,GACzC,IAAI,CAAC;QACX,OAAO;YACH,SAAS,EAAE,SAAS,CAAC,kBAAkB;YACvC,QAAQ,EAAE,GAAG;YACb,QAAQ,EAAE,GAAG;YACb,MAAM,EAAE,cAAc;YACtB,OAAO,EAAE,WAAW;YACpB,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,IAAI,EAAE;YAC3C,aAAa,EAAE,aAAa,IAAI,CAAA,CAAE;YAClC,WAAW,EAAE,WAAW;YACxB,SAAS,EAAE,cAAc;YACzB,SAAS,EAAE,SAAS;YACpB,YAAY,EAAE,YAAY;YAC1B,SAAS,EAAE,SAAS;YACpB,aAAa,EAAE,OAAO,CAAC,aAAa;YACpC,SAAS,EAAE,SAAS,IAAIA,WAAS,CAAC,YAAY;YAC9C,QAAQ,EAAE,QAAQ;YAClB,SAAS,EAAE,WAAW,CAAC,WAAW,EAAE,SAAS,IAAIA,WAAS,CAAC,YAAY;YACvE,KAAK,EAAE,YAAY,GACb,YAAY,CAAC,gBAAgB,GAC7BA,WAAS,CAAC,YAAY;YAC5B,kBAAkB,EAAE,WAAW,CAAC,OAAO,EAAE,kBAAkB,IACvDA,WAAS,CAAC,YAAY;YAC1B,WAAW,EAAE,WAAW,CAAC,OAAO,EAAE,WAAW,IAAIA,WAAS,CAAC,YAAY;YACvE,IAAI,EAAE,mBAAmB,EAAE,QAAQ;YACnC,gBAAgB,EAAE,KAAK;QACnC,CAAS,CAAC;IACV,CAAK;AACL,CAAC;AACD,SAAS,mBAAmB,CAAC,YAAY,EAAE,SAAS,EAAE,aAAa,EAAE,YAAY,EAAE,aAAa,EAAE,aAAa,EAAE,UAAU,EAAE,WAAW,EAAE,cAAc,EAAE,eAAe,EAAE,eAAe,EAAE,MAAM,EAAE;IAChM,MAAM,EAAE,OAAO,CAAC,yBAAyB,CAAC,CAAC;IAC/C,0CAAA;IACI,MAAM,WAAW,GAAG,YAAY,CAAC,cAAc,EAAE,CAAC;IAClD,MAAM,cAAc,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,UAAU,KAAK;QACpD,OAAO,UAAU,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IACpD,CAAK,CAAC,CAAC;IACH,IAAI,aAAa,GAAG,IAAI,CAAC;IACzB,IAAI,cAAc,EAAE;QAChB,aAAa,GAAG,YAAY,CAAC,UAAU,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;IAC/E,CAAK;IACD,MAAM,WAAW,GAAG,aAAa,IAC7B,aAAa,CAAC,aAAa,CAAC;QACxB,aAAa;QACb,aAAa;QACb,UAAU;QACV,WAAW;QACX,kBAAkB,EAAE,eAAe,EAAE,qBAAqB;QAC1D,WAAW,EAAE,eAAe,EAAE,YAAY;QAC1C,eAAe,EAAE,eAAe;IAC5C,CAAS,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;IAChC,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,IAAI,EAAE,CAAC;IACxD,MAAM,QAAQ,GAAG,cAAc,IAAI,WAAW,CAAC,KAAK,CAAC;IACrD,IAAI,QAAQ,IACR,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,aAAa,KAAK;QACpC,OAAO,aAAa,CAAC,QAAQ,KAAK,QAAQ,CAAC;IACvD,CAAS,CAAC,EAAE;QACJ,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,aAAa,EAAE,WAAW,CAAC,cAAc,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;QAChH,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC9C,CAAK;IACD,WAAW,CAAC,cAAc,GAAG,cAAc,CAAC;IAC5C,OAAO,WAAW,CAAC;AACvB;AC1VA,2CAAA,GAEA;;;CAGA,GACA,eAAe,kBAAkB,CAAC,eAAe,EAAE,QAAQ,EAAE,aAAa,EAAE;IACxE,IAAI,OAAO,eAAe,KAAK,QAAQ,EAAE;QACrC,OAAO,eAAe,CAAC;IAC/B,CAAK,MACI;QACD,MAAM,MAAM,GAAG;YACX,QAAQ,EAAE,QAAQ;YAClB,aAAa,EAAE,aAAa;QACxC,CAAS,CAAC;QACF,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC;IACvC,CAAK;AACL;ACjBA,2CAAA,GAwBA;;;CAGA,GACA;;;CAGA,GACA,MAAM,uBAAuB,SAAS,UAAU,CAAC;IAC7C,WAAW,CAAC,aAAa,EAAE,iBAAiB,CAAE;QAC1C,KAAK,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;QAChD,oEAAA;QACQ,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,iBAAiB,GAClB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,aAAa,CAAC;IACjF,CAAK;IACL;;;;KAIA,GACI,MAAM,YAAY,CAAC,OAAO,EAAE,eAAe,EAAE;QACzC,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,sBAAsB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QAC7G,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YACf,MAAM,qBAAqB,CAAC,mBAAmB,CAAC,CAAC;QAC7D,CAAS;QACD,MAAM,YAAY,GAAG,UAAU,EAAE,CAAC;QAClC,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,6BAA6B,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACtN,2CAAA;QACQ,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,EAAA,CAAG,WAAW,CAAC,eAAe,CAAC,CAAC;QAClE,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC9N,gGAAA;QACQ,eAAe,CAAC,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrD,OAAO,WAAW,CAAC,eAAe,CAAC,yBAAyB,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,iBAAiB,CAAC,yBAAyB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IACxT,CAAK;IACL;;;;KAIA,GACI,YAAY,CAAC,aAAa,EAAE;QAChC,iDAAA;QACQ,IAAI,CAAC,aAAa,EAAE;YAChB,MAAM,8BAA8B,CAAC,kBAAkB,CAAC,CAAC;QACrE,CAAS;QACD,MAAM,WAAW,GAAG,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;QAC3E,uBAAA;QACQ,OAAO,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,WAAW,CAAC,CAAC;IAC3F,CAAK;IACL;;;;KAIA,GACI,MAAM,mBAAmB,CAAC,SAAS,EAAE,OAAO,EAAE;QAC1C,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,6BAA6B,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QACpH,MAAM,qBAAqB,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,SAAS,CAAC,iBAAiB,CAAC,SAAS,CAAC,aAAa,EAAE,qBAAqB,CAAC,CAAC;QAC7F,MAAM,WAAW,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,gCAAgC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC;QACvM,IAAI,aAAa,GAAG,SAAS,CAAC;QAC9B,IAAI,OAAO,CAAC,UAAU,EAAE;YACpB,IAAI;gBACA,MAAM,UAAU,GAAG,eAAe,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;gBACtF,aAAa,GAAG;oBACZ,UAAU,EAAE,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,EAAE,UAAU,CAAC,qBAAqB,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;oBACpF,IAAI,EAAE,iBAAiB,CAAC,eAAe;gBAC3D,CAAiB,CAAC;YAClB,CAAa,CACD,OAAO,CAAC,EAAE;gBACN,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,8CAA8C,GAAG,CAAC,CAAC,CAAC;YACxF,CAAa;QACb,CAAS;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,yBAAyB,CAAC,aAAa,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC;QACvF,MAAM,UAAU,GAAG,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACnF,OAAO,WAAW,CAAC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,iDAAiD,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO,CAAC,aAAa,EAAE,iBAAiB,CAAC,iDAAiD,CAAC,CAAC;IAChV,CAAK;IACL;;;KAGA,GACI,MAAM,sBAAsB,CAAC,OAAO,EAAE;QAClC,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,gCAAgC,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QACvH,MAAM,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;QAC7B,WAAW,CAAC,UAAU,EAAE,OAAO,CAAC,gBAAgB,IAC5C,OAAO,CAAC,mBAAmB,EAAA,CAAG,SAAS,CAAC,IACxC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAC9C;;;SAGA,GACQ,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE;YACtC,gBAAA;YACY,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;gBACtB,MAAM,8BAA8B,CAAC,gBAAgB,CAAC,CAAC;YACvE,CAAa;QACb,CAAS,MACI;YACb,oCAAA;YACY,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;QAC5D,CAAS;QACT,wEAAA;QACQ,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC5E,oCAAA;QACQ,oBAAoB,CAAC,UAAU,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;QACvD,uBAAA;QACQ,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACpD,uBAAuB,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACvE,aAAa,CAAC,UAAU,CAAC,CAAC;QAC1B,IAAI,IAAI,CAAC,sBAAsB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACjE,kBAAkB,CAAC,UAAU,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACxE,CAAS;QACT,8BAAA;QACQ,IAAI,OAAO,CAAC,YAAY,EAAE;YACtB,eAAe,CAAC,UAAU,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;QAC9D,CAAS;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,YAAY,EAAE;YAC5C,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACpF,CAAS;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,eAAe,EAAE;YAC/C,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,eAAe,CAAC;YACtE,kBAAkB,CAAC,UAAU,EAAE,MAAM,kBAAkB,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAClJ,sBAAsB,CAAC,UAAU,EAAE,eAAe,CAAC,aAAa,CAAC,CAAC;QAC9E,CAAS;QACD,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,wBAAwB,CAAC,CAAC;QAC7D,aAAa,CAAC,UAAU,CAAC,CAAC;QAC1B,IAAI,OAAO,CAAC,oBAAoB,KAAK,oBAAoB,CAAC,GAAG,EAAE;YAC3D,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAC1F,IAAI,UAAU,CAAC;YACf,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACjB,MAAM,mBAAmB,GAAG,MAAM,WAAW,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,iBAAiB,CAAC,mBAAmB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC9N,UAAU,GAAG,mBAAmB,CAAC,YAAY,CAAC;YAC9D,CAAa,MACI;gBACD,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACxE,CAAa;YACb,oEAAA;YACY,WAAW,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAChD,CAAS,MACI,IAAI,OAAO,CAAC,oBAAoB,KAAK,oBAAoB,CAAC,GAAG,EAAE;YAChE,IAAI,OAAO,CAAC,MAAM,EAAE;gBAChB,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;YACtD,CAAa,MACI;gBACD,MAAM,8BAA8B,CAAC,aAAa,CAAC,CAAC;YACpE,CAAa;QACb,CAAS;QACD,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,IACtC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,IACvC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAE;YAC5D,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;QAC9F,CAAS;QACD,IAAI,OAAO,GAAG,SAAS,CAAC;QACxB,IAAI,OAAO,CAAC,UAAU,EAAE;YACpB,IAAI;gBACA,MAAM,UAAU,GAAG,eAAe,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;gBACtF,OAAO,GAAG;oBACN,UAAU,EAAE,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,EAAE,UAAU,CAAC,qBAAqB,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;oBACpF,IAAI,EAAE,iBAAiB,CAAC,eAAe;gBAC3D,CAAiB,CAAC;YAClB,CAAa,CACD,OAAO,CAAC,EAAE;gBACN,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,8CAA8C,GAAG,CAAC,CAAC,CAAC;YACxF,CAAa;QACb,CAAS,MACI;YACD,OAAO,GAAG,OAAO,CAAC,aAAa,CAAC;QAC5C,CAAS;QACT,+FAAA;QACQ,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,oBAAoB,IAAI,OAAO,EAAE;YAC3D,OAAQ,OAAO,CAAC,IAAI;gBAChB,KAAK,iBAAiB,CAAC,eAAe;oBAClC,IAAI;wBACA,MAAM,UAAU,GAAG,gCAAgC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;wBACxE,SAAS,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;oBAC1D,CAAqB,CACD,OAAO,CAAC,EAAE;wBACN,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,kDAAkD,GAClE,CAAC,CAAC,CAAC;oBAC/B,CAAqB;oBACD,MAAM;gBACV,KAAK,iBAAiB,CAAC,GAAG;oBACtB,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;oBAC1C,MAAM;YAC1B,CAAa;QACb,CAAS;QACD,IAAI,OAAO,CAAC,gBAAgB,EAAE;YAC1B,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QACnH,CAAS;QACD,IAAI,OAAO,CAAC,mBAAmB,EAAE;YAC7B,uBAAuB,CAAC,UAAU,EAAE,OAAO,CAAC,mBAAmB,CAAC,CAAC;QAC7E,CAAS;QACT,oDAAA;QACQ,IAAI,OAAO,CAAC,0BAA0B,IAC9C,CAAa,CAAC,OAAO,CAAC,mBAAmB,IACzB,CAAC,OAAO,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC,EAAE;YACpD,uBAAuB,CAAC,UAAU,EAAE;gBAChC,CAAC,eAAe,CAAA,EAAG,GAAG;YACtC,CAAa,CAAC,CAAC;QACf,CAAS;QACD,sBAAsB,CAAC,UAAU,EAAE,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAClF,OAAO,gBAAgB,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAK;IACL;;;KAGA,GACI,0BAA0B,CAAC,OAAO,EAAE;QAChC,MAAM,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;QAC7B,IAAI,OAAO,CAAC,qBAAqB,EAAE;YAC/B,wBAAwB,CAAC,UAAU,EAAE,OAAO,CAAC,qBAAqB,CAAC,CAAC;QAChF,CAAS;QACD,IAAI,OAAO,CAAC,aAAa,EAAE;YACvB,gBAAgB,CAAC,UAAU,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QAChE,CAAS;QACD,IAAI,OAAO,CAAC,WAAW,EAAE;YACrB,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;QAC5D,CAAS;QACD,IAAI,OAAO,CAAC,KAAK,EAAE;YACf,QAAQ,CAAC,UAAU,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;QAChD,CAAS;QACD,IAAI,OAAO,CAAC,UAAU,EAAE;YACpB,aAAa,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;QAC1D,CAAS;QACD,IAAI,OAAO,CAAC,oBAAoB,EAAE;YAC9B,uBAAuB,CAAC,UAAU,EAAE,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAC9E,CAAS;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE;YACvC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QACzC,CAAS;QACD,OAAO,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,sBAAsB,EAAE,OAAO,CAAC,oBAAoB,CAAC,CAAC;IAC1H,CAAK;AACL;AC/PA,2CAAA,GA2BA;;;CAGA,GACA,MAAM,+CAA+C,GAAG,GAAG,CAAC,CAAA,YAAA;AAC5D;;;CAGA,GACA,MAAM,kBAAkB,SAAS,UAAU,CAAC;IACxC,WAAW,CAAC,aAAa,EAAE,iBAAiB,CAAE;QAC1C,KAAK,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;IAChD,CAAK;IACD,MAAM,YAAY,CAAC,OAAO,EAAE;QACxB,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,8BAA8B,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QACrH,MAAM,YAAY,GAAG,UAAU,EAAE,CAAC;QAClC,MAAM,QAAQ,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,qCAAqC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC9N,2CAAA;QACQ,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,EAAA,CAAG,WAAW,CAAC,eAAe,CAAC,CAAC;QAClE,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAC9L,eAAe,CAAC,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrD,OAAO,WAAW,CAAC,eAAe,CAAC,yBAAyB,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,iBAAiB,CAAC,yBAAyB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;IACtT,CAAK;IACL;;;KAGA,GACI,MAAM,0BAA0B,CAAC,OAAO,EAAE;QAC9C,oDAAA;QACQ,IAAI,CAAC,OAAO,EAAE;YACV,MAAM,8BAA8B,CAAC,iBAAiB,CAAC,CAAC;QACpE,CAAS;QACD,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,4CAA4C,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QAC3I,gIAAA;QACQ,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YAClB,MAAM,qBAAqB,CAAC,wBAAwB,CAAC,CAAC;QAClE,CAAS;QACT,4DAAA;QACQ,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACxF,6GAAA;QACQ,IAAI,MAAM,EAAE;YACR,IAAI;gBACA,OAAO,MAAM,WAAW,CAAC,IAAI,CAAC,kCAAkC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,oDAAoD,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAChP,CAAa,CACD,OAAO,CAAC,EAAE;gBACN,MAAM,iBAAiB,GAAG,CAAC,YAAY,4BAA4B,IAC/D,CAAC,CAAC,SAAS,KACP,aAAa,CAAC;gBACtB,MAAM,+BAA+B,GAAG,CAAC,YAAY,WAAW,IAC5D,CAAC,CAAC,SAAS,KAAK,MAAM,CAAC,mBAAmB,IAC1C,CAAC,CAAC,QAAQ,KAAK,MAAM,CAAC,qBAAqB,CAAC;gBAChE,qJAAA;gBACgB,IAAI,iBAAiB,IAAI,+BAA+B,EAAE;oBACtD,OAAO,WAAW,CAAC,IAAI,CAAC,kCAAkC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,oDAAoD,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBAC/O,2BAAA;gBACA,CAAiB,MACI;oBACD,MAAM,CAAC,CAAC;gBAC5B,CAAiB;YACjB,CAAa;QACb,CAAS;QACT,qDAAA;QACQ,OAAO,WAAW,CAAC,IAAI,CAAC,kCAAkC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,oDAAoD,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IACnO,CAAK;IACL;;;KAGA,GACI,MAAM,kCAAkC,CAAC,OAAO,EAAE,IAAI,EAAE;QACpD,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,oDAAoD,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QACnJ,0DAAA;QACQ,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,iBAAiB,CAAC,2BAA2B,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACnR,IAAI,CAAC,YAAY,EAAE;YACf,MAAM,kCAAkC,CAAC,aAAa,CAAC,CAAC;QACpE,CAAS;QACD,IAAI,YAAY,CAAC,SAAS,IACtB,cAAc,CAAC,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,mCAAmC,IAC9E,+CAA+C,CAAC,EAAE;YACtD,IAAI,CAAC,iBAAiB,EAAE,SAAS,CAAC;gBAAE,aAAa,EAAE,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC;YAAA,CAAE,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;YAC5G,MAAM,kCAAkC,CAAC,mBAAmB,CAAC,CAAC;QAC1E,CAAS;QACT,mDAAA;QACQ,MAAM,mBAAmB,GAAG;YACxB,GAAG,OAAO;YACV,YAAY,EAAE,YAAY,CAAC,MAAM;YACjC,oBAAoB,EAAE,OAAO,CAAC,oBAAoB,IAAI,oBAAoB,CAAC,MAAM;YACjF,aAAa,EAAE;gBACX,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,aAAa;gBACzC,IAAI,EAAE,iBAAiB,CAAC,eAAe;YACvD,CAAa;QACb,CAAS,CAAC;QACF,IAAI;YACA,OAAO,MAAM,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,8BAA8B,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,mBAAmB,CAAC,CAAC;QACtM,CAAS,CACD,OAAO,CAAC,EAAE;YACN,IAAI,CAAC,YAAY,4BAA4B,EAAE;gBAC3C,IAAI,CAAC,iBAAiB,EAAE,SAAS,CAAC;oBAAE,aAAa,EAAE,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC;gBAAA,CAAE,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;gBAC5G,IAAI,CAAC,CAAC,QAAQ,KAAK,QAAQ,EAAE;oBAC7C,sCAAA;oBACoB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,sEAAsE,CAAC,CAAC;oBAC5F,MAAM,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;oBACjF,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;gBACpG,CAAiB;YACjB,CAAa;YACD,MAAM,CAAC,CAAC;QACpB,CAAS;IACT,CAAK;IACL;;;;KAIA,GACI,MAAM,mBAAmB,CAAC,OAAO,EAAE,SAAS,EAAE;QAC1C,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,qCAAqC,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QAC5H,MAAM,qBAAqB,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,SAAS,CAAC,iBAAiB,CAAC,SAAS,CAAC,aAAa,EAAE,qBAAqB,CAAC,CAAC;QAC7F,MAAM,WAAW,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,wCAAwC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC;QAC/M,MAAM,OAAO,GAAG,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACtE,MAAM,UAAU,GAAG,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACnF,OAAO,WAAW,CAAC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,4CAA4C,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,QAAQ,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,OAAO,CAAC,aAAa,EAAE,iBAAiB,CAAC,4CAA4C,CAAC,CAAC;IACtU,CAAK;IACL;;;KAGA,GACI,MAAM,sBAAsB,CAAC,OAAO,EAAE;QAClC,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,wCAAwC,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QAC/H,MAAM,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;QAC7B,WAAW,CAAC,UAAU,EAAE,OAAO,CAAC,gBAAgB,IAC5C,OAAO,CAAC,mBAAmB,EAAA,CAAG,SAAS,CAAC,IACxC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QACtC,IAAI,OAAO,CAAC,WAAW,EAAE;YACrB,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;QAC5D,CAAS;QACD,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;QAClH,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,mBAAmB,CAAC,CAAC;QACxD,aAAa,CAAC,UAAU,CAAC,CAAC;QAC1B,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACpD,uBAAuB,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;QACvE,aAAa,CAAC,UAAU,CAAC,CAAC;QAC1B,IAAI,IAAI,CAAC,sBAAsB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACjE,kBAAkB,CAAC,UAAU,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACxE,CAAS;QACD,eAAe,CAAC,UAAU,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;QAClD,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,YAAY,EAAE;YAC5C,eAAe,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACpF,CAAS;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,eAAe,EAAE;YAC/C,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,eAAe,CAAC;YACtE,kBAAkB,CAAC,UAAU,EAAE,MAAM,kBAAkB,CAAC,eAAe,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAClJ,sBAAsB,CAAC,UAAU,EAAE,eAAe,CAAC,aAAa,CAAC,CAAC;QAC9E,CAAS;QACD,IAAI,OAAO,CAAC,oBAAoB,KAAK,oBAAoB,CAAC,GAAG,EAAE;YAC3D,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;YAC1F,IAAI,UAAU,CAAC;YACf,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACjB,MAAM,mBAAmB,GAAG,MAAM,WAAW,CAAC,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,iBAAiB,CAAC,mBAAmB,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC9N,UAAU,GAAG,mBAAmB,CAAC,YAAY,CAAC;YAC9D,CAAa,MACI;gBACD,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACxE,CAAa;YACb,oEAAA;YACY,WAAW,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;QAChD,CAAS,MACI,IAAI,OAAO,CAAC,oBAAoB,KAAK,oBAAoB,CAAC,GAAG,EAAE;YAChE,IAAI,OAAO,CAAC,MAAM,EAAE;gBAChB,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;YACtD,CAAa,MACI;gBACD,MAAM,8BAA8B,CAAC,aAAa,CAAC,CAAC;YACpE,CAAa;QACb,CAAS;QACD,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,IACtC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,IACvC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAE;YAC5D,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC;QAC9F,CAAS;QACD,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,oBAAoB,IAC9C,OAAO,CAAC,aAAa,EAAE;YACvB,OAAQ,OAAO,CAAC,aAAa,CAAC,IAAI;gBAC9B,KAAK,iBAAiB,CAAC,eAAe;oBAClC,IAAI;wBACA,MAAM,UAAU,GAAG,gCAAgC,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;wBACtF,SAAS,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;oBAC1D,CAAqB,CACD,OAAO,CAAC,EAAE;wBACN,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,kDAAkD,GAClE,CAAC,CAAC,CAAC;oBAC/B,CAAqB;oBACD,MAAM;gBACV,KAAK,iBAAiB,CAAC,GAAG;oBACtB,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;oBACxD,MAAM;YAC1B,CAAa;QACb,CAAS;QACD,IAAI,OAAO,CAAC,gBAAgB,EAAE;YAC1B,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;QACnH,CAAS;QACD,IAAI,OAAO,CAAC,mBAAmB,EAAE;YAC7B,uBAAuB,CAAC,UAAU,EAAE,OAAO,CAAC,mBAAmB,CAAC,CAAC;QAC7E,CAAS;QACD,sBAAsB,CAAC,UAAU,EAAE,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAClF,OAAO,gBAAgB,CAAC,UAAU,CAAC,CAAC;IAC5C,CAAK;AACL;ACxOA,2CAAA,GAcA;;;CAGA,GACA,cAAA,GACA,MAAM,gBAAgB,SAAS,UAAU,CAAC;IACtC,WAAW,CAAC,aAAa,EAAE,iBAAiB,CAAE;QAC1C,KAAK,CAAC,aAAa,EAAE,iBAAiB,CAAC,CAAC;IAChD,CAAK;IACL;;;KAGA,GACI,MAAM,kBAAkB,CAAC,OAAO,EAAE;QAC9B,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,kCAAkC,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QACzH,IAAI,gBAAgB,GAAG,YAAY,CAAC,cAAc,CAAC;QACnD,IAAI,OAAO,CAAC,YAAY,IACnB,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,yBAAyB,IAChD,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAE;YAC1D,kDAAA;YACY,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,uBAAuB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;YAClF,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;QAC9D,CAAS;QACT,gIAAA;QACQ,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YAClB,MAAM,qBAAqB,CAAC,wBAAwB,CAAC,CAAC;QAClE,CAAS;QACD,MAAM,eAAe,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,IAC5C,4BAA4B,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACpD,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;QACnD,MAAM,iBAAiB,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,eAAe,CAAC,CAAC;QACjH,IAAI,CAAC,iBAAiB,EAAE;YAChC,gDAAA;YACY,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,sBAAsB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;YACjF,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;QAC9D,CAAS,MACI,IAAI,kBAAkB,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IACnD,cAAc,CAAC,iBAAiB,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,yBAAyB,CAAC,EAAE;YAC9G,2CAAA;YACY,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,2BAA2B,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;YACtF,MAAM,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;QAC9D,CAAS,MACI,IAAI,iBAAiB,CAAC,SAAS,IAChC,cAAc,CAAC,iBAAiB,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE;YAC5D,+DAAA;YACY,gBAAgB,GAAG,YAAY,CAAC,qBAAqB,CAAC;QAClE,wFAAA;QACA,CAAS;QACD,MAAM,WAAW,GAAG,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAC5E,MAAM,WAAW,GAAG;YAChB,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,aAAa,CAAC;YACnH,WAAW,EAAE,iBAAiB;YAC9B,OAAO,EAAE,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,aAAa,EAAE,SAAS,EAAE,eAAe,EAAE,IAAI,CAAC,iBAAiB,CAAC;YACjI,YAAY,EAAE,IAAI;YAClB,WAAW,EAAE,IAAI,CAAC,YAAY,CAAC,wBAAwB,CAAC,WAAW,CAAC;QAChF,CAAS,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QAC9D,IAAI,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE;YACpC,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,kBAAkB,EAAE,CAAC;QACpE,CAAS;QACD,OAAO;YACH,MAAM,WAAW,CAAC,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,iBAAiB,CAAC,6CAA6C,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,iBAAiB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,OAAO,CAAC;YACnN,gBAAgB;SACnB,CAAC;IACV,CAAK;IACD,eAAe,CAAC,YAAY,EAAE,aAAa,EAAE;QACzC,IAAI,CAAC,sBAAsB,EAAE,eAAe,CAAC,YAAY,CAAC,CAAC;QAC3D,IAAI,CAAC,iBAAiB,EAAE,SAAS,CAAC;YAC9B,YAAY,EAAE,YAAY;QACtC,CAAS,EAAE,aAAa,CAAC,CAAC;QAClB,IAAI,YAAY,KAAK,YAAY,CAAC,cAAc,EAAE;YAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,gDAAgD,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;QAChG,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,MAAM,6BAA6B,CAAC,WAAW,EAAE,OAAO,EAAE;QACtD,IAAI,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB,CAAC,6CAA6C,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QACpI,IAAI,aAAa,CAAC;QAClB,IAAI,WAAW,CAAC,OAAO,EAAE;YACrB,aAAa,GAAG,kBAAkB,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QACrH,CAAS;QACT,sBAAA;QACQ,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACxC,MAAM,QAAQ,GAAG,aAAa,EAAE,SAAS,CAAC;YAC1C,IAAI,CAAC,QAAQ,EAAE;gBACX,MAAM,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;YAC9D,CAAa;YACD,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAClD,CAAS;QACD,OAAO,eAAe,CAAC,4BAA4B,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,IAAI,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;IACzI,CAAK;AACL;AC5GA,2CAAA,GAaA;;;CAGA,GACA;;;;;;;CAOA,GACA,SAAS,qCAAqC,CAAC,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,iBAAiB,EAAE;IAChG,4DAAA;IACI,MAAM,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAC5C,MAAM,UAAU,GAAG,IAAI,GAAG,EAAE,CAAC;IAC7B,WAAW,CAAC,UAAU,EAAE,OAAO,CAAC,gBAAgB,IAC5C,OAAO,CAAC,oBAAoB,EAAA,CAAG,SAAS,CAAC,IACzC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC1B,MAAM,aAAa,GAAG;WACd,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC;WACrB,OAAO,CAAC,oBAAoB,IAAI,EAAE,CAAC;KAC1C,CAAC;IACF,SAAS,CAAC,UAAU,EAAE,aAAa,EAAE,IAAI,EAAE,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IACrG,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;IAChD,gBAAgB,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;IAChD,4DAAA;IACI,eAAe,CAAC,UAAU,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;IACtD,oBAAA;IACI,aAAa,CAAC,UAAU,CAAC,CAAC;IAC1B,IAAI,OAAO,CAAC,MAAM,EAAE;QAChB,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;IAE9C,CAAK;IACD,IAAI,OAAO,CAAC,UAAU,EAAE;QACpB,aAAa,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;IAEtD,CAAK;IACL,2IAAA;IACI,IAAI,OAAO,CAAC,MAAM,KAAK,WAAW,CAAC,cAAc,EAAE;QACvD,yEAAA;QACQ,IAAI,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM,KAAK,WAAW,CAAC,IAAI,EAAE;YAChE,yCAAA;YACY,MAAM,CAAC,OAAO,CAAC,uEAAuE,CAAC,CAAC;YACxF,MAAM,CAAC,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QAE5C,CAAS,MACI,IAAI,OAAO,CAAC,OAAO,EAAE;YACtB,MAAM,UAAU,GAAG,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACtD,IAAI,qBAAqB,GAAG,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC9D,IAAI,qBAAqB,IAAI,OAAO,CAAC,UAAU,EAAE;gBAC7C,MAAM,CAAC,OAAO,CAAC,CAAC,2JAA2J,CAAC,CAAC,CAAC;gBAC9K,qBAAqB,GAAG,IAAI,CAAC;YAC7C,CAAa;YACb,2DAAA;YACY,IAAI,qBAAqB,EAAE;gBACvB,MAAM,CAAC,OAAO,CAAC,mEAAmE,CAAC,CAAC;gBACpF,YAAY,CAAC,UAAU,EAAE,qBAAqB,CAAC,CAAC;gBAEhD,IAAI;oBACA,MAAM,UAAU,GAAG,gCAAgC,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;oBACnF,SAAS,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;gBACtD,CAAiB,CACD,OAAO,CAAC,EAAE;oBACN,MAAM,CAAC,OAAO,CAAC,8EAA8E,CAAC,CAAC;gBACnH,CAAiB;YACjB,CAAa,MACI,IAAI,UAAU,IAAI,OAAO,CAAC,MAAM,KAAK,WAAW,CAAC,IAAI,EAAE;gBACxE;;;iBAGA,GACgB,MAAM,CAAC,OAAO,CAAC,uEAAuE,CAAC,CAAC;gBACxF,MAAM,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;gBAE/B,IAAI;oBACA,MAAM,UAAU,GAAG,gCAAgC,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;oBACnF,SAAS,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;gBACtD,CAAiB,CACD,OAAO,CAAC,EAAE;oBACN,MAAM,CAAC,OAAO,CAAC,8EAA8E,CAAC,CAAC;gBACnH,CAAiB;YACjB,CAAa,MACI,IAAI,OAAO,CAAC,SAAS,EAAE;gBACxB,MAAM,CAAC,OAAO,CAAC,8DAA8D,CAAC,CAAC;gBAC/E,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;gBAC5C,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;YAEzD,CAAa,MACI,IAAI,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE;gBAC/C,2CAAA;gBACgB,MAAM,CAAC,OAAO,CAAC,8DAA8D,CAAC,CAAC;gBAC/E,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAEnD,IAAI;oBACA,MAAM,UAAU,GAAG,gCAAgC,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;oBACnF,SAAS,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;gBACtD,CAAiB,CACD,OAAO,CAAC,EAAE;oBACN,MAAM,CAAC,OAAO,CAAC,8EAA8E,CAAC,CAAC;gBACnH,CAAiB;YACjB,CAAa;QACb,CAAS,MACI,IAAI,OAAO,CAAC,SAAS,EAAE;YACxB,MAAM,CAAC,OAAO,CAAC,0EAA0E,CAAC,CAAC;YAC3F,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;YAC5C,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;QAErD,CAAS;IACT,CAAK,MACI;QACD,MAAM,CAAC,OAAO,CAAC,gFAAgF,CAAC,CAAC;IACzG,CAAK;IACD,IAAI,OAAO,CAAC,KAAK,EAAE;QACf,QAAQ,CAAC,UAAU,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAK;IACD,IAAI,OAAO,CAAC,KAAK,EAAE;QACf,QAAQ,CAAC,UAAU,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAK;IACD,IAAI,OAAO,CAAC,MAAM,IACb,WAAW,CAAC,kBAAkB,IAC3B,WAAW,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAE;QAChD,SAAS,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,EAAE,WAAW,CAAC,kBAAkB,CAAC,CAAC;IAC9E,CAAK;IACD,IAAI,OAAO,CAAC,gBAAgB,EAAE;QAC1B,mBAAmB,CAAC,UAAU,EAAE,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,WAAW,CAAC,CAAC;IACvF,CAAK;IACL,8GAAA;IACI,IAAI,WAAW,CAAC,aAAa,IACjC,CAAS,CAAC,OAAO,CAAC,oBAAoB,IAC1B,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,EAAE;QAC1E,gBAAgB,CAAC,UAAU,CAAC,CAAC;IACrC,CAAK;IACD,OAAO,UAAU,CAAC;AACtB,CAAC;AACD;;;;;CAKA,GACA,SAAS,eAAe,CAAC,SAAS,EAAE,iBAAiB,EAAE,YAAY,EAAE,oBAAoB,EAAE;IACvF,MAAM,WAAW,GAAG,gBAAgB,CAAC,iBAAiB,EAAE,YAAY,EAAE,oBAAoB,CAAC,CAAC;IAC5F,OAAO,SAAS,CAAC,iBAAiB,CAAC,SAAS,CAAC,qBAAqB,EAAE,WAAW,CAAC,CAAC;AACrF,CAAC;AAmED;;;CAGA,GACA,SAAS,iBAAiB,CAAC,OAAO,EAAE;IAChC,OAAO,OAAO,CAAC,aAAa,EAAE,GAAG,IAAI,IAAI,CAAC;AAC9C,CAAC;AACD,SAAS,gBAAgB,CAAC,OAAO,EAAE;IAC/B,OAAO,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,aAAa,EAAE,UAAU,IAAI,IAAI,CAAC;AAC1E;ACzOA,2CAAA,GAKA;;;CAGA,GACA,MAAM,iBAAiB,GAAG,GAAG,CAAC;AAC9B,MAAM,iBAAiB,GAAG,GAAG,CAAC;AAC9B,SAAS,kBAAkB,CAAC,MAAM,EAAE;IAChC,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,cAAc,EAAE,aAAa,EAAE,gBAAgB,EAAG,GAAG,MAAM,CAAC;IACvF,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC;QACnB;YAAC,CAAC;YAAE;gBAAC,WAAW;gBAAE,cAAc;aAAC;SAAC;QAClC;YAAC,CAAC;YAAE;gBAAC,aAAa;gBAAE,gBAAgB;aAAC;SAAC;KACzC,CAAC,CAAC;IACH,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,IAAI,EAAE,MAAM,EAAE;QACd,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QAC/C,iCAAA;QACQ,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACnB,OAAO,IAAI,CAAC;QACxB,CAAS;IACT,CAAK,MACI;QACD,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC;YAAE,MAAM,EAAE,CAAC;QAAA,CAAE,EAAE,IAAM,iBAAiB,CAAC,CAAC;IACpE,CAAK;IACD,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,GAAG,KAAK;QAC3B,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE;YAC5D,MAAM,CAAC;gBACH,MAAM;gBACN,KAAK,EAAE,GAAG;gBACV,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;gBACjB,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;YACpC,CAAa,CAAC,CAAC;QACf,CAAS;IACT,CAAK,CAAC,CAAC;IACH,OAAO,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAC1C,CAAC;AACD,SAAS,MAAM,CAAC,MAAM,EAAE;IACpB,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,MAAM,CAAC;IACtD,IAAI,KAAK,IAAI,MAAM,CAAC,MAAM,EAAE;QACxB,OAAO;IACf,CAAK;IACD,MAAM,CAAC,KAAK,CAAC,GAAG;QAAC,OAAO;QAAE,UAAU;KAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAClE,CAAC;AACD,cAAA,GACA,MAAM,sBAAsB,CAAC;IACzB,WAAW,CAAC,gBAAgB,EAAE,YAAY,CAAE;QACxC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,cAAc,CAAC;QAChD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC;QACpC,IAAI,CAAC,aAAa,GAAG,gBAAgB,CAAC,aAAa,CAAC;QACpD,IAAI,CAAC,UAAU,GAAG,gBAAgB,CAAC,UAAU,IAAIA,WAAS,CAAC,YAAY,CAAC;QACxE,IAAI,CAAC,UAAU,GAAG,gBAAgB,CAAC,UAAU,IAAIA,WAAS,CAAC,YAAY,CAAC;QACxE,IAAI,CAAC,iBAAiB,GAClB,sBAAsB,CAAC,SAAS,GAC5B,UAAU,CAAC,mBAAmB,GAC9B,gBAAgB,CAAC,QAAQ,CAAC;IAC1C,CAAK;IACL;;KAEA,GACI,iCAAiC,GAAG;QAChC,MAAM,OAAO,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,sBAAsB,CAAC,eAAe,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QAC7F,MAAM,iBAAiB,GAAG;YAAC,IAAI,CAAC,UAAU;YAAE,IAAI,CAAC,UAAU;SAAC,CAAC;QAC7D,MAAM,qBAAqB,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAC9D,IAAI,qBAAqB,EAAE,MAAM,EAAE;YAC/B,iBAAiB,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,qBAAqB,CAAC,CAAC,CAAC,CAAC;QAC5E,CAAS;QACD,MAAM,cAAc,GAAG,iBAAiB,CAAC,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;QACtF,MAAM,qBAAqB,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAC9D,MAAM,gCAAgC,GAAG;YACrC,OAAO;YACP,qBAAqB;SACxB,CAAC,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;QAC/C,OAAO;YACH,sBAAsB,CAAC,cAAc;YACrC,gCAAgC;YAChC,cAAc;SACjB,CAAC,IAAI,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;IAC1D,CAAK;IACL;;KAEA,GACI,8BAA8B,GAAG;QAC7B,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC5C,MAAM,SAAS,GAAG,sBAAsB,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QACvE,MAAM,cAAc,GAAG,YAAY,CAAC,cAAc,CAC7C,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,CACvB,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;QAClD,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,CAC7B,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CACnB,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;QAClD,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC;QACtD,iEAAA;QACQ,MAAM,QAAQ,GAAG,SAAS,GAAG,UAAU,GACjC,sBAAsB,CAAC,aAAa,GACpC,sBAAsB,CAAC,cAAc,CAAC;QAC5C,MAAM,cAAc,GAAG;YAAC,UAAU;YAAE,QAAQ;SAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,eAAe,CAAC,CAAC;QAC3F,OAAO;YACH,sBAAsB,CAAC,cAAc;YACrC,YAAY,CAAC,SAAS;YACtB,cAAc;YACd,MAAM;YACN,cAAc;SACjB,CAAC,IAAI,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,CAAC;IAC1D,CAAK;IACL;;;KAGA,GACI,kBAAkB,CAAC,KAAK,EAAE;QACtB,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC5C,IAAI,YAAY,CAAC,MAAM,CAAC,MAAM,IAC1B,sBAAsB,CAAC,iBAAiB,EAAE;YACtD,yDAAA;YACY,YAAY,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAA,QAAA;YACpC,YAAY,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC,CAAA,gBAAA;YACpC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACxC,CAAS;QACD,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACjE,IAAI,KAAK,YAAY,KAAK,IAAI,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE,EAAE;YACvD,IAAI,KAAK,YAAY,SAAS,EAAE;gBAC5B,IAAI,KAAK,CAAC,QAAQ,EAAE;oBAChB,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAC7D,CAAiB,MACI,IAAI,KAAK,CAAC,SAAS,EAAE;oBACtB,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;gBAC9D,CAAiB,MACI;oBACD,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAC/D,CAAiB;YACjB,CAAa,MACI;gBACD,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC3D,CAAa;QACb,CAAS,MACI;YACD,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,aAAa,CAAC,CAAC;QAC3E,CAAS;QACD,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC/F,OAAO;IACf,CAAK;IACL;;KAEA,GACI,kBAAkB,GAAG;QACjB,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC5C,YAAY,CAAC,SAAS,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC/F,OAAO,YAAY,CAAC,SAAS,CAAC;IACtC,CAAK;IACL;;KAEA,GACI,eAAe,GAAG;QACd,MAAM,YAAY,GAAG;YACjB,cAAc,EAAE,EAAE;YAClB,MAAM,EAAE,EAAE;YACV,SAAS,EAAE,CAAC;QACxB,CAAS,CAAC;QACF,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAClF,OAAO,YAAY,IAAI,YAAY,CAAC;IAC5C,CAAK;IACL;;KAEA,GACI,mBAAmB,GAAG;QAClB,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC5C,MAAM,gBAAgB,GAAG,sBAAsB,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QAC9E,MAAM,UAAU,GAAG,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC;QAC9C,IAAI,gBAAgB,KAAK,UAAU,EAAE;YAC7C,8DAAA;YACY,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACrF,CAAS,MACI;YACb,6GAAA;YACY,MAAM,iBAAiB,GAAG;gBACtB,cAAc,EAAE,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,gBAAgB,GAAG,CAAC,CAAC;gBACvE,MAAM,EAAE,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAC;gBACnD,SAAS,EAAE,CAAC;YAC5B,CAAa,CAAC;YACF,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAChH,CAAS;IACT,CAAK;IACL;;;KAGA,GACI,OAAO,eAAe,CAAC,qBAAqB,EAAE;QAC1C,IAAI,CAAC,CAAC;QACN,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,IAAI,QAAQ,GAAG,CAAC,CAAC;QACjB,MAAM,UAAU,GAAG,qBAAqB,CAAC,MAAM,CAAC,MAAM,CAAC;QACvD,IAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,CAAE;YACzC,4GAAA;YACY,MAAM,KAAK,GAAG,qBAAqB,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC,IACrDA,WAAS,CAAC,YAAY,CAAC;YAC3B,MAAM,aAAa,GAAG,qBAAqB,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IACjEA,WAAS,CAAC,YAAY,CAAC;YAC3B,MAAM,SAAS,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC,CAAC,IAAIA,WAAS,CAAC,YAAY,CAAC;YACxF,iIAAA;YACY,QAAQ,IACJ,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,GACnB,aAAa,CAAC,QAAQ,EAAE,CAAC,MAAM,GAC/B,SAAS,CAAC,MAAM,GAChB,CAAC,CAAC;YACV,IAAI,QAAQ,GAAG,sBAAsB,CAAC,qBAAqB,EAAE;gBACzE,+EAAA;gBACgB,SAAS,IAAI,CAAC,CAAC;YAC/B,CAAa,MACI;gBACD,MAAM;YACtB,CAAa;QACb,CAAS;QACD,OAAO,SAAS,CAAC;IACzB,CAAK;IACL;;;;KAIA,GACI,wBAAwB,GAAG;QACvB,MAAM,qBAAqB,GAAG,EAAE,CAAC;QACjC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,IAAIA,WAAS,CAAC,YAAY,CAAC,CAAC;QACtE,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,IAAIA,WAAS,CAAC,YAAY,CAAC,CAAC;QACxE,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,IAAIA,WAAS,CAAC,YAAY,CAAC,CAAC;QACzE,OAAO,qBAAqB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC/C,CAAK;IACL;;;;;KAKA,GACI,6BAA6B,CAAC,uBAAuB,EAAE;QACnD,IAAI,CAAC,UAAU,GAAG,uBAAuB,CAAC,WAAW,CAAC;QACtD,IAAI,CAAC,YAAY,GAAG,uBAAuB,CAAC,aAAa,CAAC;QAC1D,IAAI,CAAC,aAAa,GAAG,uBAAuB,CAAC,cAAc,CAAC;IACpE,CAAK;IACL;;KAEA,GACI,eAAe,CAAC,YAAY,EAAE;QAC1B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACzC,CAAK;IACD,wBAAwB,CAAC,SAAS,EAAE;QAChC,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC5C,YAAY,CAAC,qBAAqB,GAAG,SAAS,CAAC;QAC/C,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACvG,CAAK;IACD,wBAAwB,GAAG;QACvB,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,qBAAqB,CAAC;IAC5D,CAAK;IACD,0BAA0B,GAAG;QACzB,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC5C,OAAO,YAAY,CAAC,qBAAqB,CAAC;QAC1C,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,EAAE,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACvG,CAAK;IACD,OAAO,kBAAkB,CAAC,MAAM,EAAE;QAC9B,OAAO,kBAAkB,CAAC,MAAM,CAAC,CAAC;IAC1C,CAAK;AACL;ACxQA;;;CAGG,GA0BH;;;CAGG,SACU,YAAY,CAAA;IACrB;;;KAGG,GACH,OAAO,mBAAmB,CAAC,QAAgB,EAAA;QACvC,MAAM,iBAAiB,GAAG,CAAC,QAAQ,GAAG,CAAA,CAAE,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAChE,OAAO,iBAAiB,CAAC;KAC5B;IAED;;;KAGG,GACH,OAAO,mBAAmB,CACtB,QAAiD,EAAA;QAEjD,MAAM,cAAc,GAAiB,CAAA,CAAE,CAAC;QACxC,IAAI,QAAQ,EAAE;YACV,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,SAAU,GAAG,EAAA;gBACnC,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACpC,MAAM,SAAS,GAAG;oBACd,aAAa,EAAE,aAAa,CAAC,eAAe;oBAC5C,WAAW,EAAE,aAAa,CAAC,WAAW;oBACtC,KAAK,EAAE,aAAa,CAAC,KAAK;oBAC1B,cAAc,EAAE,aAAa,CAAC,gBAAgB;oBAC9C,QAAQ,EAAE,aAAa,CAAC,QAAQ;oBAChC,aAAa,EAAE,aAAa,CAAC,cAAc;oBAC3C,IAAI,EAAE,aAAa,CAAC,IAAI;oBACxB,UAAU,EAAE,aAAa,CAAC,WAAW;oBACrC,oBAAoB,EAAE,aAAa,CAAC,sBAAsB;oBAC1D,mBAAmB,EAAE,aAAa,CAAC,qBAAqB;oBACxD,cAAc,EAAE,aAAa,CAAC,cAAc,EAAE,GAAG,CAC7C,CAAC,uBAAuB,KAAI;wBACxB,OAAO,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;oBAC/C,CAAC,CACJ;oBACD,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;iBACvC,CAAC;gBACF,MAAM,OAAO,GAAkB,IAAI,aAAa,EAAE,CAAC;gBACnD,YAAY,CAAC,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;gBAC1C,cAAc,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;YAClC,CAAC,CAAC,CAAC;QACN,CAAA;QAED,OAAO,cAAc,CAAC;KACzB;IAED;;;KAGG,GACH,OAAO,mBAAmB,CACtB,QAAiD,EAAA;QAEjD,MAAM,SAAS,GAAiB,CAAA,CAAE,CAAC;QACnC,IAAI,QAAQ,EAAE;YACV,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,SAAU,GAAG,EAAA;gBACnC,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACpC,MAAM,OAAO,GAAkB;oBAC3B,aAAa,EAAE,aAAa,CAAC,eAAe;oBAC5C,WAAW,EAAE,aAAa,CAAC,WAAW;oBACtC,cAAc,EACV,aAAa,CAAC,eAAiC;oBACnD,QAAQ,EAAE,aAAa,CAAC,SAAS;oBACjC,MAAM,EAAE,aAAa,CAAC,MAAM;oBAC5B,KAAK,EAAE,aAAa,CAAC,KAAK;oBAC1B,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;iBACvC,CAAC;gBACF,SAAS,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;YAC7B,CAAC,CAAC,CAAC;QACN,CAAA;QACD,OAAO,SAAS,CAAC;KACpB;IAED;;;KAGG,GACH,OAAO,uBAAuB,CAC1B,YAAyD,EAAA;QAEzD,MAAM,SAAS,GAAqB,CAAA,CAAE,CAAC;QACvC,IAAI,YAAY,EAAE;YACd,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,SAAU,GAAG,EAAA;gBACvC,MAAM,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;gBACvC,MAAM,WAAW,GAAsB;oBACnC,aAAa,EAAE,YAAY,CAAC,eAAe;oBAC3C,WAAW,EAAE,YAAY,CAAC,WAAW;oBACrC,cAAc,EACV,YAAY,CAAC,eAAiC;oBAClD,QAAQ,EAAE,YAAY,CAAC,SAAS;oBAChC,MAAM,EAAE,YAAY,CAAC,MAAM;oBAC3B,KAAK,EAAE,YAAY,CAAC,KAAK;oBACzB,MAAM,EAAE,YAAY,CAAC,MAAM;oBAC3B,QAAQ,EAAE,YAAY,CAAC,SAAS;oBAChC,SAAS,EAAE,YAAY,CAAC,UAAU;oBAClC,iBAAiB,EAAE,YAAY,CAAC,mBAAmB;oBACnD,SAAS,EAAE,YAAY,CAAC,UAAU;oBAClC,KAAK,EAAE,YAAY,CAAC,MAAM;oBAC1B,SAAS,EAAE,YAAY,CAAC,UAAkC;oBAC1D,eAAe,EAAE,YAAY,CAAC,eAAe;oBAC7C,mBAAmB,EAAE,YAAY,CAAC,mBAAmB;oBACrD,iBAAiB,EAAE,YAAY,CAAC,iBAAiB;oBACjD,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;iBACvC,CAAC;gBACF,SAAS,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;YACjC,CAAC,CAAC,CAAC;QACN,CAAA;QAED,OAAO,SAAS,CAAC;KACpB;IAED;;;KAGG,GACH,OAAO,wBAAwB,CAC3B,aAA2D,EAAA;QAE3D,MAAM,SAAS,GAAsB,CAAA,CAAE,CAAC;QACxC,IAAI,aAAa,EAAE;YACf,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,SAAU,GAAG,EAAA;gBACxC,MAAM,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;gBACxC,MAAM,YAAY,GAAuB;oBACrC,aAAa,EAAE,YAAY,CAAC,eAAe;oBAC3C,WAAW,EAAE,YAAY,CAAC,WAAW;oBACrC,cAAc,EACV,YAAY,CAAC,eAAiC;oBAClD,QAAQ,EAAE,YAAY,CAAC,SAAS;oBAChC,MAAM,EAAE,YAAY,CAAC,MAAM;oBAC3B,QAAQ,EAAE,YAAY,CAAC,SAAS;oBAChC,MAAM,EAAE,YAAY,CAAC,MAAM;oBAC3B,KAAK,EAAE,YAAY,CAAC,KAAK;oBACzB,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;iBACvC,CAAC;gBACF,SAAS,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;YAClC,CAAC,CAAC,CAAC;QACN,CAAA;QAED,OAAO,SAAS,CAAC;KACpB;IAED;;;KAGG,GACH,OAAO,sBAAsB,CACzB,WAAwD,EAAA;QAExD,MAAM,kBAAkB,GAAqB,CAAA,CAAE,CAAC;QAChD,IAAI,WAAW,EAAE;YACb,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,SAAU,GAAG,EAAA;gBACtC,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;gBACxC,kBAAkB,CAAC,GAAG,CAAC,GAAG;oBACtB,QAAQ,EAAE,cAAc,CAAC,SAAS;oBAClC,WAAW,EAAE,cAAc,CAAC,WAAW;oBACvC,QAAQ,EAAE,cAAc,CAAC,SAAS;iBACrC,CAAC;YACN,CAAC,CAAC,CAAC;QACN,CAAA;QAED,OAAO,kBAAkB,CAAC;KAC7B;IAED;;;KAGG,GACH,OAAO,mBAAmB,CAAC,SAAoB,EAAA;QAC3C,OAAO;YACH,QAAQ,EAAE,SAAS,CAAC,OAAO,GACrB,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,OAAO,CAAC,GAC3C,CAAA,CAAE;YACR,QAAQ,EAAE,SAAS,CAAC,OAAO,GACrB,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,OAAO,CAAC,GAC3C,CAAA,CAAE;YACR,YAAY,EAAE,SAAS,CAAC,WAAW,GAC7B,IAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,WAAW,CAAC,GACnD,CAAA,CAAE;YACR,aAAa,EAAE,SAAS,CAAC,YAAY,GAC/B,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,YAAY,CAAC,GACrD,CAAA,CAAE;YACR,WAAW,EAAE,SAAS,CAAC,WAAW,GAC5B,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,WAAW,CAAC,GAClD,CAAA,CAAE;SACX,CAAC;KACL;AACJ;AC7ND;;;CAGG,GAEH;;;CAGG;;;;;ACRH;;;CAGG,GAMH,wHAAA;AACO,MAAM,2BAA2B,GAAG,kCAAkC,CAAC;AACvE,MAAM,+BAA+B,GAAG,kBAAkB,CAAC;AAC3D,MAAM,sCAAsC,GAAG,CAAqC,kCAAA,EAAA,+BAA+B,CAAA,CAAA,CAAG,CAAC;AAE9H;;CAEG,GACI,MAAM,sBAAsB,GAAG;IAClC,yBAAyB,EAAE,eAAe;IAC1C,oBAAoB,EAAE,UAAU;IAChC,8BAA8B,EAAE,mBAAmB;IACnD,4BAA4B,EAAE,QAAQ;CAChC,CAAC;AAIX;;CAEG,GACI,MAAM,8BAA8B,GAAG;IAC1C,WAAW,EAAE,aAAa;IAC1B,QAAQ,EAAE,UAAU;IACpB,uBAAuB,EAAE,yBAAyB;IAClD,MAAM,EAAE,QAAQ;CACV,CAAC;AAIX;;CAEG,GACI,MAAM,uCAAuC,GAAG;IACnD,iCAAiC,EAAE,mCAAmC;IACtE,0BAA0B,EAAE,4BAA4B;IACxD,iBAAiB,EAAE,mBAAmB;IACtC,eAAe,EAAE,iBAAiB;IAClC,0BAA0B,EAAE,4BAA4B;IACxD,aAAa,EAAE,eAAe;IAC9B,YAAY,EAAE,cAAc;IAC5B,UAAU,EAAE,YAAY;CAClB,CAAC;AAIX;;;CAGG,GACU,MAAA,0BAA0B,GAAG;IACtC,WAAW,EAAE,YAAY;IACzB,SAAS,EAAE,UAAU;IACrB,WAAW,EAAE,YAAY;IACzB,eAAe,EAAE,eAAe;IAChC,IAAI,EAAE,MAAM;IACZ,gBAAgB,EAAE,iBAAiB;IACnC,cAAc,EAAE,eAAe;EACxB;AAQX;;CAEG,GACI,MAAM,qBAAqB,GAAG;IACjC,eAAe,EAAE,iBAAiB;IAClC,uBAAuB,EAAE,yBAAyB;IAClD,yBAAyB,EAAE,2BAA2B;IACtD,uBAAuB,EAAE,yBAAyB;CAC5C,CAAC;AAIX;;CAEG,GACI,MAAM,UAAU,GAAG;IACtB,GAAG,EAAE,KAAK;IACV,IAAI,EAAE,MAAM;CACN,CAAC;AAGJ,MAAM,WAAW,GAAG;IAEvB,mBAAmB,EAAE,UAAU,CAAC,mBAAmB;IACnD,iBAAiB,EAAE,UAAU,CAAC,iBAAiB;IAC/C,YAAY,EAAE,UAAU,CAAC,YAAY;CAC/B,CAAC;AAGX;;CAEG,GACI,MAAM,2BAA2B,GAAG,aAAa,CAAC;AAClD,MAAM,iBAAiB,GAAG,mBAAmB,CAAC;AAErD;;CAEG,GACI,MAAM,iBAAiB,GAAG,EAAE,CAAC;AAEpC;;CAEG,GACI,MAAM,IAAI,GAAG;IAChB,MAAM,EAAE,QAAQ;CACnB,CAAC;AAEF;;CAEG,GACI,MAAM,OAAO,GAAG;IACnB,UAAU,EACN,oEAAoE;CAC3E,CAAC;AAEF;;CAEG,GACI,MAAM,KAAK,GAAG;IAGjB,aAAa,EAAE,GAAG;CACrB,CAAC;AAEF;;CAEG,GACI,MAAM,SAAS,GAAG;IACrB,QAAQ,EAAE,cAAc;IACxB,yBAAyB,EACrB,wDAAwD;IAC5D,qBAAqB,EAAE,uBAAuB;IAC9C,aAAa,EAAE,SAAS;IACxB,SAAS,EAAE,WAAW;CACzB,CAAC;AAEF;;;;;;CAMG,GACI,MAAM,KAAK,GAAG;IACjB,kBAAkB,EAAE,EAAE;IACtB,8BAA8B,EAAE,GAAG;IACnC,wBAAwB,EAAE,GAAG;IAC7B,8BAA8B,EAAE,GAAG;IACnC,kBAAkB,EAAE,GAAG;IACvB,0BAA0B,EAAE,GAAG;CAClC,CAAC;AAGF;;CAEG,GACI,MAAM,YAAY,GAAG;IAExB,OAAO,EAAE,OAAO;IAChB,OAAO,EAAE,OAAO;IAChB,OAAO,EAAE,UAAU;IACnB,GAAG,EAAE,KAAK;IACV,GAAG,EAAE,KAAK;IACV,QAAQ,EAAE,KAAK;IACf,eAAe,EAAE,KAAK;IACtB,MAAM,EAAE,KAAK;IACb,OAAO,EAAE,KAAK;IACd,UAAU,EAAE,KAAK;IACjB,MAAM,EAAE,KAAK;CAChB,CAAC;AAEK,MAAM,yBAAyB,GAAG;IACrC,WAAW,EAAE,GAAG;IAChB,UAAU,EAAE,IAAI;CACnB,CAAC;AAEK,MAAM,oCAAoC,GAAW,IAAI,CAAC,CAAA,OAAA;AC9LjE;;;CAGG,SAgBU,YAAY,CAAA;IACrB,OAAO,kBAAkB,CACrB,OAA+B,EAC/B,IAAO,EACP,UAAkB,EAAA;QAElB,OAAO;YACH,OAAO,EAAE,OAAO;YAChB,IAAI,EAAE,IAAI;YACV,MAAM,EAAE,UAAU;SACrB,CAAC;KACL;IAED;;;;KAIG,GACH,OAAO,gBAAgB,CAAC,GAAQ,EAAA;QAC5B,MAAM,OAAO,GAA4B;YACrC,QAAQ,EAAE,GAAG,CAAC,QAAQ;YACtB,QAAQ,EACJ,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,GACtC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,CAAA,CAAE,CAAC,GACzB,GAAG,CAAC,QAAQ;YACtB,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,QAAQ,EAAE,GAAG,CAAC,QAAQ;YACtB,IAAI,EAAE,CAAA,EAAG,GAAG,CAAC,QAAQ,IAAI,EAAE,CAAA,EAAG,GAAG,CAAC,MAAM,IAAI,EAAE,CAAE,CAAA;YAChD,IAAI,EAAE,GAAG,CAAC,IAAI;SACjB,CAAC;QACF,IAAI,GAAG,CAAC,IAAI,KAAK,EAAE,EAAE;YACjB,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnC,CAAA;QACD,IAAI,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,EAAE;YAC9B,OAAO,CAAC,IAAI,GAAG,GAAG,kBAAkB,CAChC,GAAG,CAAC,QAAQ,CACf,CAAA,CAAA,EAAI,kBAAkB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC3C,CAAA;QACD,OAAO,OAAO,CAAC;KAClB;AACJ;AC5DD;;;CAGG,GAaH;;CAEG,SACU,UAAU,CAAA;IAInB,WACI,CAAA,QAAiB,EACjB,kBAA2D,CAAA;QAE3D,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,EAAE,CAAC;QAC/B,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,IAAI,CAAA,CAAE,CAAC;KACtD;IAED;;;;KAIG,GACH,MAAM,mBAAmB,CACrB,GAAW,EACX,OAA+B,EAC/B,OAAgB,EAAA;QAEhB,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,OAAO,sBAAsB,CACzB,GAAG,EACH,IAAI,CAAC,QAAQ,EACb,UAAU,CAAC,GAAG,EACd,OAAO,EACP,IAAI,CAAC,kBAAuC,EAC5C,OAAO,CACV,CAAC;QACL,CAAA,MAAM;YACH,OAAO,sBAAsB,CACzB,GAAG,EACH,UAAU,CAAC,GAAG,EACd,OAAO,EACP,IAAI,CAAC,kBAAwC,EAC7C,OAAO,CACV,CAAC;QACL,CAAA;KACJ;IAED;;;;KAIG,GACH,MAAM,oBAAoB,CACtB,GAAW,EACX,OAA+B,EAAA;QAE/B,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,OAAO,sBAAsB,CACzB,GAAG,EACH,IAAI,CAAC,QAAQ,EACb,UAAU,CAAC,IAAI,EACf,OAAO,EACP,IAAI,CAAC,kBAAuC,CAC/C,CAAC;QACL,CAAA,MAAM;YACH,OAAO,sBAAsB,CACzB,GAAG,EACH,UAAU,CAAC,IAAI,EACf,OAAO,EACP,IAAI,CAAC,kBAAwC,CAChD,CAAC;QACL,CAAA;KACJ;AACJ,CAAA;AAED,MAAM,sBAAsB,GAAG,CAC3B,oBAA4B,EAC5B,cAAsB,EACtB,UAAkB,EAClB,OAA+B,EAC/B,YAAgC,EAChC,OAAgB,KACa;IAC7B,MAAM,cAAc,GAAG,IAAI,GAAG,CAAC,oBAAoB,CAAC,CAAC;IACrD,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,CAAC;;IAGzC,MAAM,OAAO,GAAG,OAAO,EAAE,OAAO,IAAK,CAAA,CAA6B,CAAC;IACnE,MAAM,oBAAoB,GAAyB;QAC/C,IAAI,EAAE,QAAQ,CAAC,QAAQ;QACvB,IAAI,EAAE,QAAQ,CAAC,IAAI;QACnB,MAAM,EAAE,SAAS;QACjB,IAAI,EAAE,cAAc,CAAC,QAAQ;QAC7B,OAAO,EAAE,OAAO;KACnB,CAAC;IAEF,IAAI,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE;QAClD,oBAAoB,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IAC7D,CAAA;;IAGD,IAAI,wBAAwB,GAAW,EAAE,CAAC;IAC1C,IAAI,UAAU,KAAK,UAAU,CAAC,IAAI,EAAE;QAChC,MAAM,IAAI,GAAG,OAAO,EAAE,IAAI,IAAI,EAAE,CAAC;QACjC,wBAAwB,GACpB,qDAAqD,GACrD,CAAmB,gBAAA,EAAA,IAAI,CAAC,MAAM,CAAM,IAAA,CAAA,GACpC,CAAO,IAAA,EAAA,IAAI,EAAE,CAAC;IACrB,CAAA,MAAM;;QAEH,IAAI,OAAO,EAAE;YACT,oBAAoB,CAAC,OAAO,GAAG,OAAO,CAAC;QAC1C,CAAA;IACJ,CAAA;IACD,MAAM,qBAAqB,GACvB,CAAA,EAAG,UAAU,CAAC,WAAW,EAAE,CAAI,CAAA,EAAA,cAAc,CAAC,IAAI,CAAe,aAAA,CAAA,GACjE,CAAS,MAAA,EAAA,cAAc,CAAC,IAAI,CAAM,IAAA,CAAA,GAClC,uBAAuB,GACvB,wBAAwB,GACxB,MAAM,CAAC;IAEX,OAAO,IAAI,OAAO,CAAqB,CAAC,OAAO,EAAE,MAAM,KAAI;QACvD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAEnD,IAAI,OAAO,EAAE;YACT,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,MAAK;gBACvB,OAAO,CAAC,OAAO,EAAE,CAAC;gBAClB,MAAM,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACN,CAAA;QAED,OAAO,CAAC,GAAG,EAAE,CAAC;;QAGd,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,QAAQ,EAAE,MAAM,KAAI;YACvC,MAAM,eAAe,GACjB,QAAQ,EAAE,UAAU,IAAI,WAAW,CAAC,YAAY,CAAC;YACrD,IACI,eAAe,GAAG,WAAW,CAAC,mBAAmB,IACjD,eAAe,GAAG,WAAW,CAAC,iBAAiB,EACjD;gBACE,OAAO,CAAC,OAAO,EAAE,CAAC;gBAClB,MAAM,CAAC,OAAO,EAAE,CAAC;gBACjB,MAAM,CACF,IAAI,KAAK,CACL,CAAA,6CAAA,EACI,QAAQ,CAAC,UACb,CACI,uBAAA,EAAA,QAAQ,EAAE,aAAa,IAAI,SAC/B,CAAE,CAAA,CACL,CACJ,CAAC;YACL,CAAA;;YAGD,MAAM,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAEpC,MAAM,IAAI,GAAa,EAAE,CAAC;YAC1B,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,KAAI;gBACxB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,MAAK;;gBAElB,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;uBAAG,IAAI;iBAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;;gBAGvD,MAAM,eAAe,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;;gBAEjD,MAAM,cAAc,GAAG,QAAQ,CAC3B,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACnC,CAAC;;gBAEF,MAAM,aAAa,GAAG,eAAe,CAAC,CAAC,CAAC,CACnC,KAAK,CAAC,GAAG,CAAC,CACV,KAAK,CAAC,CAAC,CAAC,CACR,IAAI,CAAC,GAAG,CAAC,CAAC;;gBAEf,MAAM,IAAI,GAAG,eAAe,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;;gBAGzD,MAAM,YAAY,GAAG,eAAe,CAAC,KAAK,CACtC,CAAC,EACD,eAAe,CAAC,MAAM,GAAG,CAAC,CAC7B,CAAC;;gBAGF,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;gBAC1B,YAAY,CAAC,OAAO,CAAC,CAAC,MAAM,KAAI;oBAC5B;;;;;qBAKG,GACH,MAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC5D,MAAM,SAAS,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;oBACpC,IAAI,WAAW,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;;oBAGpC,IAAI;wBACA,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;;wBAGvC,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;4BACtC,WAAW,GAAG,MAAM,CAAC;wBACxB,CAAA;oBACJ,CAAA,CAAC,OAAO,CAAC,EAAE;;oBAEX,CAAA;oBAED,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC;gBACH,MAAM,OAAO,GAAG,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;gBAE5C,MAAM,aAAa,GAAG,OAAiC,CAAC;gBACxD,MAAM,eAAe,GAAG,YAAY,CAAC,kBAAkB,CACnD,aAAa,EACb,SAAS,CACL,cAAc,EACd,aAAa,EACb,aAAa,EACb,IAAI,CACF,EACN,cAAc,CACjB,CAAC;gBAEF,IACI,CAAC,cAAc,GAAG,UAAU,CAAC,mBAAmB,IAC5C,cAAc,GAAG,UAAU,CAAC,iBAAiB;gBAEjD,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,KACzB,SAAS,CAAC,qBAAqB,EACrC;oBACE,OAAO,CAAC,OAAO,EAAE,CAAC;gBACrB,CAAA;gBACD,OAAO,CAAC,eAAe,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,KAAI;gBACzB,OAAO,CAAC,OAAO,EAAE,CAAC;gBAClB,MAAM,CAAC,OAAO,EAAE,CAAC;gBACjB,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACxC,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,KAAI;YAC1B,OAAO,CAAC,OAAO,EAAE,CAAC;YAClB,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,MAAM,sBAAsB,GAAG,CAC3B,SAAiB,EACjB,UAAkB,EAClB,OAA+B,EAC/B,YAAiC,EACjC,OAAgB,KACa;IAC7B,MAAM,aAAa,GAAG,UAAU,KAAK,UAAU,CAAC,IAAI,CAAC;IACrD,MAAM,IAAI,GAAW,OAAO,EAAE,IAAI,IAAI,EAAE,CAAC;IAEzC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;IAC/B,MAAM,OAAO,GAAG,OAAO,EAAE,OAAO,IAAK,CAAA,CAA6B,CAAC;IACnE,MAAM,aAAa,GAAyB;QACxC,MAAM,EAAE,UAAU;QAClB,OAAO,EAAE,OAAO;QAChB,GAAG,YAAY,CAAC,gBAAgB,CAAC,GAAG,CAAC;KACxC,CAAC;IAEF,IAAI,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE;QAClD,aAAa,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;IACvD,CAAA;IAED,IAAI,aAAa,EAAE;;QAEf,aAAa,CAAC,OAAO,GAAG;YACpB,GAAG,aAAa,CAAC,OAAO;YACxB,gBAAgB,EAAE,IAAI,CAAC,MAAM;SAChC,CAAC;IACL,CAAA,MAAM;;QAEH,IAAI,OAAO,EAAE;YACT,aAAa,CAAC,OAAO,GAAG,OAAO,CAAC;QACnC,CAAA;IACJ,CAAA;IAED,OAAO,IAAI,OAAO,CAAqB,CAAC,OAAO,EAAE,MAAM,KAAI;QACvD,IAAI,OAA2B,CAAC;;QAEhC,IAAI,aAAa,CAAC,QAAQ,KAAK,OAAO,EAAE;YACpC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QACzC,CAAA,MAAM;YACH,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC1C,CAAA;QAED,IAAI,aAAa,EAAE;YACf,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACvB,CAAA;QAED,IAAI,OAAO,EAAE;YACT,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,MAAK;gBACvB,OAAO,CAAC,OAAO,EAAE,CAAC;gBAClB,MAAM,CAAC,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACN,CAAA;QAED,OAAO,CAAC,GAAG,EAAE,CAAC;QAEd,OAAO,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,QAAQ,KAAI;YAChC,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;YACjC,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAoB,CAAC;YACjD,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC;YAE7C,MAAM,IAAI,GAAa,EAAE,CAAC;YAC1B,QAAQ,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,KAAI;gBAC1B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;YAEH,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,MAAK;;gBAEpB,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;uBAAG,IAAI;iBAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;gBAEjD,MAAM,aAAa,GAAG,OAAiC,CAAC;gBACxD,MAAM,eAAe,GAAG,YAAY,CAAC,kBAAkB,CACnD,aAAa,EACb,SAAS,CACL,UAAU,EACV,aAAa,EACb,aAAa,EACb,IAAI,CACF,EACN,UAAU,CACb,CAAC;gBAEF,IACI,CAAC,UAAU,GAAG,UAAU,CAAC,mBAAmB,IACxC,UAAU,GAAG,UAAU,CAAC,iBAAiB;gBAE7C,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,KACzB,SAAS,CAAC,qBAAqB,EACrC;oBACE,OAAO,CAAC,OAAO,EAAE,CAAC;gBACrB,CAAA;gBACD,OAAO,CAAC,eAAe,CAAC,CAAC;YAC7B,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,KAAI;YAC1B,OAAO,CAAC,OAAO,EAAE,CAAC;YAClB,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;;;;;CAOG,GACH,MAAM,SAAS,GAAG,CACd,UAAkB,EAClB,aAAiC,EACjC,OAA+B,EAC/B,IAAY,KACZ;IACA;;;;;;KAMG,GAEH,IAAI,UAAU,CAAC;IACf,IAAI;QACA,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACjC,CAAA,CAAC,OAAO,KAAK,EAAE;QACZ,IAAI,SAAS,CAAC;QACd,IAAI,sBAAsB,CAAC;QAC3B,IACI,UAAU,IAAI,UAAU,CAAC,wBAAwB,IACjD,UAAU,IAAI,UAAU,CAAC,sBAAsB,EACjD;YACE,SAAS,GAAG,cAAc,CAAC;YAC3B,sBAAsB,GAAG,UAAU,CAAC;QACvC,CAAA,MAAM,IACH,UAAU,IAAI,UAAU,CAAC,wBAAwB,IACjD,UAAU,IAAI,UAAU,CAAC,sBAAsB,EACjD;YACE,SAAS,GAAG,cAAc,CAAC;YAC3B,sBAAsB,GAAG,UAAU,CAAC;QACvC,CAAA,MAAM;YACH,SAAS,GAAG,eAAe,CAAC;YAC5B,sBAAsB,GAAG,YAAY,CAAC;QACzC,CAAA;QAED,UAAU,GAAG;YACT,KAAK,EAAE,SAAS;YAChB,iBAAiB,EAAE,CAAG,EAAA,sBAAsB,CAAsC,mCAAA,EAAA,UAAU,CAAA,uBAAA,EACxF,aAAa,IAAI,SACrB,CAAA,WAAA,EAAc,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAE,CAAA;SAC1C,CAAC;IACL,CAAA;IAED,OAAO,UAAU,CAAC;AACtB,CAAC;ACxaD;;;CAGG,GAII,MAAM,oBAAoB,GAAG,wBAAwB,CAAC;AACtD,MAAM,eAAe,GAAG,mBAAmB,CAAC;AAC5C,MAAM,4BAA4B,GAAG,kCAAkC,CAAC;AACxE,MAAM,aAAa,GAAG,gBAAgB,CAAC;AACvC,MAAM,SAAS,GAAG,mBAAmB,CAAC;AACtC,MAAM,kBAAkB,GAAG,qBAAqB,CAAC;AACjD,MAAM,oBAAoB,GAAG,wBAAwB,CAAC;AACtD,MAAM,sBAAsB,GAAG,4BAA4B,CAAC;AAC5D,MAAM,wBAAwB,GAAG,8BAA8B,CAAC;AAChE,MAAM,oBAAoB,GAAG,yBAAyB,CAAC;AACvD,MAAM,sBAAsB,GAAG,4BAA4B,CAAC;AAE5D,MAAM,iCAAiC,GAC1C,wCAAwC,CAAC;AACtC,MAAM,4BAA4B,GAAG,iCAAiC,CAAC;AACvE,MAAM,sCAAsC,GAC/C,4CAA4C,CAAC;AAE1C,MAAM,4CAA4C,GAAG;IACxD,CAAC,uCAAuC,CAAC,iCAAiC,CAAA,EACtE,iDAAiD;IACrD,CAAC,uCAAuC,CAAC,iBAAiB,CAAA,EACtD,iCAAiC;IACrC,CAAC,uCAAuC,CAAC,aAAa,CAAA,EAClD,6BAA6B;IACjC,CAAC,uCAAuC,CAAC,YAAY,CAAA,EACjD,4BAA4B;CAC1B;AClCV;;;CAGG,GAOH;;CAEG,GACI,MAAM,4BAA4B,GAAG;IACxC,CAACO,oBAA8C,CAAA,EAC3C,4EAA4E;IAChF,CAACC,eAAyC,CAAA,EACtC,yFAAyF;IAC7F,CAACC,4BAAsD,CAAA,EACnD,mDAAmD;IACvD,CAACC,aAAuC,CAAA,EACpC,oGAAoG;IACxG,CAACC,oBAA8C,CAAA,EAC3C,wFAAwF;IAC5F,CAACC,SAAmC,CAAA,EAChC,0CAA0C;IAC9C,CAACC,4CAAsE,CAClE,iCAAiC,CAAA,EAAG,CAAA,wBAAA,EAA2B,uCAAuC,CAAC,iCAAiC,CAAsC,oCAAA,CAAA;IACnL,CAACA,4CAAsE,CAClE,iBAAiB,CAAA,EAAG,CAAA,wBAAA,EAA2B,uCAAuC,CAAC,iBAAiB,CAAsC,oCAAA,CAAA;IACnJ,CAACA,4CAAsE,CAClE,aAAa,CAAA,EAAG,CAAA,wBAAA,EAA2B,uCAAuC,CAAC,aAAa,CAAsC,oCAAA,CAAA;IAC3I,CAACA,4CAAsE,CAClE,YAAY,CAAA,EAAG,CAAA,wBAAA,EAA2B,uCAAuC,CAAC,YAAY,CAAsC,oCAAA,CAAA;IACzI,CAACC,kBAA4C,CAAA,EACzC,qFAAqF;IACzF,CAACC,sBAAgD,CAAA,EAC7C,2DAA2D;IAC/D,CAACC,wBAAkD,CAAA,EAC/C,6DAA6D;IACjE,CAACC,oBAA8C,CAAA,EAC3C,4EAA4E;IAChF,CAACC,sBAAgD,CAAA,EAC7C,iCAAiC;IACrC,CAACC,iCAA2D,CAAA,EACxD,sGAAsG;IAC1G,CAACC,4BAAsD,CAAA,EACnD,8GAA8G;IAClH,CAACC,sCAAgE,CAAA,EAC7D,+HAA+H;CACtI,CAAC;AAEI,MAAO,oBAAqB,SAAQ,SAAS,CAAA;IAC/C,WAAA,CAAY,SAAiB,CAAA;QACzB,KAAK,CAAC,SAAS,EAAE,4BAA4B,CAAC,SAAS,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAC,IAAI,GAAG,sBAAsB,CAAC;QACnC,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,oBAAoB,CAAC,SAAS,CAAC,CAAC;KAC/D;AACJ,CAAA;AAEK,SAAU,0BAA0B,CACtC,SAAiB,EAAA;IAEjB,OAAO,IAAI,oBAAoB,CAAC,SAAS,CAAC,CAAC;AAC/C;AChEA;;;CAGG,SAYU,iBAAiB,CAAA;IAE1B,IAAW,EAAE,GAAA;QACT,OAAO,IAAI,CAAC,GAAG,CAAC;KACnB;IACD,IAAY,EAAE,CAAC,KAAa,EAAA;QACxB,IAAI,CAAC,GAAG,GAAG,KAAK,CAAC;KACpB;IAGD,IAAW,MAAM,GAAA;QACb,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;IACD,IAAY,MAAM,CAAC,KAA4B,EAAA;QAC3C,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;KACxB;IAED,WAAA,CAAY,uBAAiD,CAAA;QACzD,MAAM,oBAAoB,GACtB,uBAAuB,EAAE,oBAAoB,CAAC;QAClD,MAAM,sBAAsB,GACxB,uBAAuB,EAAE,sBAAsB,CAAC;QACpD,MAAM,oBAAoB,GACtB,uBAAuB,EAAE,oBAAoB,CAAC;QAElD,IAAI,oBAAoB,EAAE;YACtB,IAAI,sBAAsB,IAAI,oBAAoB,EAAE;gBAChD,MAAM,0BAA0B,CAC5BZ,4BAAsD,CACzD,CAAC;YACL,CAAA;YAED,IAAI,CAAC,EAAE,GAAG,oBAAoB,CAAC;YAC/B,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,uBAAuB,CAAC;QAC/D,CAAA,MAAM,IAAI,sBAAsB,EAAE;YAC/B,IAAI,oBAAoB,IAAI,oBAAoB,EAAE;gBAC9C,MAAM,0BAA0B,CAC5BA,4BAAsD,CACzD,CAAC;YACL,CAAA;YAED,IAAI,CAAC,EAAE,GAAG,sBAAsB,CAAC;YACjC,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,yBAAyB,CAAC;QACjE,CAAA,MAAM,IAAI,oBAAoB,EAAE;YAC7B,IAAI,oBAAoB,IAAI,sBAAsB,EAAE;gBAChD,MAAM,0BAA0B,CAC5BA,4BAAsD,CACzD,CAAC;YACL,CAAA;YAED,IAAI,CAAC,EAAE,GAAG,oBAAoB,CAAC;YAC/B,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,uBAAuB,CAAC;QAC/D,CAAA,MAAM;YACH,IAAI,CAAC,EAAE,GAAG,2BAA2B,CAAC;YACtC,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,eAAe,CAAC;QACvD,CAAA;KACJ;AACJ;ACxED;;;CAGG,GAIH;;CAEG,GACI,MAAM,oBAAoB,GAAG;IAChC,0BAA0B,EAAE;QACxB,IAAI,EAAE,sCAAsC;QAC5C,IAAI,EAAE,iEAAiE;IAC1E,CAAA;IACD,uBAAuB,EAAE;QACrB,IAAI,EAAE,4BAA4B;QAClC,IAAI,EAAE,yEAAyE;IAClF,CAAA;IACD,oBAAoB,EAAE;QAClB,IAAI,EAAE,0BAA0B;QAChC,IAAI,EAAE,wGAAwG;IACjH,CAAA;IACD,sBAAsB,EAAE;QACpB,IAAI,EAAE,2BAA2B;QACjC,IAAI,EAAE,gCAAgC;IACzC,CAAA;IACD,2BAA2B,EAAE;QACzB,IAAI,EAAE,gCAAgC;QACtC,IAAI,EAAE,wDAAwD;IACjE,CAAA;IACD,qBAAqB,EAAE;QACnB,IAAI,EAAE,yBAAyB;QAC/B,IAAI,EAAE,4DAA4D;IACrE,CAAA;IACD,kBAAkB,EAAE;QAChB,IAAI,EAAE,iBAAiB;QACvB,IAAI,EAAE,uEAAuE;IAChF,CAAA;IACD,iBAAiB,EAAE;QACf,IAAI,EAAE,4CAA4C;QAClD,IAAI,EAAE,oEAAoE;IAC7E,CAAA;IACD,uBAAuB,EAAE;QACrB,IAAI,EAAE,4BAA4B;QAClC,IAAI,EAAE,4FAA4F;IACrG,CAAA;CACJ,CAAC;AAEI,MAAO,aAAc,SAAQ,SAAS,CAAA;IACxC,WAAY,CAAA,SAAiB,EAAE,YAAqB,CAAA;QAChD,KAAK,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC;KAC/B;IAED;;KAEG,GACH,OAAO,qCAAqC,GAAA;QACxC,OAAO,IAAI,aAAa,CACpB,oBAAoB,CAAC,0BAA0B,CAAC,IAAI,EACpD,CAAA,EAAG,oBAAoB,CAAC,0BAA0B,CAAC,IAAI,CAAA,CAAE,CAC5D,CAAC;KACL;IAED;;KAEG,GACH,OAAO,kCAAkC,GAAA;QACrC,OAAO,IAAI,aAAa,CACpB,oBAAoB,CAAC,uBAAuB,CAAC,IAAI,EACjD,CAAA,EAAG,oBAAoB,CAAC,uBAAuB,CAAC,IAAI,CAAA,CAAE,CACzD,CAAC;KACL;IAED;;KAEG,GACH,OAAO,+BAA+B,GAAA;QAClC,OAAO,IAAI,aAAa,CACpB,oBAAoB,CAAC,oBAAoB,CAAC,IAAI,EAC9C,CAAA,EAAG,oBAAoB,CAAC,oBAAoB,CAAC,IAAI,CAAA,CAAE,CACtD,CAAC;KACL;IAED;;KAEG,GACH,OAAO,iCAAiC,GAAA;QACpC,OAAO,IAAI,aAAa,CACpB,oBAAoB,CAAC,sBAAsB,CAAC,IAAI,EAChD,CAAA,EAAG,oBAAoB,CAAC,sBAAsB,CAAC,IAAI,CAAA,CAAE,CACxD,CAAC;KACL;IAED;;KAEG,GACH,OAAO,sCAAsC,GAAA;QACzC,OAAO,IAAI,aAAa,CACpB,oBAAoB,CAAC,2BAA2B,CAAC,IAAI,EACrD,CAAA,EAAG,oBAAoB,CAAC,2BAA2B,CAAC,IAAI,CAAA,CAAE,CAC7D,CAAC;KACL;IAED;;KAEG,GACH,OAAO,gCAAgC,GAAA;QACnC,OAAO,IAAI,aAAa,CACpB,oBAAoB,CAAC,qBAAqB,CAAC,IAAI,EAC/C,CAAA,EAAG,oBAAoB,CAAC,qBAAqB,CAAC,IAAI,CAAA,CAAE,CACvD,CAAC;KACL;IAED;;KAEG,GACH,OAAO,wBAAwB,GAAA;QAC3B,OAAO,IAAI,aAAa,CACpB,oBAAoB,CAAC,kBAAkB,CAAC,IAAI,EAC5C,oBAAoB,CAAC,kBAAkB,CAAC,IAAI,CAC/C,CAAC;KACL;IAED;;KAEG,GACH,OAAO,4BAA4B,GAAA;QAC/B,OAAO,IAAI,aAAa,CACpB,oBAAoB,CAAC,iBAAiB,CAAC,IAAI,EAC3C,oBAAoB,CAAC,iBAAiB,CAAC,IAAI,CAC9C,CAAC;KACL;IAED;;KAEG,GACH,OAAO,kCAAkC,GAAA;QACrC,OAAO,IAAI,aAAa,CACpB,oBAAoB,CAAC,uBAAuB,CAAC,IAAI,EACjD,oBAAoB,CAAC,uBAAuB,CAAC,IAAI,CACpD,CAAC;KACL;AACJ;AChJD;;;CAGG,GA0IH,MAAM,oBAAoB,GAA8B;IACpD,QAAQ,EAAET,WAAS,CAAC,YAAY;IAChC,SAAS,EAAEA,WAAS,CAAC,iBAAiB;IACtC,YAAY,EAAEA,WAAS,CAAC,YAAY;IACpC,eAAe,EAAEA,WAAS,CAAC,YAAY;IACvC,iBAAiB,EAAE;QACf,UAAU,EAAEA,WAAS,CAAC,YAAY;QAClC,gBAAgB,EAAEA,WAAS,CAAC,YAAY;QACxC,UAAU,EAAEA,WAAS,CAAC,YAAY;QAClC,GAAG,EAAEA,WAAS,CAAC,YAAY;IAC9B,CAAA;IACD,gBAAgB,EAAE,EAAE;IACpB,sBAAsB,EAAEA,WAAS,CAAC,YAAY;IAC9C,iBAAiB,EAAEA,WAAS,CAAC,YAAY;IACzC,kBAAkB,EAAE,EAAE;IACtB,YAAY,EAAE,YAAY,CAAC,GAAG;IAC9B,iBAAiB,EAAE;QACf,kBAAkB,EAAE,kBAAkB,CAAC,IAAI;QAC3C,MAAM,EAAEA,WAAS,CAAC,YAAY;IACjC,CAAA;IACD,0BAA0B,EAAE,KAAK;IACjC,sBAAsB,EAAE,KAAK;CAChC,CAAC;AAEF,MAAM,qBAAqB,GAAiB;IACxC,yBAAyB,EAAE,KAAK;CACnC,CAAC;AAEF,MAAM,sBAAsB,GAAkB;IAC1C,cAAc,EAAE,MAAW;;KAE1B;IACD,iBAAiB,EAAE,KAAK;IACxB,QAAQ,EAAEC,QAAAA,QAAQ,CAAC,IAAI;CAC1B,CAAC;AAEF,MAAM,sBAAsB,GAAgC;IACxD,aAAa,EAAE,sBAAsB;IACrC,aAAa,EAAE,IAAI,UAAU,EAAE;IAC/B,QAAQ,EAAED,WAAS,CAAC,YAAY;IAChC,kBAAkB,EAAE,CAAA,CAA4C;IAChE,sBAAsB,EAAE,KAAK;CAChC,CAAC;AAEF,MAAM,yBAAyB,GAAmC;IAC9D,WAAW,EAAE;QACT,OAAO,EAAEA,WAAS,CAAC,YAAY;QAC/B,UAAU,EAAEA,WAAS,CAAC,YAAY;IACrC,CAAA;CACJ,CAAC;AAWF;;;;;;;;;;CAUG,GACa,SAAA,qBAAqB,CAAC,EAClC,IAAI,EACJ,MAAM,EACN,KAAK,EACL,MAAM,EACN,SAAS,EACG,EAAA;IACZ,MAAM,aAAa,GAAgC;QAC/C,GAAG,sBAAsB;QACzB,aAAa,EAAE,IAAI,UAAU,CACzB,MAAM,EAAE,QAAQ,EAChB,MAAM,EAAE,kBAA4D,CACvE;QACD,aAAa,EAAE,MAAM,EAAE,aAAa,IAAI,sBAAsB;QAC9D,sBAAsB,EAAE,MAAM,EAAE,sBAAsB,IAAI,KAAK;KAClE,CAAC;;IAGF,IACI,CAAC,CAAC,IAAI,CAAC,iBAAiB,IACxB,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAU,IACpC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EAC5C;QACE,MAAM,aAAa,CAAC,wBAAwB,EAAE,CAAC;IAClD,CAAA;IAED,OAAO;QACH,IAAI,EAAE;YAAE,GAAG,oBAAoB;YAAE,GAAG,IAAI;QAAA,CAAE;QAC1C,MAAM,EAAE;YAAE,GAAG,MAAM;QAAA,CAAE;QACrB,KAAK,EAAE;YAAE,GAAG,qBAAqB;YAAE,GAAG,KAAK;QAAA,CAAE;QAC7C,MAAM,EAAE;YAAE,GAAG,aAAa;YAAE,GAAG,MAAM;QAAA,CAAE;QACvC,SAAS,EAAE;YAAE,GAAG,yBAAyB;YAAE,GAAG,SAAS;QAAA,CAAE;KAC5D,CAAC;AACN,CAAC;AAYK,SAAU,iCAAiC,CAAC,EAC9C,kBAAkB,EAClB,uBAAuB,EACvB,MAAM,EACqB,EAAA;IAC3B,MAAM,iBAAiB,GAAsB,IAAI,iBAAiB,CAC9D,uBAAuB,CAC1B,CAAC;IAEF,MAAM,aAAa,GACf,MAAM,EAAE,aAAa,IAAI,sBAAsB,CAAC;IAEpD,IAAI,aAA6B,CAAC;;IAElC,IAAI,MAAM,EAAE,aAAa,EAAE;QACvB,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC;;IAExC,CAAA,MAAM;QACH,aAAa,GAAG,IAAI,UAAU,CAC1B,MAAM,EAAE,QAAQ,EAChB,MAAM,EAAE,kBAA4D,CACvE,CAAC;IACL,CAAA;IAED,OAAO;QACH,kBAAkB,EAAE,kBAAkB,IAAI,EAAE;QAC5C,iBAAiB,EAAE,iBAAiB;QACpC,MAAM,EAAE;YACJ,aAAa;YACb,aAAa;QAChB,CAAA;QACD,sBAAsB,EAAE,MAAM,EAAE,sBAAsB,IAAI,KAAK;KAClE,CAAC;AACN;AClSA;;;CAGG,SAKU,aAAa,CAAA;IACtB;;;;KAIG,GACH,YAAY,GAAA;QACR,OAAOsB,KAAAA,EAAM,EAAE,CAAC;KACnB;IAED;;;KAGG,GACH,MAAM,CAAC,IAAY,EAAA;QACf,MAAM,SAAS,GACX,4EAA4E,CAAC;QACjF,OAAO,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC/B;AACJ;AC3BD;;;CAGG,SAIU,aAAa,CAAA;IACtB;;;;;KAKG,GACH,OAAO,YAAY,CAAC,GAAW,EAAE,QAAyB,EAAA;QACtD,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;KACpE;IAED;;;KAGG,GACH,OAAO,eAAe,CAAC,GAAW,EAAE,QAAyB,EAAA;QACzD,OAAO,aAAa,CAAC,YAAY,CAAC,GAAG,EAAE,QAAQ,CAAC,CAC3C,OAAO,CAAC,IAAI,EAAEtB,WAAS,CAAC,YAAY,CAAC,CACrC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACnB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;KAC5B;IAED;;;;;KAKG,GACH,OAAO,YAAY,CAAC,SAAiB,EAAA;QACjC,OAAO,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;KACxE;IAED;;KAEG,GACH,OAAO,eAAe,CAAC,SAAiB,EAAA;QACpC,IAAI,GAAG,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;QAC1D,MAAO,GAAG,CAAC,MAAM,GAAG,CAAC,CAAE;YACnB,GAAG,IAAI,GAAG,CAAC;QACd,CAAA;QACD,OAAO,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;KAC1C;AACJ;ACjDD;;;CAGG,SAKU,SAAS,CAAA;IAClB;;;KAGG,GACH,MAAM,CAAC,MAAc,EAAA;QACjB,OAAO,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;KACjE;AACJ;AChBD;;;CAGG,GAQH;;CAEG,SACU,aAAa,CAAA;IAGtB,WAAA,EAAA;QACI,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;KACpC;IACD;;;KAGG,GACH,MAAM,iBAAiB,GAAA;QACnB,MAAM,QAAQ,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,iCAAiC,CAAC,QAAQ,CAAC,CAAC;QACnE,OAAO;YAAE,QAAQ;YAAE,SAAS;QAAA,CAAE,CAAC;KAClC;IAED;;KAEG,GACK,oBAAoB,GAAA;QACxB,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,MAAM,SAAS,GAAG,GAAG,GAAI,GAAG,GAAG,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAC1D,MAAO,OAAO,CAAC,MAAM,IAAI,iBAAiB,CAAE;YACxC,MAAM,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,IAAI,IAAI,IAAI,SAAS,EAAE;gBAKnB,SAAS;YACZ,CAAA;YACD,MAAM,KAAK,GAAG,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC;YAC/C,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QAC3C,CAAA;QACD,MAAM,QAAQ,GAAW,OAAO,CAAC,IAAI,CAACA,WAAS,CAAC,YAAY,CAAC,CAAC;QAC9D,OAAO,aAAa,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;KAClD;IAED;;;KAGG,GACK,iCAAiC,CAAC,YAAoB,EAAA;QAC1D,OAAO,aAAa,CAAC,eAAe,CAChC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,EAClE,aAAa,CAAC,MAAM,CACvB,CAAC;KACL;AACJ;AC9DD;;;CAGG,GAQH;;;;CAIG,SACU,cAAc,CAAA;IAKvB,WAAA,EAAA;;QAEI,IAAI,CAAC,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QACzC,IAAI,CAAC,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC;QACzC,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;KACpC;IAED;;KAEG,GACH,eAAe,GAAA;QACX,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC9C;IACD;;;;KAIG,GACH,SAAS,GAAA;QACL,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC9C;IAED;;;KAGG,GACH,aAAa,GAAA;QACT,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;KAC5C;IAED;;;KAGG,GACH,YAAY,CAAC,KAAa,EAAA;QACtB,OAAO,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KAC5C;IAED;;;KAGG,GACH,YAAY,CAAC,KAAa,EAAA;QACtB,OAAO,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KAC5C;IAED;;KAEG,GACH,iBAAiB,GAAA;QACb,OAAO,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC;KACjD;IAED;;KAEG,GACH,sBAAsB,GAAA;QAClB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC9C;IAED;;;KAGG,GACH,qBAAqB,GAAA;QACjB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC9C;IAED;;KAEG,GACH,aAAa,GAAA;QACT,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC9C;IAED;;KAEG,GACH,OAAO,GAAA;QACH,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KAC9C;IAED;;KAEG,GACH,MAAM,UAAU,CAAC,SAAiB,EAAA;QAC9B,OAAO,aAAa,CAAC,eAAe,CAChC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,EAC/D,aAAa,CAAC,MAAM,CACvB,CAAC;KACL;AACJ;AChHD;;;CAGG,GAUG,SAAU,qBAAqB,CAAC,UAA4B,EAAA;IAC9D,MAAM,QAAQ,GACV,AAAC,UAAU,CAAC,cAAc,KAAK,cAAc,CAAC,aAAa,IACvD,UAAU,CAAC,QAAQ,IACvB,UAAU,CAAC,QAAQ,CAAC;IACxB,MAAM,MAAM,GACR,UAAU,CAAC,SAAS,IACpB,UAAU,CAAC,SAAS,CAAC,WAAW,EAAE,KAC9B,oBAAoB,CAAC,MAAM,CAAC,WAAW,EAAE,GACvC,UAAU,CAAC,SAAS,CAAC,WAAW,EAAE,GAClC,EAAE,CAAC;IACb,MAAM,aAAa,GAAG;QAClB,UAAU,CAAC,aAAa;QACxB,UAAU,CAAC,WAAW;QACtB,UAAU,CAAC,cAAc;QACzB,QAAQ;QACR,UAAU,CAAC,KAAK,IAAI,EAAE;QACtB,UAAU,CAAC,MAAM,IAAI,EAAE;QACvB,UAAU,CAAC,mBAAmB,IAAI,EAAE;QACpC,MAAM;KACT,CAAC;IAEF,OAAO,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;AACjE,CAAC;AAEK,SAAU,kBAAkB,CAAC,OAAoB,EAAA;IACnD,MAAM,YAAY,GAAG,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,MAAM,UAAU,GAAG;QACf,OAAO,CAAC,aAAa;QACrB,OAAO,CAAC,WAAW;QACnB,YAAY,IAAI,OAAO,CAAC,QAAQ,IAAI,EAAE;KACzC,CAAC;IAEF,OAAO,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;AAC9D;AC/CA;;;CAGG,GAiCH;;;CAGG,GACG,MAAO,WAAY,SAAQ,YAAY,CAAA;IAMzC,WAAA,CACI,MAAc,EACd,QAAgB,EAChB,UAAmB,EACnB,sBAA+C,CAAA;QAE/C,KAAK,CACD,QAAQ,EACR,UAAU,EACV,MAAM,EACN,IAAIuB,WAAAA,qBAAqB,EAAE,EAC3B,sBAAsB,CACzB,CAAC;QAfE,IAAK,CAAA,KAAA,GAAiB,CAAA,CAAE,CAAC;QACzB,IAAc,CAAA,cAAA,GAAoB,EAAE,CAAC;QAezC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED;;;KAGG,GACH,qBAAqB,CAAC,IAAgB,EAAA;QAClC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAClC;IAED;;KAEG,GACH,UAAU,GAAA;QACN,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,GAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KAC1D;IAED;;;KAGG,GACH,oBAAoB,CAAC,KAAmB,EAAA;QACpC,MAAM,aAAa,GAAkB;YACjC,QAAQ,EAAE,CAAA,CAAE;YACZ,QAAQ,EAAE,CAAA,CAAE;YACZ,YAAY,EAAE,CAAA,CAAE;YAChB,aAAa,EAAE,CAAA,CAAE;YACjB,WAAW,EAAE,CAAA,CAAE;SAClB,CAAC;QAEF,IAAK,MAAM,GAAG,IAAI,KAAK,CAAE;YACrB,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;YACzB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC3B,SAAS;YACZ,CAAA;YACD,IAAI,KAAK,YAAY,aAAa,EAAE;gBAChC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAsB,CAAC;YACxD,CAAA,MAAM,IAAIC,eAA4B,CAAC,KAAK,CAAC,EAAE;gBAC5C,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAsB,CAAC;YACxD,CAAA,MAAM,IAAIC,mBAAgC,CAAC,KAAK,CAAC,EAAE;gBAChD,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,GAAG,KAA0B,CAAC;YAChE,CAAA,MAAM,IAAIC,oBAAiC,CAAC,KAAK,CAAC,EAAE;gBACjD,aAAa,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,KAA2B,CAAC;YAClE,CAAA,MAAM,IAAIC,mBAAgC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE;gBACrD,aAAa,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,KAA0B,CAAC;YAC/D,CAAA,MAAM;gBACH,SAAS;YACZ,CAAA;QACJ,CAAA;QAED,OAAO,aAAa,CAAC;KACxB;IAED;;;KAGG,GACH,oBAAoB,CAAC,aAA4B,EAAA;;QAE7C,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAE5B,KAAK,GAAG;YACJ,GAAG,KAAK;YACR,GAAG,aAAa,CAAC,QAAQ;YACzB,GAAG,aAAa,CAAC,QAAQ;YACzB,GAAG,aAAa,CAAC,YAAY;YAC7B,GAAG,aAAa,CAAC,aAAa;YAC9B,GAAG,aAAa,CAAC,WAAW;SAC/B,CAAC;;QAGF,OAAO,KAAK,CAAC;KAChB;IAED;;KAEG,GACH,gBAAgB,GAAA;QACZ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;;QAG7C,MAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QACjE,OAAO,aAAa,CAAC;KACxB;IAED;;;KAGG,GACH,gBAAgB,CAAC,aAA4B,EAAA;QACzC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;;QAG7C,MAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC;QACvD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAErB,IAAI,CAAC,UAAU,EAAE,CAAC;KACrB;IAED;;KAEG,GACH,QAAQ,GAAA;QACJ,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACnD,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;IAED;;;KAGG,GACH,QAAQ,CAAC,KAAmB,EAAA;QACxB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAC;QACnD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;;QAGnB,IAAI,CAAC,UAAU,EAAE,CAAC;KACrB;IAED;;;KAGG,GACH,OAAO,CAAC,GAAW,EAAA;QACf,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAa,UAAA,EAAA,GAAG,CAAE,CAAA,CAAC,CAAC;;QAGzC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;KACrB;IAED;;;;KAIG,GACH,OAAO,CAAC,GAAW,EAAE,KAAqB,EAAA;QACtC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAa,UAAA,EAAA,GAAG,CAAE,CAAA,CAAC,CAAC;;QAGzC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;;QAGnB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;KACxB;IAED,qBAAqB,CAAC,UAA4B,EAAA;QAC9C,OAAO,qBAAqB,CAAC,UAAU,CAAC,CAAC;KAC5C;IAED,kBAAkB,CAAC,OAAoB,EAAA;QACnC,OAAO,kBAAkB,CAAC,OAAO,CAAC,CAAC;KACtC;IAED,cAAc,GAAA;QACV,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC9C,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAExD,OAAO,WAAW,CAAC;KACtB;IAED,YAAY,GAAA;QACR,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC9C,MAAM,SAAS,GAAG;YACd,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;YAC5C,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC;YACpD,YAAY,EAAE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC;SACzD,CAAC;QAEF,OAAO,SAAS,CAAC;KACpB;IAED;;;;KAIG,GACH,UAAU,CAAC,UAAkB,EAAA;QACzB,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAC/C,OAAO,aAAa,GACd,MAAM,CAAC,MAAM,CAAC,IAAI,aAAa,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAC5D,IAAI,CAAC;KACd;IAED;;;KAGG,GACH,MAAM,UAAU,CAAC,OAAsB,EAAA;QACnC,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC;QACrE,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;KACrC;IAED;;;KAGG,GACH,oBAAoB,CAAC,UAAkB,EAAA;QACnC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAkB,CAAC;QAC1D,IAAIH,eAA4B,CAAC,OAAO,CAAC,EAAE;YACvC,OAAO,OAAO,CAAC;QAClB,CAAA;QACD,OAAO,IAAI,CAAC;KACf;IAED;;;KAGG,GACH,MAAM,oBAAoB,CAAC,OAAsB,EAAA;QAC7C,MAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;QACvD,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;KACrC;IAED;;;KAGG,GACH,wBAAwB,CAAC,cAAsB,EAAA;QAC3C,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAsB,CAAC;QACtE,IAAIC,mBAAgC,CAAC,WAAW,CAAC,EAAE;YAC/C,OAAO,WAAW,CAAC;QACtB,CAAA;QACD,OAAO,IAAI,CAAC;KACf;IAED;;;KAGG,GACH,MAAM,wBAAwB,CAC1B,WAA8B,EAAA;QAE9B,MAAM,cAAc,GAAG,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC;QAC/D,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;KAC7C;IAED;;;KAGG,GACH,yBAAyB,CACrB,eAAuB,EAAA;QAEvB,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAC7B,eAAe,CACI,CAAC;QACxB,IAAIC,oBAAiC,CAAC,YAAY,CAAC,EAAE;YACjD,OAAO,YAAkC,CAAC;QAC7C,CAAA;QACD,OAAO,IAAI,CAAC;KACf;IAED;;;KAGG,GACH,MAAM,yBAAyB,CAC3B,YAAgC,EAAA;QAEhC,MAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;QACjE,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;KAC/C;IAED;;;KAGG,GACH,cAAc,CAAC,cAAsB,EAAA;QACjC,MAAM,WAAW,GAAsB,IAAI,CAAC,OAAO,CAC/C,cAAc,CACI,CAAC;QACvB,IAAIC,mBAAgC,CAAC,cAAc,EAAE,WAAW,CAAC,EAAE;YAC/D,OAAO,WAAW,CAAC;QACtB,CAAA;QACD,OAAO,IAAI,CAAC;KACf;IAED;;;KAGG,GACH,cAAc,CAAC,WAA8B,EAAA;QACzC,MAAM,cAAc,GAAGC,sBAAmC,CAAC,WAAW,CAAC,CAAC;QACxE,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;KAC7C;IAED;;;KAGG,GACH,kBAAkB,CACd,kBAA0B,EAAA;QAE1B,MAAM,qBAAqB,GAA0B,IAAI,CAAC,OAAO,CAC7D,kBAAkB,CACI,CAAC;QAC3B,IACI,qBAAqB,IACrBC,uBAAoC,CAChC,kBAAkB,EAClB,qBAAqB,CACxB,EACH;YACE,OAAO,qBAAqB,CAAC;QAChC,CAAA;QACD,OAAO,IAAI,CAAC;KACf;IAED;;;;KAIG,GACH,kBAAkB,CACd,kBAA0B,EAC1B,eAAsC,EAAA;QAEtC,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;KACrD;IAED;;;KAGG,GACH,oBAAoB,CAAC,GAAW,EAAA;QAC5B,MAAM,uBAAuB,GAA4B,IAAI,CAAC,OAAO,CACjE,GAAG,CACqB,CAAC;QAC7B,IACI,uBAAuB,IACvBC,yBAAsC,CAAC,GAAG,EAAE,uBAAuB,CAAC,EACtE;YACE,OAAO,uBAAuB,CAAC;QAClC,CAAA;QACD,OAAO,IAAI,CAAC;KACf;IAED;;KAEG,GACH,wBAAwB,GAAA;QACpB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,KAAI;YACjC,OAAO,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;KACN;IAED;;;;KAIG,GACH,oBAAoB,CAAC,GAAW,EAAE,QAAiC,EAAA;QAC/D,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;KAC/B;IAED;;;KAGG,GACH,kBAAkB,CAAC,kBAA0B,EAAA;QACzC,MAAM,eAAe,GAAqB,IAAI,CAAC,OAAO,CAClD,kBAAkB,CACD,CAAC;QACtB,IACI,eAAe,IACfC,kBAA+B,CAAC,kBAAkB,EAAE,eAAe,CAAC,EACtE;YACE,OAAO,eAAe,CAAC;QAC1B,CAAA;QACD,OAAO,IAAI,CAAC;KACf;IAED;;;;KAIG,GACH,kBAAkB,CACd,kBAA0B,EAC1B,eAAiC,EAAA;QAEjC,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;KACrD;IAED;;;;KAIG,GACH,UAAU,CAAC,GAAW,EAAA;QAClB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAa,UAAA,EAAA,GAAG,CAAE,CAAA,CAAC,CAAC;;QAGzC,IAAI,MAAM,GAAY,KAAK,CAAC;QAC5B,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAE9B,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;YACd,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;YAClB,MAAM,GAAG,IAAI,CAAC;QACjB,CAAA;;QAGD,IAAI,MAAM,EAAE;YACR,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrB,IAAI,CAAC,UAAU,EAAE,CAAC;QACrB,CAAA;QACD,OAAO,MAAM,CAAC;KACjB;IAED;;;KAGG,GACH,qBAAqB,CAAC,UAAkB,EAAA;QACpC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;KAC/B;IAED;;;KAGG,GACH,WAAW,CAAC,GAAW,EAAA;QACnB,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;KACvC;IAED;;KAEG,GACH,OAAO,GAAA;QACH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,CAAC,CAAC;;QAG/C,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAC9B,OAAO,CAAC;eAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;SAAC,CAAC;KAClC;IAED;;KAEG,GACH,KAAK,GAAA;QACD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAC;;QAG5D,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;;QAGjC,SAAS,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;YACtB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,UAAU,EAAE,CAAC;KACrB;IAED;;;KAGG,GACH,OAAO,qBAAqB,CAAC,KAAa,EAAA;QACtC,OAAO,YAAY,CAAC,mBAAmB,CACnC,YAAY,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAC1C,CAAC;KACL;IAED;;;KAGG,GACH,OAAO,iBAAiB,CAAC,aAA4B,EAAA;QACjD,OAAO,UAAU,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;KACtD;IAED;;KAEG,GACH,wBAAwB,CACpB,eAAuB,EACvB,UAA+B,EAAA;QAE/B,MAAM,eAAe,GAAG,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;QAE/D,IAAI,eAAe,KAAK,eAAe,EAAE;YACrC,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;YAChD,IAAI,SAAS,EAAE;gBACX,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;gBACjC,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,SAAS,CAAC,CAAC;gBACzC,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,CAAuB,oBAAA,EAAA,UAAU,CAAC,cAAc,CAAY,UAAA,CAAA,CAC/D,CAAC;gBACF,OAAO,eAAe,CAAC;YAC1B,CAAA,MAAM;gBACH,IAAI,CAAC,MAAM,CAAC,KAAK,CACb,CAAmC,gCAAA,EAAA,UAAU,CAAC,cAAc,CAAuE,qEAAA,CAAA,CACtI,CAAC;YACL,CAAA;QACJ,CAAA;QAED,OAAO,eAAe,CAAC;KAC1B;AACJ;AC/iBD;;;CAGG,GA0BH,MAAM,sBAAsB,GAAc;IACtC,OAAO,EAAE,CAAA,CAAE;IACX,OAAO,EAAE,CAAA,CAAE;IACX,WAAW,EAAE,CAAA,CAAE;IACf,YAAY,EAAE,CAAA,CAAE;IAChB,WAAW,EAAE,CAAA,CAAE;CAClB,CAAC;AAEF;;;CAGG,SACU,UAAU,CAAA;IAOnB,WAAA,CACI,OAAoB,EACpB,MAAc,EACd,WAA0B,CAAA;QAE1B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACtE,IAAI,WAAW,EAAE;YACb,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAClC,CAAA;QACD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED;;KAEG,GACH,UAAU,GAAA;QACN,OAAO,IAAI,CAAC,eAAe,CAAC;KAC/B;IAED;;KAEG,GACH,SAAS,GAAA;QACL,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;QACjD,IAAI,UAAU,GAAG,UAAU,CAAC,iBAAiB,CACzC,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAmB,CACnD,CAAC;;QAGF,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACtD,UAAU,GAAG,IAAI,CAAC,UAAU,CACxB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,EAC9B,UAAU,CACb,CAAC;QACL,CAAA,MAAM;YACH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;QACnD,CAAA;QACD,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAE7B,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;KACrC;IAED;;;KAGG,GACH,WAAW,CAAC,KAAa,EAAA;QACrB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uCAAuC,CAAC,CAAC;QAC3D,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAE3B,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;YACtD,MAAM,iBAAiB,GAAG,YAAY,CAAC,mBAAmB,CACtD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CACvD,CAAC;YACF,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;QACpD,CAAA,MAAM;YACH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;QACzD,CAAA;KACJ;IAED;;KAEG,GACH,UAAU,GAAA;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;KAClC;IAED;;KAEG,GACH,gBAAgB,GAAA;QACZ,MAAM,6BAA6B,GAAG,WAAW,CAAC,qBAAqB,CACnE,IAAI,CAAC,aAAa,CACrB,CAAC;QACF,OAAO,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,6BAA6B,CAAC,CAAC;KAC3E;IAED;;KAEG,GACH,MAAM,cAAc,CAChB,aAAA,GAAwB,IAAI,cAAc,EAAE,CAAC,aAAa,EAAE,EAAA;QAE5D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC3C,IAAI,YAAY,CAAC;QACjB,IAAI;YACA,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,YAAY,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBAClD,MAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAC1D,CAAA;YACD,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAA,CAAE,EAAE,aAAa,CAAC,CAAC;QACzD,CAAA,QAAS;YACN,IAAI,IAAI,CAAC,WAAW,IAAI,YAAY,EAAE;gBAClC,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;YACzD,CAAA;QACJ,CAAA;KACJ;IAED;;;;;KAKG,GACH,MAAM,kBAAkB,CACpB,aAAqB,EAAA;QAErB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAChD,IAAI,aAAa,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,EAAE;YACpD,OACI,WAAW,CAAC,MAAM,CACd,CAAC,UAAU,GAAK,UAAU,CAAC,aAAa,KAAK,aAAa,CAC7D,CAAC,CAAC,CAAC,IAAI,IAAI,EACd;QACL,CAAA,MAAM;YACH,OAAO,IAAI,CAAC;QACf,CAAA;KACJ;IAED;;;;;KAKG,GACH,MAAM,mBAAmB,CACrB,cAAsB,EAAA;QAEtB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAChD,IAAI,cAAc,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,EAAE;YACrD,OACI,WAAW,CAAC,MAAM,CACd,CAAC,UAAU,GAAK,UAAU,CAAC,cAAc,KAAK,cAAc,CAC/D,CAAC,CAAC,CAAC,IAAI,IAAI,EACd;QACL,CAAA,MAAM;YACH,OAAO,IAAI,CAAC;QACf,CAAA;KACJ;IAED;;;KAGG,GACH,MAAM,aAAa,CACf,OAAoB,EACpB,aAAsB,EAAA;QAEtB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAC1C,IAAI,YAAY,CAAC;QACjB,IAAI;YACA,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,YAAY,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACjD,MAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAC1D,CAAA;YACD,IAAI,CAAC,OAAO,CAAC,aAAa,CACtB,OAAO,EACP,aAAa,IAAI,IAAI,aAAa,EAAE,CAAC,YAAY,EAAE,CACtD,CAAC;QACL,CAAA,QAAS;YACN,IAAI,IAAI,CAAC,WAAW,IAAI,YAAY,EAAE;gBAClC,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;YACzD,CAAA;QACJ,CAAA;KACJ;IAED;;KAEG,GACH,MAAM,cAAc,GAAA;QAChB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACnB,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,6DAA6D,CAChE,CAAC;YACF,OAAO;QACV,CAAA;QACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mDAAmD,CAAC,CAAC;QACtE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACrB,MAAM,YAAY,GAAG,IAAI,iBAAiB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACxD,MAAM,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QACvD,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC9C,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QACrC,MAAM,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;KACzD;IAED;;KAEG,GACK,iBAAiB,GAAA;QACrB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;KAC/B;IAED;;;;KAIG,GACK,UAAU,CACd,QAAmB,EACnB,YAAuB,EAAA;QAEvB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;QACjE,MAAM,iBAAiB,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QACrE,OAAO,IAAI,CAAC,YAAY,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAAC;KAC7D;IAED;;;;KAIG,GACK,YAAY,CAAC,QAAgB,EAAE,QAAgB,EAAA;QACnD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,MAAc,KAAI;YAC7C,MAAM,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;;YAGlC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;gBAClC,IAAI,QAAQ,KAAK,IAAI,EAAE;oBACnB,QAAQ,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;gBAC/B,CAAA;YACJ,CAAA,MAAM;;gBAEH,MAAM,eAAe,GAAG,QAAQ,KAAK,IAAI,CAAC;gBAC1C,MAAM,gBAAgB,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC;gBACtD,MAAM,kBAAkB,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACpD,MAAM,0BAA0B,GAC5B,OAAO,QAAQ,CAAC,MAAM,CAAC,KAAK,WAAW,IACvC,QAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC;gBAE9B,IACI,eAAe,IACf,gBAAgB,IAChB,kBAAkB,IAClB,0BAA0B,EAC5B;oBACE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;gBACjD,CAAA,MAAM;oBACH,QAAQ,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;gBAC/B,CAAA;YACJ,CAAA;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,QAAqB,CAAC;KAChC;IAED;;;;;KAKG,GACK,aAAa,CAAC,QAAmB,EAAE,QAAmB,EAAA;QAC1D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACrD,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,GAC3B,IAAI,CAAC,iBAAiB,CAClB,QAAQ,CAAC,OAAO,EAChB,QAAQ,CAAC,OAAO,CACnB,GACD,QAAQ,CAAC,OAAO,CAAC;QACvB,MAAM,YAAY,GAAG,QAAQ,CAAC,WAAW,GACnC,IAAI,CAAC,iBAAiB,CAClB,QAAQ,CAAC,WAAW,EACpB,QAAQ,CAAC,WAAW,CACvB,GACD,QAAQ,CAAC,WAAW,CAAC;QAC3B,MAAM,aAAa,GAAG,QAAQ,CAAC,YAAY,GACrC,IAAI,CAAC,iBAAiB,CAClB,QAAQ,CAAC,YAAY,EACrB,QAAQ,CAAC,YAAY,CACxB,GACD,QAAQ,CAAC,YAAY,CAAC;QAC5B,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,GAC3B,IAAI,CAAC,iBAAiB,CAClB,QAAQ,CAAC,OAAO,EAChB,QAAQ,CAAC,OAAO,CACnB,GACD,QAAQ,CAAC,OAAO,CAAC;QACvB,MAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,GAClC,IAAI,CAAC,iBAAiB,CAClB,QAAQ,CAAC,WAAW,EACpB,QAAQ,CAAC,WAAW,CACvB,GACD,QAAQ,CAAC,WAAW,CAAC;QAE3B,OAAO;YACH,GAAG,QAAQ;YACX,OAAO,EAAE,QAAQ;YACjB,WAAW,EAAE,YAAY;YACzB,YAAY,EAAE,aAAa;YAC3B,OAAO,EAAE,QAAQ;YACjB,WAAW,EAAE,WAAW;SAC3B,CAAC;KACL;IAED;;;;KAIG,GACK,iBAAiB,CACrB,QAA2B,EAC3B,QAA4B,EAAA;QAE5B,MAAM,UAAU,GAAG;YAAE,GAAG,QAAQ;QAAA,CAAE,CAAC;QACnC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,KAAI;YACrC,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;gBAC/C,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC;YAC7B,CAAA;QACL,CAAC,CAAC,CAAC;QACH,OAAO,UAAU,CAAC;KACrB;IAED;;;KAGG,GACK,eAAe,CAAC,aAAwB,EAAA;QAC5C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAC;QACnE,OAAO;YACH,OAAO,EAAE;gBACL,GAAG,sBAAsB,CAAC,OAAO;gBACjC,GAAG,aAAa,CAAC,OAAO;YAC3B,CAAA;YACD,OAAO,EAAE;gBACL,GAAG,sBAAsB,CAAC,OAAO;gBACjC,GAAG,aAAa,CAAC,OAAO;YAC3B,CAAA;YACD,WAAW,EAAE;gBACT,GAAG,sBAAsB,CAAC,WAAW;gBACrC,GAAG,aAAa,CAAC,WAAW;YAC/B,CAAA;YACD,YAAY,EAAE;gBACV,GAAG,sBAAsB,CAAC,YAAY;gBACtC,GAAG,aAAa,CAAC,YAAY;YAChC,CAAA;YACD,WAAW,EAAE;gBACT,GAAG,sBAAsB,CAAC,WAAW;gBACrC,GAAG,aAAa,CAAC,WAAW;YAC/B,CAAA;SACJ,CAAC;KACL;AACJ;ACzYD;;;CAGG,GAcH;;;CAGG,SACU,eAAe,CAAA;IAUxB;;;KAGG,GACI,OAAO,aAAa,CAAC,SAAiB,EAAA;QACzC,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;QAC9C,eAAe,CAAC,GAAG,GAAG,SAAS,CAAC;QAChC,OAAO,eAAe,CAAC;KAC1B;IAED;;;;;;KAMG,GACI,OAAO,eAAe,CACzB,UAAkB,EAClB,UAAkB,EAClB,iBAA0B,EAAA;QAE1B,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;QAC9C,eAAe,CAAC,UAAU,GAAG,UAAU,CAAC;QACxC,eAAe,CAAC,UAAU,GAAG,UAAU,CAAC;QACxC,eAAe,CAAC,SAAS,GAAG,KAAK,CAAC;QAClC,IAAI,iBAAiB,EAAE;YACnB,eAAe,CAAC,iBAAiB,GAC7B,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;QAChD,CAAA;QACD,OAAO,eAAe,CAAC;KAC1B;IAED;;;;;KAKG,GACI,OAAO,mCAAmC,CAC7C,UAAkB,EAClB,UAAkB,EAClB,iBAA0B,EAAA;QAE1B,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;QAC9C,eAAe,CAAC,UAAU,GAAG,UAAU,CAAC;QACxC,eAAe,CAAC,UAAU,GAAG,UAAU,CAAC;QACxC,eAAe,CAAC,SAAS,GAAG,IAAI,CAAC;QACjC,IAAI,iBAAiB,EAAE;YACnB,eAAe,CAAC,iBAAiB,GAC7B,IAAI,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;QAChD,CAAA;QACD,OAAO,eAAe,CAAC;KAC1B;IAED;;;;;KAKG,GACI,MAAM,CACT,cAA8B,EAC9B,MAAc,EACd,WAAmB,EAAA;;QAGnB,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,EAAE;YACpC,IACI,IAAI,CAAC,GAAG,IACR,CAAC,IAAI,CAAC,SAAS,EAAE,IACjB,MAAM,KAAK,IAAI,CAAC,MAAM,IACtB,WAAW,KAAK,IAAI,CAAC,WAAW,EAClC;gBACE,OAAO,IAAI,CAAC,GAAG,CAAC;YACnB,CAAA;YAED,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;QAC9D,CAAA;QAED;;;SAGG,GACH,IAAI,IAAI,CAAC,GAAG,EAAE;YACV,OAAO,IAAI,CAAC,GAAG,CAAC;QACnB,CAAA;QAED,MAAM,qBAAqB,CAACC,gBAAqC,CAAC,CAAC;KACtE;IAED;;KAEG,GACK,SAAS,CACb,cAA8B,EAC9B,MAAc,EACd,WAAmB,EAAA;QAEnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,MAAM,QAAQ,GAAGC,UAAoB,EAAE,CAAC;QACxC,IAAI,CAAC,cAAc,GAAG,QAAQ,GAAG,GAAG,CAAC;QAErC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,GAC1B,YAAY,CAAC,OAAO,GACpB,YAAY,CAAC,OAAO,CAAC;QAC3B,MAAM,MAAM,GAAkB;YAC1B,GAAG,EAAE,SAAS;SACjB,CAAC;QAEF,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAS,GACjC,YAAY,CAAC,OAAO,GACpB,YAAY,CAAC,GAAG,CAAC;QACvB,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;YAClB,CAAC,gBAAgB,CAAA,EAAG,aAAa,CAAC,eAAe,CAC7C,IAAI,CAAC,UAAU,EACf,aAAa,CAAC,GAAG,CACpB;QACsB,CAAA,CAAC,CAAC;QAE7B,IAAI,IAAI,CAAC,iBAAiB,EAAE;YACxB,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;gBAClB,CAAC,YAAY,CAAC,GAAG,CAAA,EAAG,IAAI,CAAC,iBAAiB;YACnB,CAAA,CAAC,CAAC;QAChC,CAAA;QAED,MAAM,OAAO,GAAG;YACZ,CAAC,YAAY,CAAC,QAAQ,CAAA,EAAG,IAAI,CAAC,WAAW;YACzC,CAAC,YAAY,CAAC,eAAe,CAAA,EAAG,IAAI,CAAC,cAAc;YACnD,CAAC,YAAY,CAAC,MAAM,CAAA,EAAG,IAAI,CAAC,MAAM;YAClC,CAAC,YAAY,CAAC,OAAO,CAAA,EAAG,IAAI,CAAC,MAAM;YACnC,CAAC,YAAY,CAAC,UAAU,CAAA,EAAG,QAAQ;YACnC,CAAC,YAAY,CAAC,MAAM,CAAA,EAAG,cAAc,CAAC,aAAa,EAAE;SACxD,CAAC;QAEF,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;YAAE,MAAM;QAAA,CAAE,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC,GAAG,CAAC;KACnB;IAED;;KAEG,GACK,SAAS,GAAA;QACb,OAAO,IAAI,CAAC,cAAc,GAAGA,UAAoB,EAAE,CAAC;KACvD;IAED;;;KAGG,GACI,OAAO,gBAAgB,CAAC,iBAAyB,EAAA;QACpD;;;;;;SAMG,GACH,MAAM,gBAAgB,GAClB,uEAAuE,CAAC;QAC5E,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,IAAI,OAAO,CAAC;QACZ,MAAO,CAAC,OAAO,GAAG,gBAAgB,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI,CAAE;;YAElE,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAEjC,WAAS,CAAC,YAAY,CAAC,CAAC,CAAC;QACpE,CAAA;QAED,OAAO,KAAK,CAAC;KAChB;AACJ;AC1MD,gCAAA,GACO,MAAM,IAAI,GAAG,kBAAkB,CAAC;AAChC,MAAM,OAAO,GAAG;ACFvB;;;CAGG,GAwBH;;;;;CAKG,GACG,MAAO,sBAAuB,SAAQ,UAAU,CAAA;IAClD,WAAA,CAAY,aAAkC,CAAA;QAC1C,KAAK,CAAC,aAAa,CAAC,CAAC;KACxB;IAED;;;;KAIG,GACH,MAAM,YAAY,CACd,OAAsC,EAAA;QAEtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;QAErE,MAAM,YAAY,GAAGiC,UAAoB,EAAE,CAAC;QAC5C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAC3C,IAAI,CAAC,SAAS,EACd,OAAO,CACV,CAAC;QAEF,MAAM,eAAe,GAAG,IAAI,eAAe,CACvC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAChC,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAC7B,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAChC,CAAC;;QAGF,eAAe,CAAC,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrD,MAAM,aAAa,GAAG,eAAe,CAAC,yBAAyB,CAC3D,QAAQ,CAAC,IAAI,EACb,IAAI,CAAC,SAAS,EACd,YAAY,EACZ,OAAO,CACV,CAAC;QAEF,OAAO,aAAa,CAAC;KACxB;IAED;;;;KAIG,GACK,MAAM,mBAAmB,CAC7B,SAAoB,EACpB,OAAsC,EAAA;QAEtC,MAAM,qBAAqB,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,SAAS,CAAC,iBAAiB,CACxC,SAAS,CAAC,aAAa,EACvB,qBAAqB,CACxB,CAAC;QACF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QAC/D,MAAM,OAAO,GAA2B,IAAI,CAAC,yBAAyB,CAAC;YACnE,UAAU,EAAE,OAAO,CAAC,QAAQ;YAC5B,IAAI,EAAE,iBAAiB,CAAC,GAAG;QAC9B,CAAA,CAAC,CAAC;QACH,MAAM,UAAU,GAAsB;YAClC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ;YAC1C,SAAS,EAAE,SAAS,CAAC,kBAAkB;YACvC,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;YAClD,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;YACpD,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;YAC9C,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;SACzB,CAAC;QAEF,OAAO,IAAI,CAAC,0BAA0B,CAClC,QAAQ,EACR,WAAW,EACX,OAAO,EACP,UAAU,EACV,OAAO,CAAC,aAAa,CACxB,CAAC;KACL;IAED;;;KAGG,GACK,MAAM,sBAAsB,CAChC,OAAsC,EAAA;QAEtC,MAAM,UAAU,GAAG,IAAI,GAAG,EAAkB,CAAC;QAE7CC,WAAmC,CAC/B,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CACnC,CAAC;QACFC,WAAmC,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;QAClEC,WAAmC,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;QAElEC,SAAiC,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAE9DC,eAAuC,CACnC,UAAU,EACV,iBAAiB,CAAC,aAAa,CAClC,CAAC;QAEFC,YAAoC,CAChC,UAAU,EACV,SAAS,CAAC,6BAA6B,CAC1C,CAAC;QACFC,aAAqC,CAAC,UAAU,CAAC,CAAC;QAElDC,cAAsC,CAClC,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,WAAW,CAC1B,CAAC;QACFC,uBAA+C,CAC3C,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CACpC,CAAC;QACFC,aAAqC,CAAC,UAAU,CAAC,CAAC;QAElD,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC7BC,kBAA0C,CACtC,UAAU,EACV,IAAI,CAAC,sBAAsB,CAC9B,CAAC;QACL,CAAA;QAED,MAAM,aAAa,GACf,OAAO,CAAC,aAAa,IACrB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;QAChDC,gBAAwC,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAEpE,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,YAAY,EAAE;YAC5CC,eAAuC,CACnC,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,YAAY,CAC7C,CAAC;QACL,CAAA;QAED,MAAM,eAAe,GACjB,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,eAAe,CAAC;QAElD,IAAI,eAAe,EAAE;YACjBC,kBAA0C,CACtC,UAAU,EACV,MAAM,kBAAkB,CACpB,eAAe,CAAC,SAAS,EACzB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAChC,OAAO,CAAC,kBAAkB,CAC7B,CACJ,CAAC;YACFC,sBAA8C,CAC1C,UAAU,EACV,eAAe,CAAC,aAAa,CAChC,CAAC;QACL,CAAA;QAED,IACI,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,IACtC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,IACvC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAC5D;YACEC,SAAiC,CAC7B,UAAU,EACV,OAAO,CAAC,MAAM,EACd,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAC7C,CAAC;QACL,CAAA;QAED,IACI,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,oBAAoB,IAC9C,OAAO,CAAC,QAAQ,EAClB;YACEC,SAAiC,CAAC,UAAU,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnE,CAAA;QAED,OAAOC,gBAAyB,CAAC,UAAU,CAAC,CAAC;KAChD;AACJ;ACpND;;;CAGG,GAeH;;;;;;;CAOG,GACG,SAAU,qBAAqB,CACjC,MAAyB,EACzB,SAAoB,EACpB,OAAsC,EACtC,MAAc,EAAA;IAEd,MAAM,UAAU,GAAGC,qCAAuD,CACtE;QACI,GAAG,MAAM,CAAC,IAAI;QACd,SAAS,EAAE,SAAS;QACpB,WAAW,EAAE,OAAO,CAAC,WAAW,IAAI,EAAE;IACzC,CAAA,EACD,OAAO,EACP,MAAM,CACT,CAAC;IACFX,cAAsC,CAAC,UAAU,EAAE;QAC/C,GAAG,EAAEY,SAAa,CAAC,QAAQ;QAC3B,OAAO,EAAE,OAAO;QAChB,GAAG,EAAE,OAAO,CAAC,IAAI,IAAI,EAAE;QACvB,EAAE,EAAE,OAAO,CAAC,QAAQ,IAAI,EAAE;IAC7B,CAAA,CAAC,CAAC;IACH,IAAI,MAAM,CAAC,IAAI,CAAC,YAAY,KAAK,YAAY,CAAC,IAAI,EAAE;QAChDX,uBAA+C,CAC3C,UAAU,EACV,MAAM,CAAC,SAAS,CAAC,WAAW,CAC/B,CAAC;IACL,CAAA;IACDJ,eAAuC,CAAC,UAAU,EAAE,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC5E,IAAI,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,mBAAmB,EAAE;QACtDgB,sBAA8C,CAC1C,UAAU,EACV,OAAO,CAAC,aAAa,EACrB,OAAO,CAAC,mBAAmB,CAC9B,CAAC;IACL,CAAA;IAEDC,uBAA+C,CAC3C,UAAU,EACV,OAAO,CAAC,oBAAoB,IAAI,CAAA,CAAE,CACrC,CAAC;IAEF,OAAOC,eAAiC,CACpC,SAAS,EACT,UAAU,EACV,MAAM,CAAC,IAAI,CAAC,sBAAsB,EAClC,OAAO,CAAC,oBAAoB,CAC/B,CAAC;AACN;ACzEA;;;CAGG,GA0DH;;;CAGG,SACmB,iBAAiB,CAAA;IA4BnC;;KAEG,GACH,WAAA,CAAsB,aAA4B,CAAA;QAC9C,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,aAAa,CAAC,CAAC;QACnD,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;QAC3C,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CACpB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,EAChC,IAAI,EACJ,OAAO,CACV,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,IAAI,WAAW,CAC1B,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EACzB,IAAI,CAAC,cAAc,EACnB,2BAA2B,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAChD,CAAC;QACF,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,CAC5B,IAAI,CAAC,OAAO,EACZ,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,CAChC,CAAC;KACL;IAED;;;;;;;;KAQG,GACH,MAAM,cAAc,CAAC,OAAgC,EAAA;QACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QACjE,MAAM,YAAY,GAAkC;YAChD,GAAG,OAAO;YACV,GAAI,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YAC9C,YAAY,EAAE,OAAO,CAAC,YAAY,IAAI,YAAY,CAAC,KAAK;YACxD,oBAAoB,EAAE,oBAAoB,CAAC,MAAM;YACjD,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,EAAE;YAC1B,KAAK,EAAE,OAAO,CAAC,KAAK,IAAI,EAAE;SAC7B,CAAC;QAEF,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,eAAe,CAClD,YAAY,CAAC,SAAS,EACtB,YAAY,CAAC,aAAa,EAC1B,SAAS,EACT,OAAO,CAAC,iBAAiB,CAC5B,CAAC;QACF,OAAO,qBAAqB,CACxB,IAAI,CAAC,MAAM,EACX,mBAAmB,EACnB,YAAY,EACZ,IAAI,CAAC,MAAM,CACd,CAAC;KACL;IAED;;;;;;;KAOG,GACH,MAAM,kBAAkB,CACpB,OAAiC,EACjC,eAA0C,EAAA;QAE1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;QAC9C,IAAI,OAAO,CAAC,KAAK,IAAI,eAAe,EAAE;YAClC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;YAC1D,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,EAAE,eAAe,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;;YAE/D,eAAe,GAAG;gBAAE,GAAG,eAAe;gBAAE,KAAK,EAAE,EAAE;YAAA,CAAE,CAAC;QACvD,CAAA;QACD,MAAM,YAAY,GAAmC;YACjD,GAAG,OAAO;YACV,GAAI,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YAC9C,oBAAoB,EAAE,oBAAoB,CAAC,MAAM;SACpD,CAAC;QAEF,MAAM,sBAAsB,GAAG,IAAI,CAAC,gCAAgC,CAChE,KAAK,CAAC,kBAAkB,EACxB,YAAY,CAAC,aAAa,CAC7B,CAAC;QACF,IAAI;YACA,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,eAAe,CAClD,YAAY,CAAC,SAAS,EACtB,YAAY,CAAC,aAAa,EAC1B,SAAS,EACT,OAAO,CAAC,iBAAiB,CAC5B,CAAC;YACF,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,6BAA6B,CAC7D,mBAAmB,EACnB,YAAY,CAAC,aAAa,EAC1B,YAAY,CAAC,WAAW,EACxB,sBAAsB,CACzB,CAAC;YACF,MAAM,uBAAuB,GAAG,IAAI,uBAAuB,CACvD,gBAAgB,CACnB,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,0BAA0B,EAC1B,YAAY,CAAC,aAAa,CAC7B,CAAC;YACF,OAAO,MAAM,uBAAuB,CAAC,YAAY,CAC7C,YAAY,EACZ,eAAe,CAClB,CAAC;QACL,CAAA,CAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,SAAS,EAAE;gBACxB,CAAC,CAAC,gBAAgB,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YAClD,CAAA;YACD,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,CAAC;QACX,CAAA;KACJ;IAED;;;;;;KAMG,GACH,MAAM,0BAA0B,CAC5B,OAA4B,EAAA;QAE5B,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,mCAAmC,EACnC,OAAO,CAAC,aAAa,CACxB,CAAC;QACF,MAAM,YAAY,GAA8B;YAC5C,GAAG,OAAO;YACV,GAAI,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YAC9C,oBAAoB,EAAE,oBAAoB,CAAC,MAAM;SACpD,CAAC;QAEF,MAAM,sBAAsB,GAAG,IAAI,CAAC,gCAAgC,CAChE,KAAK,CAAC,0BAA0B,EAChC,YAAY,CAAC,aAAa,CAC7B,CAAC;QACF,IAAI;YACA,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,eAAe,CAClD,YAAY,CAAC,SAAS,EACtB,YAAY,CAAC,aAAa,EAC1B,SAAS,EACT,OAAO,CAAC,iBAAiB,CAC5B,CAAC;YACF,MAAM,wBAAwB,GAC1B,MAAM,IAAI,CAAC,6BAA6B,CACpC,mBAAmB,EACnB,YAAY,CAAC,aAAa,EAC1B,YAAY,CAAC,WAAW,IAAI,EAAE,EAC9B,sBAAsB,CACzB,CAAC;YACN,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,CAC7C,wBAAwB,CAC3B,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,8BAA8B,EAC9B,YAAY,CAAC,aAAa,CAC7B,CAAC;YACF,OAAO,MAAM,kBAAkB,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAC9D,CAAA,CAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,SAAS,EAAE;gBACxB,CAAC,CAAC,gBAAgB,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YAClD,CAAA;YACD,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,CAAC;QACX,CAAA;KACJ;IAED;;;;;;;KAOG,GACH,MAAM,kBAAkB,CACpB,OAA0B,EAAA;QAE1B,MAAM,YAAY,GAA4B;YAC1C,GAAG,OAAO;YACV,GAAI,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;YAC9C,YAAY,EAAE,OAAO,CAAC,YAAY,IAAI,KAAK;SAC9C,CAAC;QAEF,MAAM,sBAAsB,GAAG,IAAI,CAAC,gCAAgC,CAChE,KAAK,CAAC,kBAAkB,EACxB,YAAY,CAAC,aAAa,EAC1B,YAAY,CAAC,YAAY,CAC5B,CAAC;QAEF,IAAI;YACA,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,eAAe,CAClD,YAAY,CAAC,SAAS,EACtB,YAAY,CAAC,aAAa,EAC1B,SAAS,EACT,OAAO,CAAC,iBAAiB,CAC5B,CAAC;YACF,MAAM,mBAAmB,GACrB,MAAM,IAAI,CAAC,6BAA6B,CACpC,mBAAmB,EACnB,YAAY,CAAC,aAAa,EAC1B,YAAY,CAAC,WAAW,IAAI,EAAE,EAC9B,sBAAsB,CACzB,CAAC;YACN,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;YACnE,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,4BAA4B,EAC5B,YAAY,CAAC,aAAa,CAC7B,CAAC;YACF,IAAI;;gBAEA,MAAM,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,CAAC;gBACvC,OAAO,MAAM,IAAI,CAAC,wBAAwB,CACtC,YAAY,EACZ,gBAAgB,EAChB,mBAAmB,CACtB,CAAC;YACL,CAAA,CAAC,OAAO,KAAK,EAAE;gBACZ,IACI,KAAK,YAAY,eAAe,IAChC,KAAK,CAAC,SAAS,KACXC,oBAAyC,EAC/C;oBACE,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,CAC7C,mBAAmB,CACtB,CAAC;oBACF,OAAO,kBAAkB,CAAC,0BAA0B,CAChD,YAAY,CACf,CAAC;gBACL,CAAA;gBACD,MAAM,KAAK,CAAC;YACf,CAAA;QACJ,CAAA,CAAC,OAAO,KAAK,EAAE;YACZ,IAAI,KAAK,YAAY,SAAS,EAAE;gBAC5B,KAAK,CAAC,gBAAgB,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YACtD,CAAA;YACD,sBAAsB,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YACjD,MAAM,KAAK,CAAC;QACf,CAAA;KACJ;IAEO,MAAM,wBAAwB,CAClC,YAAqC,EACrC,gBAAkC,EAClC,mBAAwC,EAAA;QAExC,MAAM,CAAC,YAAY,EAAE,YAAY,CAAC,GAC9B,MAAM,gBAAgB,CAAC,kBAAkB,CAAC;YACtC,GAAG,YAAY;YACf,MAAM,EAAE,YAAY,CAAC,MAAM,EAAE,MAAM,GAC7B,YAAY,CAAC,MAAM,GACnB,CAAC;mBAAG,mBAAmB;aAAC;QACjC,CAAA,CAAC,CAAC;QAEP,IAAI,YAAY,KAAK,YAAY,CAAC,qBAAqB,EAAE;YACrD,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,oJAAoJ,CACvJ,CAAC;;YAEF,MAAM,kBAAkB,GAAG,IAAI,kBAAkB,CAC7C,mBAAmB,CACtB,CAAC;YAEF,IAAI;gBACA,MAAM,kBAAkB,CAAC,0BAA0B,CAC/C,YAAY,CACf,CAAC;YACL,CAAA,CAAC,OAAM;;YAEP,CAAA;QACJ,CAAA;;QAGD,OAAO,YAAY,CAAC;KACvB;IAED;;;;;;;;;;KAUG,GACH,MAAM,8BAA8B,CAChC,OAAgC,EAAA;QAEhC,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,uCAAuC,EACvC,OAAO,CAAC,aAAa,CACxB,CAAC;QACF,MAAM,YAAY,GAAkC;YAChD,GAAG,OAAO;YACV,GAAI,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;SACjD,CAAC;QACF,MAAM,sBAAsB,GAAG,IAAI,CAAC,gCAAgC,CAChE,KAAK,CAAC,8BAA8B,EACpC,YAAY,CAAC,aAAa,CAC7B,CAAC;QACF,IAAI;YACA,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,eAAe,CAClD,YAAY,CAAC,SAAS,EACtB,YAAY,CAAC,aAAa,EAC1B,SAAS,EACT,OAAO,CAAC,iBAAiB,CAC5B,CAAC;YACF,MAAM,4BAA4B,GAC9B,MAAM,IAAI,CAAC,6BAA6B,CACpC,mBAAmB,EACnB,YAAY,CAAC,aAAa,EAC1B,EAAE,EACF,sBAAsB,CACzB,CAAC;YACN,MAAM,sBAAsB,GAAG,IAAI,sBAAsB,CACrD,4BAA4B,CAC/B,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,kCAAkC,EAClC,YAAY,CAAC,aAAa,CAC7B,CAAC;YACF,OAAO,MAAM,sBAAsB,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAClE,CAAA,CAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,SAAS,EAAE;gBACxB,CAAC,CAAC,gBAAgB,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YAClD,CAAA;YACD,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,CAAC;QACX,CAAA;KACJ;IAED;;KAEG,GACH,aAAa,GAAA;QACT,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC,UAAU,CAAC;KAC1B;IAED;;;;;;;;KAQG,GACO,aAAa,CAAC,KAAa,EAAE,WAAmB,EAAA;QACtD,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,aAAa,CAAC,wBAAwB,EAAE,CAAC;QAClD,CAAA;QAED,IAAI,KAAK,KAAK,WAAW,EAAE;YACvB,MAAM,qBAAqB,CAACC,aAAkC,CAAC,CAAC;QACnE,CAAA;KACJ;IAED;;KAEG,GACH,SAAS,GAAA;QACL,OAAO,IAAI,CAAC,MAAM,CAAC;KACtB;IAED;;;KAGG,GACH,SAAS,CAAC,MAAc,EAAA;QACpB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAED;;;;KAIG,GACO,MAAM,6BAA6B,CACzC,mBAA8B,EAC9B,oBAA4B,EAC5B,WAAmB,EACnB,sBAA+C,EAAA;QAE/C,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,sCAAsC,EACtC,oBAAoB,CACvB,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,CAAA,kEAAA,EAAqE,mBAAmB,CAAC,aAAa,CAAA,CAAA,CAAG,EACzG,oBAAoB,CACvB,CAAC;QAEF,sBAAsB,EAAE,6BAA6B,CACjD,mBAAmB,CAAC,uBAAuB,CAC9C,CAAC;QAEF,MAAM,mBAAmB,GAAwB;YAC7C,WAAW,EAAE;gBACT,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ;gBACnC,SAAS,EAAE,mBAAmB;gBAC9B,kBAAkB,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB;gBACvD,WAAW;YACd,CAAA;YACD,aAAa,EAAE;gBACX,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ;gBACnD,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc;gBAC/D,iBAAiB,EACb,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC,iBAAiB;gBACtD,aAAa,EAAE,oBAAoB;YACtC,CAAA;YACD,YAAY,EAAE;gBACV,yBAAyB,EACrB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yBAAyB;YAClD,CAAA;YACD,eAAe,EAAE,IAAI,CAAC,cAAc;YACpC,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa;YAClD,gBAAgB,EAAE,IAAI,CAAC,OAAO;YAC9B,sBAAsB,EAAE,sBAAsB;YAC9C,iBAAiB,EAAE;gBACf,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,eAAe,EAAE,MAAM,IAAI,CAAC,kBAAkB,CAC1C,mBAAmB,CACtB;YACJ,CAAA;YACD,WAAW,EAAE;gBACT,GAAG,EAAEL,SAAa,CAAC,QAAQ;gBAC3B,OAAO,EAAE,OAAO;gBAChB,GAAG,EAAE,OAAO,CAAC,IAAI,IAAIrD,WAAS,CAAC,YAAY;gBAC3C,EAAE,EAAE,OAAO,CAAC,QAAQ,IAAIA,WAAS,CAAC,YAAY;YACjD,CAAA;YACD,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS;YAChC,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW;YAChD,iBAAiB,EAAE,IAAI,CAAC,UAAU;SACrC,CAAC;QAEF,OAAO,mBAAmB,CAAC;KAC9B;IAEO,MAAM,kBAAkB,CAC5B,SAAoB,EAAA;QAEpB,IAAI,IAAI,CAAC,gCAAgC,EAAE;YACvC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC,aAAa,CAChD,MAAM,kBAAkB,CACpB,IAAI,CAAC,gCAAgC,EACrC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EACzB,SAAS,CAAC,aAAa,CAC1B,CACJ,CAAC;QACL,CAAA;QAED,OACI,IAAI,CAAC,eAAe,IAAI;YACpB,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,MAAM,CAClC,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EACzB,SAAS,CAAC,aAAa,CAC1B;YACD,aAAa,EAAEqD,SAAa,CAAC,yBAAyB;QACzD,CAAA,EACH;KACL;IAED;;;KAGG,GACO,MAAM,qBAAqB,CACjC,WAAqC,EAAA;QAErC,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,gCAAgC,EAChC,WAAW,CAAC,aAAa,CAC5B,CAAC;;QAEF,IACI,WAAW,CAAC,oBAAoB,IAChC,WAAW,CAAC,oBAAoB,KAAK,oBAAoB,CAAC,GAAG,EAC/D;YACE,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,yGAAyG,EACzG,WAAW,CAAC,aAAa,CAC5B,CAAC;QACL,CAAA;QAED,WAAW,CAAC,oBAAoB,GAAG,oBAAoB,CAAC,MAAM,CAAC;;QAG/D,IACI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yBAAyB,IAC3C,WAAW,CAAC,MAAM;QAElB,CAAC,WAAW,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,EAC7C;YACE,WAAW,CAAC,mBAAmB,GAC3B,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAChE,CAAA;QAED,OAAO;YACH,GAAG,WAAW;YACd,MAAM,EAAE;mBACA,AAAC,WAAW,IAAI,WAAW,CAAC,MAAM,IAAK,EAAE,CAAC;mBAC3C,mBAAmB;aACzB;YACD,aAAa,EACT,AAAC,WAAW,IAAI,WAAW,CAAC,aAAa,IACzC,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE;YACvC,SAAS,EAAE,WAAW,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS;SACjE,CAAC;KACL;IAED;;;;;KAKG,GACO,gCAAgC,CACtC,KAAa,EACb,aAAqB,EACrB,YAAsB,EAAA;QAEtB,MAAM,gBAAgB,GAA2B;YAC7C,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ;YACnC,aAAa,EAAE,aAAa;YAC5B,KAAK,EAAE,KAAK;YACZ,YAAY,EAAE,YAAY,IAAI,KAAK;SACtC,CAAC;QAEF,OAAO,IAAI,sBAAsB,CAAC,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;KACrE;IAED;;;;KAIG,GACO,MAAM,eAAe,CAC3B,eAAuB,EACvB,oBAA4B,EAC5B,wBAAmD,EACnD,iBAAqC,EAAA;QAErC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,wBAAwB,EAAE,oBAAoB,CAAC,CAAC;;QAGpE,MAAM,YAAY,GAAG,SAAS,CAAC,iBAAiB,CAC5C,eAAe,EACf,iBAAiB,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAC1D,CAAC;QAEF,MAAM,gBAAgB,GAAqB;YACvC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY;YAC3C,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB;YACnD,sBAAsB,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB;YAC/D,iBAAiB,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB;YACrD,wBAAwB;YACxB,0BAA0B,EACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,0BAA0B;SAClD,CAAC;QAEF,OAAOM,wBAAyC,CAC5C,YAAY,EACZ,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,EAChC,IAAI,CAAC,OAAO,EACZ,gBAAgB,EAChB,IAAI,CAAC,MAAM,EACX,oBAAoB,CACvB,CAAC;KACL;IAED;;KAEG,GACH,UAAU,GAAA;QACN,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;KACxB;AACJ;AC1qBD;;;CAGG,SAaU,cAAc,CAAA;IAGvB;;;;;KAKG,GACH,MAAM,iBAAiB,CACnB,eAAwB,EACxB,aAAsB,EAAA;QAEtB,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,MAAM,aAAa,CAAC,sCAAsC,EAAE,CAAC;QAChE,CAAA;QAED,OAAO,IAAI,OAAO,CAAoB,CAAC,OAAO,EAAE,MAAM,KAAI;YACtD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,CAC3B,CAAC,GAAyB,EAAE,GAAwB,KAAI;gBACpD,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;gBACpB,IAAI,CAAC,GAAG,EAAE;oBACN,GAAG,CAAC,GAAG,CACH,aAAa,IACT,oCAAoC,CAC3C,CAAC;oBACF,MAAM,CACF,aAAa,CAAC,kCAAkC,EAAE,CACrD,CAAC;oBACF,OAAO;gBACV,CAAA,MAAM,IAAI,GAAG,KAAKC,WAAe,CAAC,aAAa,EAAE;oBAC9C,GAAG,CAAC,GAAG,CACH,eAAe,IACX,qEAAqE,CAC5E,CAAC;oBACF,OAAO;gBACV,CAAA;gBAED,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;gBAC1C,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;gBAC5C,MAAM,gBAAgB,GAClBC,uBAAgC,CAAC,SAAS,CAAC,MAAM,CAAC,IAClD,CAAA,CAAE,CAAC;gBACP,IAAI,gBAAgB,CAAC,IAAI,EAAE;oBACvB,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,EAAE;wBAC/B,QAAQ,EAAE,WAAW;qBACxB,CAAC,CAAC,CAAA,4DAAA;oBACH,GAAG,CAAC,GAAG,EAAE,CAAC;gBACb,CAAA;gBACD,IAAI,gBAAgB,CAAC,KAAK,EAAE;oBACxB,GAAG,CAAC,GAAG,CACH,aAAa,IACT,CAAA,gBAAA,EAAmB,gBAAgB,CAAC,KAAK,CAAA,CAAE,CAClD,CAAC;gBACL,CAAA;gBACD,OAAO,CAAC,gBAAgB,CAAC,CAAC;YAC9B,CAAC,CACJ,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAA,+BAAA;QACvC,CAAC,CAAC,CAAC;KACN;IAED;;;KAGG,GACH,cAAc,GAAA;QACV,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;YACxC,MAAM,aAAa,CAAC,iCAAiC,EAAE,CAAC;QAC3D,CAAA;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACtC,IAAI,CAAC,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;YAC1D,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,MAAM,aAAa,CAAC,qCAAqC,EAAE,CAAC;QAC/D,CAAA;QAED,MAAM,IAAI,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC;QAErC,OAAO,CAAA,EAAG,SAAS,CAAC,aAAa,CAAA,EAAG,SAAS,CAAC,SAAS,CAAA,CAAA,EAAI,IAAI,CAAA,CAAE,CAAC;KACrE;IAED;;KAEG,GACH,WAAW,GAAA;QACP,IAAI,IAAI,CAAC,MAAM,EAAE;;YAEb,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YAEpB,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,mBAAmB,KAAK,UAAU,EAAE;gBACvD;;iBAEG,GACH,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAC;YACrC,CAAA;YACD,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACpB,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;QAC3B,CAAA;KACJ;AACJ;ACpHD;;;CAGG,GAyBH;;;CAGG,GACG,MAAO,gBAAiB,SAAQ,UAAU,CAAA;IAC5C,WAAA,CAAY,aAAkC,CAAA;QAC1C,KAAK,CAAC,aAAa,CAAC,CAAC;KACxB;IAED;;;;KAIG,GACI,MAAM,YAAY,CACrB,OAAgC,EAAA;QAEhC,MAAM,kBAAkB,GAAuB,MAAM,IAAI,CAAC,aAAa,CACnE,OAAO,CACV,CAAC;QACF,OAAO,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;QAC/C,MAAM,YAAY,GAAG5B,UAAoB,EAAE,CAAC;QAC5C,MAAM,QAAQ,GACV,MAAM,IAAI,CAAC,0BAA0B,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC;QAEvE,MAAM,eAAe,GAAG,IAAI,eAAe,CACvC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAChC,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAC7B,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAChC,CAAC;;QAGF,eAAe,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;QAChD,OAAO,eAAe,CAAC,yBAAyB,CAC5C,QAAQ,EACR,IAAI,CAAC,SAAS,EACd,YAAY,EACZ,OAAO,CACV,CAAC;KACL;IAED;;;KAGG,GACK,MAAM,aAAa,CACvB,OAAgC,EAAA;QAEhC,MAAM,qBAAqB,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,SAAS,CAAC,iBAAiB,CACxC,IAAI,CAAC,SAAS,CAAC,kBAAkB,EACjC,qBAAqB,CACxB,CAAC;QACF,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACpD,MAAM,OAAO,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACjD,MAAM,UAAU,GAAsB;YAClC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ;YAC1C,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;YAClD,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;YACpD,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;YAC9C,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;SACzB,CAAC;QAEF,OAAO,IAAI,CAAC,sCAAsC,CAC9C,QAAQ,EACR,WAAW,EACX,OAAO,EACP,UAAU,EACV,OAAO,CAAC,aAAa,CACxB,CAAC;KACL;IAED;;;KAGG,GACI,0BAA0B,CAC7B,OAAgC,EAAA;QAEhC,MAAM,UAAU,GAAG,IAAI,GAAG,EAAkB,CAAC;QAE7C,IAAI,OAAO,CAAC,oBAAoB,EAAE;YAC9BsB,uBAA+C,CAC3C,UAAU,EACV,OAAO,CAAC,oBAAoB,CAC/B,CAAC;QACL,CAAA;QAED,OAAOJ,gBAAyB,CAAC,UAAU,CAAC,CAAC;KAChD;IAED;;;;;;;KAOG,GACK,MAAM,sCAAsC,CAChD,kBAA0B,EAC1B,WAAmB,EACnB,OAA+B,EAC/B,UAA6B,EAC7B,aAAqB,EAAA;QAErB,MAAM,EACF,IAAI,EAAE,EACF,SAAS,EAAE,QAAQ,EACnB,WAAW,EAAE,UAAU,EACvB,gBAAgB,EAAE,eAAe,EACjC,UAAU,EAAE,SAAS,EACrB,QAAQ,EACR,OAAO,EACV,EACJ,GAAG,MAAM,IAAI,CAAC,eAAe,CAC1B,UAAU,EACV,kBAAkB,EAClB;YACI,IAAI,EAAE,WAAW;YACjB,OAAO,EAAE,OAAO;SACnB,EACD,aAAa,CAChB,CAAC;QAEF,OAAO;YACH,QAAQ;YACR,UAAU;YACV,eAAe;YACf,SAAS;YACT,QAAQ;YACR,OAAO;SACV,CAAC;KACL;IAED;;;KAGG,GACK,iBAAiB,CAAC,OAAgC,EAAA;QACtD,MAAM,UAAU,GAAG,IAAI,GAAG,EAAkB,CAAC;QAE7Cd,SAAiC,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAC9DH,WAAmC,CAC/B,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CACnC,CAAC;QAEF,IAAI,OAAO,CAAC,oBAAoB,EAAE;YAC9BqB,uBAA+C,CAC3C,UAAU,EACV,OAAO,CAAC,oBAAoB,CAC/B,CAAC;QACL,CAAA;QAED,IACI,OAAO,CAAC,MAAM,IACb,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,IACvC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAC5D;YACEN,SAAiC,CAC7B,UAAU,EACV,OAAO,CAAC,MAAM,EACd,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAC7C,CAAC;QACL,CAAA;QAED,OAAOE,gBAAyB,CAAC,UAAU,CAAC,CAAC;KAChD;IAED;;;;;KAKG,GACK,eAAe,CACnB,wBAAgC,EAChC,oBAA6B,EAC7B,uBAAiC,EAAA;QAEjC,IAAI,uBAAuB,EAAE;YACzB,IAAI,CAAC,MAAM,CAAC,KAAK,CACb,oEAAoE,CACvE,CAAC;YACF,MAAM,qBAAqB,CACvBW,0BAA+C,CAClD,CAAC;QACL,CAAA,MAAM,IACH,oBAAoB,IACpB,oBAAoB,GAAG,wBAAwB,IAC/C7B,UAAoB,EAAE,GAAG,oBAAoB,EAC/C;YACE,IAAI,CAAC,MAAM,CAAC,KAAK,CACb,CAAiF,8EAAA,EAAA,oBAAoB,CAAE,CAAA,CAC1G,CAAC;YACF,MAAM,qBAAqB,CACvB8B,kBAAuC,CAC1C,CAAC;QACL,CAAA,MAAM,IAAI9B,UAAoB,EAAE,GAAG,wBAAwB,EAAE;YAC1D,IAAI,oBAAoB,EAAE;gBACtB,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,CAAoI,iIAAA,EAAA,oBAAoB,CAAE,CAAA,CAC7J,CAAC;YACL,CAAA;YACD,IAAI,CAAC,MAAM,CAAC,KAAK,CACb,CAA2D,wDAAA,EAAA,wBAAwB,CAAE,CAAA,CACxF,CAAC;YACF,MAAM,qBAAqB,CAAC+B,iBAAsC,CAAC,CAAC;QACvE,CAAA;QACD,OAAO,IAAI,CAAC;KACf;IAED;;;;KAIG,GACK,MAAM,0BAA0B,CACpC,OAAgC,EAChC,kBAAsC,EAAA;QAEtC,MAAM,qBAAqB,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,SAAS,CAAC,iBAAiB,CACxC,IAAI,CAAC,SAAS,CAAC,aAAa,EAC5B,qBAAqB,CACxB,CAAC;QACF,MAAM,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAC3C,OAAO,EACP,kBAAkB,CACrB,CAAC;QACF,MAAM,OAAO,GACT,IAAI,CAAC,yBAAyB,EAAE,CAAC;QAErC,MAAM,oBAAoB,GAAG,OAAO,CAAC,OAAO,GACtC/B,UAAoB,EAAE,GAAG,OAAO,CAAC,OAAO,GACxC,SAAS,CAAC;QAChB,MAAM,wBAAwB,GAC1BA,UAAoB,EAAE,GAAG,kBAAkB,CAAC,SAAS,CAAC;QAC1D,MAAM,oBAAoB,GAAG,kBAAkB,CAAC,QAAQ,GAAG,IAAI,CAAC;QAEhE;;;SAGG,GACH,MACI,IAAI,CAAC,eAAe,CAChB,wBAAwB,EACxB,oBAAoB,EACpB,OAAO,CAAC,MAAM,CACjB,CACH;YACE,MAAM,UAAU,GAAsB;gBAClC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ;gBAC1C,SAAS,EAAE,OAAO,CAAC,SAAS;gBAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;gBAClD,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;gBACpD,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;gBAC9C,SAAS,EAAE,OAAO,CAAC,SAAS;gBAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;aACzB,CAAC;YACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAClD,QAAQ,EACR,WAAW,EACX,OAAO,EACP,UAAU,EACV,OAAO,CAAC,aAAa,CACxB,CAAC;YAEF,IAAI,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE;;gBAEtC,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,KAAKjC,WAAS,CAAC,qBAAqB,EAAE;oBACzD,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,0CAA0C,CAC7C,CAAC;oBACF,MAAMiE,KAAe,CAAC,oBAAoB,CAAC,CAAC;gBAC/C,CAAA,MAAM;;oBAEH,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,6CAA6C,CAChD,CAAC;oBACF,MAAM,eAAe,CACjBC,iBAAgC,EAChC,QAAQ,CAAC,IAAI,CAAC,KAAK,CACtB,CAAC;gBACL,CAAA;YACJ,CAAA,MAAM;gBACH,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,wDAAwD,CAC3D,CAAC;gBACF,OAAO,QAAQ,CAAC,IAAI,CAAC;YACxB,CAAA;QACJ,CAAA;QAED;;;SAGG,GACH,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;QAC1D,MAAM,qBAAqB,CACvBC,sBAA2C,CAC9C,CAAC;KACL;IAED;;;;KAIG,GACK,sBAAsB,CAC1B,OAAgC,EAChC,kBAAsC,EAAA;QAEtC,MAAM,UAAU,GAAG,IAAI,GAAG,EAAkB,CAAC;QAE7C9B,SAAiC,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAC9DH,WAAmC,CAC/B,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CACnC,CAAC;QACFK,YAAoC,CAChC,UAAU,EACV,SAAS,CAAC,iBAAiB,CAC9B,CAAC;QACF6B,aAAqC,CACjC,UAAU,EACV,kBAAkB,CAAC,UAAU,CAChC,CAAC;QACF,MAAM,aAAa,GACf,OAAO,CAAC,aAAa,IACrB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;QAChDvB,gBAAwC,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QACpEL,aAAqC,CAAC,UAAU,CAAC,CAAC;QAClDC,cAAsC,CAClC,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,WAAW,CAC1B,CAAC;QACFC,uBAA+C,CAC3C,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CACpC,CAAC;QACFC,aAAqC,CAAC,UAAU,CAAC,CAAC;QAClD,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC7BC,kBAA0C,CACtC,UAAU,EACV,IAAI,CAAC,sBAAsB,CAC9B,CAAC;QACL,CAAA;QAED,IACI,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,IACtC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,IACvC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAC5D;YACEK,SAAiC,CAC7B,UAAU,EACV,OAAO,CAAC,MAAM,EACd,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAC7C,CAAC;QACL,CAAA;QACD,OAAOE,gBAAyB,CAAC,UAAU,CAAC,CAAC;KAChD;AACJ;AC/YD;;;CAGG,GAuCH;;;;CAIG,GACG,MAAO,uBACT,SAAQ,iBAAiB,CAAA;IAKzB;;;;;;;;;;;;;;;;KAgBG,GACH,WAAA,CAAY,aAA4B,CAAA;QACpC,KAAK,CAAC,aAAa,CAAC,CAAC;QACrB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,kBAAkB,EAAE;YACvC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC,iBAAiB,EAAE;gBACzD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,kBAAkB,CAAC;gBAChE,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAC7B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CACnC,CAAC;YACL,CAAA,MAAM;gBACH,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,yEAAyE,CAC5E,CAAC;YACL,CAAA;QACJ,CAAA;QACD,IAAI,CAAC,IAAI,GAAG,sBAAsB,CAAC,kBAAkB,CAAC;YAClD,WAAW,EAAE,SAAS,CAAC,QAAQ;YAC/B,cAAc,EAAE,OAAO;QAC1B,CAAA,CAAC,CAAC;KACN;IAED;;;;;;;;KAQG,GACI,MAAM,wBAAwB,CACjC,OAA0B,EAAA;QAE1B,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,iCAAiC,EACjC,OAAO,CAAC,aAAa,CACxB,CAAC;QACF,MAAM,YAAY,GAA4B,MAAM,CAAC,MAAM,CACvD,OAAO,EACP,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAC5C,CAAC;QACF,MAAM,sBAAsB,GAAG,IAAI,CAAC,gCAAgC,CAChE,KAAK,CAAC,wBAAwB,EAC9B,YAAY,CAAC,aAAa,CAC7B,CAAC;QACF,IAAI;YACA,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,eAAe,CAClD,YAAY,CAAC,SAAS,EACtB,YAAY,CAAC,aAAa,EAC1B,SAAS,EACT,OAAO,CAAC,iBAAiB,CAC5B,CAAC;YACF,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,6BAA6B,CAC7D,mBAAmB,EACnB,YAAY,CAAC,aAAa,EAC1B,EAAE,EACF,sBAAsB,CACzB,CAAC;YACF,MAAM,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;YAChE,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,4BAA4B,EAC5B,YAAY,CAAC,aAAa,CAC7B,CAAC;YACF,OAAO,MAAM,gBAAgB,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAC5D,CAAA,CAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,SAAS,EAAE;gBACxB,CAAC,CAAC,gBAAgB,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YAClD,CAAA;YACD,sBAAsB,CAAC,kBAAkB,CAAC,CAAc,CAAC,CAAC;YAC1D,MAAM,CAAC,CAAC;QACX,CAAA;KACJ;IAED;;KAEG,GACH,MAAM,uBAAuB,CACzB,OAA2B,EAAA;QAE3B,MAAM,aAAa,GACf,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;QACjE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,aAAa,CAAC,CAAC;QACnE,MAAM,EACF,WAAW,EACX,eAAe,EACf,aAAa,EACb,YAAY,EACZ,cAAc,EAAE,oBAAoB,EACpC,GAAG,mBAAmB,EACzB,GAAG,OAAO,CAAC;QAEZ,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,MAAM,aAAa,GAAkB;gBACjC,GAAG,mBAAmB;gBACtB,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ;gBACnC,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,mBAAmB;gBAC7C,WAAW,EAAE,OAAO,CAAC,WAAW,IAAI,EAAE;gBACtC,SAAS,EAAE,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS;gBAC1D,aAAa,EAAE,aAAa;gBAC5B,eAAe,EAAE;oBACb,GAAG,mBAAmB,CAAC,oBAAoB;oBAC3C,GAAG,mBAAmB,CAAC,oBAAoB;oBAC3C,CAACkB,kBAAqC,CAAA,EAAG,IAAI,CAAC,IAAI;gBACrD,CAAA;gBACD,SAAS,EAAE,mBAAmB,CAAC,OAAO,EAAE,eAAe;aAC1D,CAAC;YACF,OAAO,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAClD,aAAa,EACb,YAAY,CACf,CAAC;QACL,CAAA;QAED,IAAI,OAAO,CAAC,WAAW,EAAE;;YAErB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,kBAAkB,EAAE;gBACxC,MAAM,aAAa,CAAC,kCAAkC,EAAE,CAAC;YAC5D,CAAA;;YAED,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC;QAC5B,CAAA;QAED,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GACzB,MAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC;QAElD,MAAM,cAAc,GAChB,oBAAoB,IAAI,IAAI,cAAc,EAAE,CAAC;QAEjD,IAAI,gBAAgB,GAAsB,CAAA,CAAE,CAAC;QAC7C,IAAI,qBAAqB,GAAqB,IAAI,CAAC;QACnD,IAAI;YACA,MAAM,gBAAgB,GAAG,cAAc,CAClC,iBAAiB,CAAC,eAAe,EAAE,aAAa,CAAC,CACjD,IAAI,CAAC,CAAC,QAAQ,KAAI;gBACf,gBAAgB,GAAG,QAAQ,CAAC;YAChC,CAAC,CAAC,CACD,KAAK,CAAC,CAAC,CAAC,KAAI;;gBAET,qBAAqB,GAAG,CAAC,CAAC;YAC9B,CAAC,CAAC,CAAC;;YAGP,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;YAElE,MAAM,YAAY,GAA4B;gBAC1C,GAAG,mBAAmB;gBACtB,aAAa,EAAE,aAAa;gBAC5B,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,mBAAmB;gBAC7C,WAAW,EAAE,WAAW;gBACxB,YAAY,EAAE,YAAY,CAAC,KAAK;gBAChC,aAAa,EAAE,SAAS;gBACxB,mBAAmB,EAAE,yBAAyB,CAAC,IAAI;aACtD,CAAC;YAEF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;YAC5D,MAAM,WAAW,CAAC,WAAW,CAAC,CAAC;YAC/B,MAAM,gBAAgB,CAAC;YACvB,IAAI,qBAAqB,EAAE;gBACvB,MAAM,qBAAqB,CAAC;YAC/B,CAAA;YAED,IAAI,gBAAgB,CAAC,KAAK,EAAE;gBACxB,MAAM,IAAI,WAAW,CACjB,gBAAgB,CAAC,KAAK,EACtB,gBAAgB,CAAC,iBAAiB,EAClC,gBAAgB,CAAC,QAAQ,CAC5B,CAAC;YACL,CAAA,MAAM,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE;gBAC/B,MAAM,aAAa,CAAC,+BAA+B,EAAE,CAAC;YACzD,CAAA;YAED,MAAM,UAAU,GAAG,gBAAgB,CAAC,WAAW,CAAC;YAChD,MAAM,YAAY,GAA6B;gBAC3C,IAAI,EAAE,gBAAgB,CAAC,IAAI;gBAC3B,YAAY,EAAE,QAAQ;gBACtB,UAAU,EAAE,UAAU,IAAIT,WAAe,CAAC,YAAY;gBACtD,GAAG,YAAY;aAClB,CAAC;YACF,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC,CAAA,qDAAA;QACtD,CAAA,QAAS;YACN,cAAc,CAAC,WAAW,EAAE,CAAC;QAChC,CAAA;KACJ;IAED;;;;KAIG,GACH,MAAM,kBAAkB,CACpB,OAA0B,EAAA;QAE1B,MAAM,aAAa,GACf,OAAO,CAAC,aAAa,IAAI,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;QACjE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,EAAE,aAAa,CAAC,CAAC;QAE9D,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,MAAM,aAAa,GAAkB;gBACjC,GAAG,OAAO;gBACV,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ;gBACnC,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,mBAAmB;gBAC7C,WAAW,EAAE,OAAO,CAAC,WAAW,IAAI,EAAE;gBACtC,SAAS,EAAE,OAAO,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS;gBAC1D,aAAa,EAAE,aAAa;gBAC5B,eAAe,EAAE;oBACb,GAAG,OAAO,CAAC,oBAAoB;oBAC/B,CAACS,kBAAqC,CAAA,EAAG,IAAI,CAAC,IAAI;gBACrD,CAAA;gBACD,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,eAAe;gBAC1C,YAAY,EAAE,OAAO,CAAC,YAAY,IAAI,KAAK;aAC9C,CAAC;YACF,OAAO,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;QACpE,CAAA;QAED,IAAI,OAAO,CAAC,WAAW,EAAE;;YAErB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,kBAAkB,EAAE;gBACxC,MAAM,aAAa,CAAC,kCAAkC,EAAE,CAAC;YAC5D,CAAA;YACD,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC;QAC5B,CAAA;QAED,OAAO,KAAK,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;KAC5C;IAED;;;;KAIG,GACH,MAAM,OAAO,CAAC,OAAuB,EAAA;QACjC,IAAI,IAAI,CAAC,kBAAkB,IAAI,OAAO,CAAC,OAAO,CAAC,eAAe,EAAE;YAC5D,MAAM,cAAc,GAAyB;gBACzC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ;gBACnC,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,eAAe;gBAC1C,aAAa,EACT,OAAO,CAAC,aAAa,IACrB,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE;aAC1C,CAAC;YACF,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACzD,CAAA;QAED,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC,aAAa,CACpC,OAAO,CAAC,OAAO,EACf,OAAO,CAAC,aAAa,CACxB,CAAC;KACL;IAED;;;KAGG,GACH,MAAM,cAAc,GAAA;QAChB,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC;YAC1D,OAAO,IAAI,CAAC,kBAAkB,CAAC,cAAc,CACzC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EACzB,aAAa,CAChB,CAAC;QACL,CAAA;QAED,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC,cAAc,EAAE,CAAC;KAChD;IAED;;;;KAIG,GACK,MAAM,kBAAkB,CAC5B,cAA+B,EAAA;QAE/B,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,MAAM,KAAI;YAC3C,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,MAAM,EAAE,GAAG,WAAW,CAAC,MAAK;gBACxB,IACI,yBAAyB,CAAC,UAAU,GAChC,yBAAyB,CAAC,WAAW,GACzC,KAAK,EACP;oBACE,aAAa,CAAC,EAAE,CAAC,CAAC;oBAClB,MAAM,CAAC,aAAa,CAAC,gCAAgC,EAAE,CAAC,CAAC;oBACzD,OAAO;gBACV,CAAA;gBAED,IAAI;oBACA,MAAM,CAAC,GAAG,cAAc,CAAC,cAAc,EAAE,CAAC;oBAC1C,aAAa,CAAC,EAAE,CAAC,CAAC;oBAClB,OAAO,CAAC,CAAC,CAAC,CAAC;oBACX,OAAO;gBACV,CAAA,CAAC,OAAO,CAAC,EAAE;oBACR,IACI,CAAC,YAAY,SAAS,IACtB,CAAC,CAAC,SAAS,KACP,oBAAoB,CAAC,sBAAsB,CAAC,IAAI,EACtD;;wBAEE,KAAK,EAAE,CAAC;wBACR,OAAO;oBACV,CAAA;oBACD,aAAa,CAAC,EAAE,CAAC,CAAC;oBAClB,MAAM,CAAC,CAAC,CAAC,CAAC;oBACV,OAAO;gBACV,CAAA;YACL,CAAC,EAAE,yBAAyB,CAAC,WAAW,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;KACN;AACJ;ACvXD;;;CAGG,GAwCH;;;CAGG,GACG,MAAO,sBAAuB,SAAQ,UAAU,CAAA;IAGlD,WACI,CAAA,aAAkC,EAClC,gBAAoC,CAAA;QAEpC,KAAK,CAAC,aAAa,CAAC,CAAC;QACrB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;KAC5C;IAED;;;KAGG,GACI,MAAM,YAAY,CACrB,OAAsC,EAAA;QAEtC,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,MAAM,EAAE;YACrC,OAAO,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5D,CAAA;QAED,MAAM,CAAC,0BAA0B,EAAE,gBAAgB,CAAC,GAChD,MAAM,IAAI,CAAC,6BAA6B,CACpC,OAAO,EACP,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,sBAAsB,CAC9B,CAAC;QAEN,IAAI,0BAA0B,EAAE;;YAE5B,IAAI,gBAAgB,KAAK,YAAY,CAAC,qBAAqB,EAAE;gBACzD,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,8JAA8J,CACjK,CAAC;;gBAGF,MAAM,kBAAkB,GAAG,IAAI,CAAC;gBAChC,MAAM,IAAI,CAAC,mBAAmB,CAC1B,OAAO,EACP,IAAI,CAAC,SAAS,EACd,kBAAkB,CACrB,CAAC;YACL,CAAA;;YAGD,OAAO,0BAA0B,CAAC;QACrC,CAAA,MAAM;YACH,OAAO,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5D,CAAA;KACJ;IAED;;KAEG,GACI,MAAM,6BAA6B,CACtC,OAAsC,EACtC,MAA0D,EAC1D,WAAoB,EACpB,SAAoB,EACpB,YAA0B,EAC1B,sBAAsD,EAAA;QAEtD,MAAM,mBAAmB,GAAG,MAA6B,CAAC;QAC1D,MAAM,4BAA4B,GAC9B,MAA0C,CAAC;QAE/C,IAAI,gBAAgB,GAAiB,YAAY,CAAC,cAAc,CAAC;;QAGjE,IAAI,YAAY,CAAC;QACjB,IACI,mBAAmB,CAAC,iBAAiB,IACrC,mBAAmB,CAAC,iBAAiB,EACvC;YACE,YAAY,GAAG,IAAI,iBAAiB,CAChC,mBAAmB,CAAC,iBAAiB,EACrC,KAAK,CACR,CAAC;YACF,MAAM,mBAAmB,CAAC,iBAAiB,CAAC,iBAAiB,CACzD,YAAY,CACf,CAAC;QACL,CAAA;QAED,MAAM,iBAAiB,GAAG,IAAI,CAAC,wBAAwB,CACnD,SAAS,EACT,4BAA4B,CAAC,iBAAiB,EAAE,EAAE,IAC9C,mBAAmB,CAAC,WAAW,CAAC,QAAQ,EAC5C,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC,EAClC,YAAY,EACZ,OAAO,CAAC,aAAa,CACxB,CAAC;QAEF,IACI,mBAAmB,CAAC,iBAAiB,IACrC,mBAAmB,CAAC,iBAAiB,IACrC,YAAY,EACd;YACE,MAAM,mBAAmB,CAAC,iBAAiB,CAAC,gBAAgB,CACxD,YAAY,CACf,CAAC;QACL,CAAA;;QAGD,IAAI,CAAC,iBAAiB,EAAE;YACpB,sBAAsB,EAAE,eAAe,CACnC,YAAY,CAAC,sBAAsB,CACtC,CAAC;YACF,OAAO;gBAAC,IAAI;gBAAE,YAAY,CAAC,sBAAsB;aAAC,CAAC;QACtD,CAAA;;QAGD,IACIC,cAAwB,CACpB,iBAAiB,CAAC,SAAS,EAC3B,mBAAmB,CAAC,aAAa,EAAE,yBAAyB,IACxD,gCAAgC,CACvC,EACH;YACE,sBAAsB,EAAE,eAAe,CACnC,YAAY,CAAC,2BAA2B,CAC3C,CAAC;YACF,OAAO;gBAAC,IAAI;gBAAE,YAAY,CAAC,2BAA2B;aAAC,CAAC;QAC3D,CAAA;;QAGD,IACI,iBAAiB,CAAC,SAAS,IAC3BA,cAAwB,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,EACrE;YACE,gBAAgB,GAAG,YAAY,CAAC,qBAAqB,CAAC;YACtD,sBAAsB,EAAE,eAAe,CACnC,YAAY,CAAC,qBAAqB,CACrC,CAAC;QACL,CAAA;QAED,OAAO;YACH,MAAM,eAAe,CAAC,4BAA4B,CAC9C,WAAW,EACX,SAAS,EACT;gBACI,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,IAAI;gBACb,WAAW,EAAE,iBAAiB;gBAC9B,YAAY,EAAE,IAAI;gBAClB,WAAW,EAAE,IAAI;aACpB,EACD,IAAI,EACJ,OAAO,CACV;YACD,gBAAgB;SACnB,CAAC;KACL;IAED;;KAEG,GACK,wBAAwB,CAC5B,SAAoB,EACpB,EAAU,EACV,QAAkB,EAClB,YAA0B,EAC1B,aAAqB,EAAA;QAErB,MAAM,iBAAiB,GAAqB;YACxC,aAAa,EAAEtE,WAAS,CAAC,YAAY;YACrC,WAAW,EACP,SAAS,CAAC,+BAA+B,CAAC,eAAe;YAC7D,cAAc,EAAE,cAAc,CAAC,YAAY;YAC3C,QAAQ,EAAE,EAAE;YACZ,KAAK,EAAE,SAAS,CAAC,MAAM;YACvB,MAAM,EAAE,QAAQ,CAAC,kBAAkB,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;SAC1D,CAAC;QAEF,MAAM,YAAY,GAAG,YAAY,CAAC,uBAAuB,CACrD,iBAAiB,EACjB,aAAa,CAChB,CAAC;QACF,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;YACzB,OAAO,IAAI,CAAC;QACf,CAAA,MAAM,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;YAChC,MAAM,qBAAqB,CACvBuE,sBAA2C,CAC9C,CAAC;QACL,CAAA;QACD,OAAO,YAAY,CAAC,CAAC,CAAsB,CAAC;KAC/C;IAED;;;;KAIG,GACK,MAAM,mBAAmB,CAC7B,OAAsC,EACtC,SAAoB,EACpB,kBAA4B,EAAA;QAE5B,IAAI,mBAAqD,CAAC;QAC1D,IAAI,YAAoB,CAAC;QAEzB,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;YAE1D,MAAM,2BAA2B,GAAG;gBAChC,aAAa,EAAE,OAAO,CAAC,aAAa;gBACpC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM;gBAClD,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,MAAM,EAAE,OAAO,CAAC,MAAM;aACzB,CAAC;YAEF,YAAY,GAAGtC,UAAoB,EAAE,CAAC;YACtC,MAAM,sBAAsB,GAAG,MAAM,IAAI,CAAC,gBAAgB,CACtD,2BAA2B,CAC9B,CAAC;YAEF,mBAAmB,GAAG;gBAClB,YAAY,EAAE,sBAAsB,CAAC,WAAW;gBAChD,UAAU,EAAE,sBAAsB,CAAC,gBAAgB;gBACnD,UAAU,EAAE,sBAAsB,CAAC,gBAAgB;gBACnD,UAAU,EAAE,oBAAoB,CAAC,MAAM;aAC1C,CAAC;QACL,CAAA,MAAM;YACH,MAAM,qBAAqB,GACvB,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;YAC7C,MAAM,QAAQ,GAAG,SAAS,CAAC,iBAAiB,CACxC,SAAS,CAAC,aAAa,EACvB,qBAAqB,CACxB,CAAC;YAEF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;YAC/D,MAAM,OAAO,GACT,IAAI,CAAC,yBAAyB,EAAE,CAAC;YACrC,MAAM,UAAU,GAAsB;gBAClC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ;gBAC1C,SAAS,EAAE,OAAO,CAAC,SAAS;gBAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;gBAClD,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;gBACpD,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;gBAC9C,SAAS,EAAE,OAAO,CAAC,SAAS;gBAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;aACzB,CAAC;YAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,qCAAqC,GAAG,SAAS,CAAC,aAAa,CAClE,CAAC;YAEF,YAAY,GAAGA,UAAoB,EAAE,CAAC;YACtC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAClD,QAAQ,EACR,WAAW,EACX,OAAO,EACP,UAAU,EACV,OAAO,CAAC,aAAa,CACxB,CAAC;YAEF,mBAAmB,GAAG,QAAQ,CAAC,IAAI,CAAC;YACpC,mBAAmB,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QAChD,CAAA;QAED,MAAM,eAAe,GAAG,IAAI,eAAe,CACvC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAChC,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAC7B,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAChC,CAAC;QAEF,eAAe,CAAC,qBAAqB,CACjC,mBAAmB,EACnB,kBAAkB,CACrB,CAAC;QAEF,MAAM,aAAa,GAAG,MAAM,eAAe,CAAC,yBAAyB,CACjE,mBAAmB,EACnB,IAAI,CAAC,SAAS,EACd,YAAY,EACZ,OAAO,CACV,CAAC;QAEF,OAAO,aAAa,CAAC;KACxB;IAED;;;KAGG,GACK,MAAM,sBAAsB,CAChC,OAAsC,EAAA;QAEtC,MAAM,UAAU,GAAG,IAAI,GAAG,EAAkB,CAAC;QAE7CC,WAAmC,CAC/B,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CACnC,CAAC;QAEFG,SAAiC,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QAErEE,YAAoC,CAChC,UAAU,EACV,SAAS,CAAC,wBAAwB,CACrC,CAAC;QAEFE,cAAsC,CAClC,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,WAAW,CAC1B,CAAC;QACFC,uBAA+C,CAC3C,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CACpC,CAAC;QAEFC,aAAqC,CAAC,UAAU,CAAC,CAAC;QAElD,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC7BC,kBAA0C,CACtC,UAAU,EACV,IAAI,CAAC,sBAAsB,CAC9B,CAAC;QACL,CAAA;QAED,MAAM,aAAa,GACf,OAAO,CAAC,aAAa,IACrB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;QAChDC,gBAAwC,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAEpE,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,YAAY,EAAE;YAC5CC,eAAuC,CACnC,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,YAAY,CAC7C,CAAC;QACL,CAAA;;QAGD,MAAM,eAAe,GACjB,OAAO,CAAC,eAAe,IACvB,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,eAAe,CAAC;QAElD,IAAI,eAAe,EAAE;YACjBC,kBAA0C,CACtC,UAAU,EACV,MAAM,kBAAkB,CACpB,eAAe,CAAC,SAAS,EACzB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAChC,OAAO,CAAC,kBAAkB,CAC7B,CACJ,CAAC;YACFC,sBAA8C,CAC1C,UAAU,EACV,eAAe,CAAC,aAAa,CAChC,CAAC;QACL,CAAA;QAED,IACI,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,IACtC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,IACvC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAC5D;YACEC,SAAiC,CAC7B,UAAU,EACV,OAAO,CAAC,MAAM,EACd,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAC7C,CAAC;QACL,CAAA;QAED,OAAOE,gBAAyB,CAAC,UAAU,CAAC,CAAC;KAChD;AACJ;ACraD;;;CAGG,GAmCH;;;CAGG,GACG,MAAO,gBAAiB,SAAQ,UAAU,CAAA;IAI5C,WAAA,CAAY,aAAkC,CAAA;QAC1C,KAAK,CAAC,aAAa,CAAC,CAAC;KACxB;IAED;;;KAGG,GACI,MAAM,YAAY,CACrB,OAAgC,EAAA;QAEhC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC;;QAGnD,IAAI,CAAC,iBAAiB,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CACtD,OAAO,CAAC,YAAY,CACvB,CAAC;QAEF,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,MAAM,EAAE;YACrC,OAAO,IAAI,CAAC,mBAAmB,CAC3B,OAAO,EACP,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,iBAAiB,CACzB,CAAC;QACL,CAAA;QAED,IAAI;YACA,OAAO,MAAM,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC;QAC5D,CAAA,CAAC,OAAO,CAAC,EAAE;;YAER,OAAO,MAAM,IAAI,CAAC,mBAAmB,CACjC,OAAO,EACP,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,iBAAiB,CACzB,CAAC;QACL,CAAA;KACJ;IAED;;;;;;;KAOG,GACK,MAAM,6BAA6B,CACvC,OAAgC,EAAA;;QAGhC,MAAM,iBAAiB,GAAG,IAAI,CAAC,8BAA8B,CACzD,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAChC,OAAO,CACV,CAAC;QACF,IAAI,CAAC,iBAAiB,EAAE;;YAEpB,IAAI,CAAC,sBAAsB,EAAE,eAAe,CACxC,YAAY,CAAC,sBAAsB,CACtC,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,gGAAgG,CACnG,CAAC;YACF,MAAM,qBAAqB,CACvBM,oBAAyC,CAC5C,CAAC;QACL,CAAA,MAAM,IACHa,cAAwB,CACpB,iBAAiB,CAAC,SAAS,EAC3B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,yBAAyB,CACtD,EACH;;YAEE,IAAI,CAAC,sBAAsB,EAAE,eAAe,CACxC,YAAY,CAAC,2BAA2B,CAC3C,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,CAAuG,oGAAA,EAAA,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,yBAAyB,CAAA,SAAA,CAAW,CACxK,CAAC;YACF,MAAM,qBAAqB,CACvBb,oBAAyC,CAC5C,CAAC;QACL,CAAA;;QAGD,MAAM,aAAa,GAAG,IAAI,CAAC,0BAA0B,CACjD,iBAAiB,CAAC,aAAa,EAC/B,OAAO,CAAC,aAAa,CACxB,CAAC;QACF,IAAI,aAAsC,CAAC;QAC3C,IAAI,aAAa,GAAyB,IAAI,CAAC;QAC/C,IAAI,aAAa,EAAE;YACf,aAAa,GAAGe,kBAA4B,CACxC,aAAa,CAAC,MAAM,EACpB,aAAa,CAAC,YAAY,CAC7B,CAAC;YACF,MAAM,cAAc,GAAG,aAAa,CAAC,GAAG,IAAI,aAAa,CAAC,GAAG,CAAC;YAC9D,MAAM,WAAW,GAAgB;gBAC7B,aAAa,EAAE,aAAa,CAAC,aAAa;gBAC1C,WAAW,EAAE,aAAa,CAAC,WAAW;gBACtC,QAAQ,EAAE,aAAa,CAAC,KAAK;gBAC7B,QAAQ,EAAExE,WAAS,CAAC,YAAY;gBAChC,cAAc,EAAE,cAAc,IAAIA,WAAS,CAAC,YAAY;aAC3D,CAAC;YAEF,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,UAAU,CACxC,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAAC,WAAW,CAAC,EACjD,OAAO,CAAC,aAAa,CACxB,CAAC;QACL,CAAA;;QAGD,IAAI,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE;YACpC,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,kBAAkB,EAAE,CAAC;QAC3D,CAAA;QAED,OAAO,eAAe,CAAC,4BAA4B,CAC/C,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,SAAS,EACd;YACI,OAAO,EAAE,aAAa;YACtB,WAAW,EAAE,iBAAiB;YAC9B,OAAO,EAAE,aAAa;YACtB,YAAY,EAAE,IAAI;YAClB,WAAW,EAAE,IAAI;QACpB,CAAA,EACD,IAAI,EACJ,OAAO,EACP,aAAa,CAChB,CAAC;KACL;IAED;;;;KAIG,GACK,0BAA0B,CAC9B,eAAuB,EACvB,aAAqB,EAAA;QAErB,MAAM,aAAa,GAAqB;YACpC,aAAa,EAAE,eAAe;YAC9B,WAAW,EACP,IAAI,CAAC,SAAS,CAAC,+BAA+B,CAAC,eAAe;YAClE,cAAc,EAAE,cAAc,CAAC,QAAQ;YACvC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ;YAC1C,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM;SAC/B,CAAC;QAEF,MAAM,UAAU,GACZ,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;;QAGxE,IAAI,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACtC,OAAO,IAAI,CAAC;QACf,CAAA;QACD,OAAO,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAkB,CAAC;KACxD;IAED;;;;KAIG,GACK,8BAA8B,CAClC,QAAgB,EAChB,OAAgC,EAAA;QAEhC,MAAM,UAAU,GACZ,OAAO,CAAC,oBAAoB,IAAI,oBAAoB,CAAC,MAAM,CAAC;QAChE;;;SAGG,GACH,MAAM,cAAc,GAEhB,UAAU,CAAC,WAAW,EAAE,KACpB,oBAAoB,CAAC,MAAM,CAAC,WAAW,EAAE,GACvC,cAAc,CAAC,6BAA6B,GAC5C,cAAc,CAAC,YAAY,CAAC;QAEtC,MAAM,iBAAiB,GAAqB;YACxC,cAAc,EAAE,cAAc;YAC9B,QAAQ;YACR,MAAM,EAAE,QAAQ,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;YAC5D,SAAS,EAAE,UAAU;YACrB,KAAK,EAAE,OAAO,CAAC,MAAM;YACrB,mBAAmB,EAAE,OAAO,CAAC,mBAAmB;YAChD,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;SAC5C,CAAC;QAEF,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAC1D,iBAAiB,EACjB,OAAO,CAAC,aAAa,CACxB,CAAC;QAEF,MAAM,eAAe,GAAG,YAAY,CAAC,MAAM,CAAC;QAC5C,IAAI,eAAe,GAAG,CAAC,EAAE;YACrB,OAAO,IAAI,CAAC;QACf,CAAA,MAAM,IAAI,eAAe,GAAG,CAAC,EAAE;YAC5B,MAAM,qBAAqB,CACvBuE,sBAA2C,CAC9C,CAAC;QACL,CAAA;QAED,OAAO,YAAY,CAAC,CAAC,CAAsB,CAAC;KAC/C;IAED;;;;KAIG,GACK,MAAM,mBAAmB,CAC7B,OAAgC,EAChC,SAAoB,EACpB,iBAAyB,EAAA;QAEzB,MAAM,qBAAqB,GAAG,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,SAAS,CAAC,iBAAiB,CACxC,SAAS,CAAC,aAAa,EACvB,qBAAqB,CACxB,CAAC;QACF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;QAC/D,MAAM,OAAO,GACT,IAAI,CAAC,yBAAyB,EAAE,CAAC;QACrC,MAAM,UAAU,GAAsB;YAClC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ;YAC1C,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,oBAAoB,EAAE,OAAO,CAAC,oBAAoB;YAClD,qBAAqB,EAAE,OAAO,CAAC,qBAAqB;YACpD,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;YAC9C,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,MAAM,EAAE,OAAO,CAAC,MAAM;SACzB,CAAC;QAEF,MAAM,YAAY,GAAGtC,UAAoB,EAAE,CAAC;QAC5C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAClD,QAAQ,EACR,WAAW,EACX,OAAO,EACP,UAAU,EACV,OAAO,CAAC,aAAa,CACxB,CAAC;QAEF,MAAM,eAAe,GAAG,IAAI,eAAe,CACvC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAChC,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAC7B,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAChC,CAAC;QAEF,eAAe,CAAC,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACrD,MAAM,aAAa,GAAG,MAAM,eAAe,CAAC,yBAAyB,CACjE,QAAQ,CAAC,IAAI,EACb,IAAI,CAAC,SAAS,EACd,YAAY,EACZ,OAAO,EACP,SAAS,EACT,iBAAiB,CACpB,CAAC;QAEF,OAAO,aAAa,CAAC;KACxB;IAED;;;KAGG,GACK,MAAM,sBAAsB,CAChC,OAAgC,EAAA;QAEhC,MAAM,UAAU,GAAG,IAAI,GAAG,EAAkB,CAAC;QAE7CC,WAAmC,CAC/B,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CACnC,CAAC;QAEFG,SAAiC,CAAC,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAE9DE,YAAoC,CAAC,UAAU,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;QAEvEC,aAAqC,CAAC,UAAU,CAAC,CAAC;QAElDC,cAAsC,CAClC,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,WAAW,CAC1B,CAAC;QACFC,uBAA+C,CAC3C,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CACpC,CAAC;QACFC,aAAqC,CAAC,UAAU,CAAC,CAAC;QAElD,IAAI,IAAI,CAAC,sBAAsB,EAAE;YAC7BC,kBAA0C,CACtC,UAAU,EACV,IAAI,CAAC,sBAAsB,CAC9B,CAAC;QACL,CAAA;QAED,MAAM,aAAa,GACf,OAAO,CAAC,aAAa,IACrB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC;QAChDC,gBAAwC,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QAEpE4B,kBAA0C,CACtC,UAAU,EACVC,YAA+B,CAClC,CAAC;QAEFC,eAAuC,CACnC,UAAU,EACV,OAAO,CAAC,YAAY,CACvB,CAAC;QAEF,IAAI,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,YAAY,EAAE;YAC5C7B,eAAuC,CACnC,UAAU,EACV,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,YAAY,CAC7C,CAAC;QACL,CAAA;QAED,MAAM,eAAe,GACjB,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,eAAe,CAAC;QAElD,IAAI,eAAe,EAAE;YACjBC,kBAA0C,CACtC,UAAU,EACV,MAAM,kBAAkB,CACpB,eAAe,CAAC,SAAS,EACzB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAChC,OAAO,CAAC,kBAAkB,CAC7B,CACJ,CAAC;YACFC,sBAA8C,CAC1C,UAAU,EACV,eAAe,CAAC,aAAa,CAChC,CAAC;QACL,CAAA;QAED,IACI,OAAO,CAAC,MAAM,IACb,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,IACvC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,GAAG,CAAC,CAAC,CAC5D;YACEC,SAAiC,CAC7B,UAAU,EACV,OAAO,CAAC,MAAM,EACd,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,CAC7C,CAAC;QACL,CAAA;QAED,OAAOE,gBAAyB,CAAC,UAAU,CAAC,CAAC;KAChD;AACJ;ACtZD;;;CAGG,GAEH,wBAAA;AAiCA;;;;CAIG,GACG,MAAO,6BACT,SAAQ,iBAAiB,CAAA;IAKzB;;;;;;;;;;;;;;;;;;KAkBG,GACH,WAAA,CAAY,aAA4B,CAAA;QACpC,KAAK,CAAC,aAAa,CAAC,CAAC;QAErB,MAAM,oBAAoB,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;QAC7D,MAAM,uBAAuB,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;QACnE,MAAM,mBAAmB,GACrB,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,UAAU,IAC7C,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,gBAAgB,KAC1D,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,UAAU,CAAC;QAErD;;;SAGG,GACH,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,OAAO;QACV,CAAA;;QAGD,IACI,AAAC,oBAAoB,IAAI,uBAAuB,IAC/C,uBAAuB,IAAI,mBAAmB,CAAC,GAC/C,oBAAoB,IAAI,mBAAmB,CAAC,CAC/C;YACE,MAAM,qBAAqB,CACvByB,uBAA4C,CAC/C,CAAC;QACL,CAAA;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE;YAC/B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;YAClD,OAAO;QACV,CAAA;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE;YAClC,IAAI,CAAC,gCAAgC,GACjC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;YACrC,OAAO;QACV,CAAA;QAED,IAAI,CAAC,mBAAmB,EAAE;YACtB,MAAM,qBAAqB,CACvBA,uBAA4C,CAC/C,CAAC;QACL,CAAA,MAAM;YACH,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CACtD,gBAAgB,GACf,eAAe,CAAC,mCAAmC,CAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,gBAAgB,EACnD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CACzC,GACD,eAAe,CAAC,eAAe;YAE3B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAoB,EACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CACzC,CAAC;QACX,CAAA;QACD,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;KACrC;IAED;;;;;KAKG,GACH,mBAAmB,CAAC,QAA2B,EAAA;QAC3C,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;KACpC;IAED;;KAEG,GACI,MAAM,8BAA8B,CACvC,OAAgC,EAAA;QAEhC,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,uCAAuC,EACvC,OAAO,CAAC,aAAa,CACxB,CAAC;;QAGF,IAAI,eAAgD,CAAC;QACrD,IAAI,OAAO,CAAC,eAAe,EAAE;YACzB,eAAe,GAAG;gBACd,SAAS,EAAE,MAAM,kBAAkB,CAC/B,OAAO,CAAC,eAAe,EACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ;gBAG7B,aAAa,EAAEvB,SAAa,CAAC,yBAAyB;aACzD,CAAC;QACL,CAAA;QAED,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;;QAG9D,MAAM,gBAAgB,GAAG;YACrB,GAAG,WAAW;YACd,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,MAAM,CAC7B,CAAC,KAAa,GAAK,CAAC,mBAAmB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAC1D;SACJ,CAAC;QAEF,MAAM,YAAY,GAAkC;YAChD,GAAG,OAAO;YACV,GAAG,gBAAgB;YACnB,eAAe;SAClB,CAAC;QAEF;;;SAGG,GACH,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;QACxD,MAAM,QAAQ,GAAG,SAAS,CAAC,gBAAgB,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAC9D,IACI,MAAM,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC,QAAQ,CACzC,QAAiC,CACpC,EACH;YACE,MAAM,qBAAqB,CACvBwB,oBAAyC,CAC5C,CAAC;QACL,CAAA;QAED;;;SAGG,GACH,MAAM,qBAAqB,GACvB,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAEnC,IAAI,MAA+B,CAAC;QACpC,IAAI,YAAY,CAAC,WAAW,KAAK,wBAAwB,EAAE;YACvD,IAAI,CAAC,YAAY,CAAC,WAAW,IAAI,qBAAqB,EAAE;gBACpD,MAAM,GAAG,qBAAqB,CAAC;YAClC,CAAA,MAAM;gBACH,MAAM,GAAG,YAAY,CAAC,WAAW,CAAC;YACrC,CAAA;QACJ,CAAA;QAED,MAAM,wBAAwB,GAA6B;YACvD,WAAW,EAAE,MAAM;YACnB,iBAAiB,EAAE,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC;SAC9D,CAAC;QAEF,MAAM,sBAAsB,GAAG,IAAI,CAAC,gCAAgC,CAChE,KAAK,CAAC,8BAA8B,EACpC,YAAY,CAAC,aAAa,EAC1B,YAAY,CAAC,SAAS,CACzB,CAAC;QACF,IAAI;YACA,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,eAAe,CAClD,YAAY,CAAC,SAAS,EACtB,YAAY,CAAC,aAAa,EAC1B,wBAAwB,EACxB,OAAO,CAAC,iBAAiB,CAC5B,CAAC;YACF,MAAM,sBAAsB,GACxB,MAAM,IAAI,CAAC,6BAA6B,CACpC,mBAAmB,EACnB,YAAY,CAAC,aAAa,EAC1B,EAAE,EACF,sBAAsB,CACzB,CAAC;YACN,MAAM,sBAAsB,GAAG,IAAI,sBAAsB,CACrD,sBAAsB,EACtB,IAAI,CAAC,gBAAgB,CACxB,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,kCAAkC,EAClC,YAAY,CAAC,aAAa,CAC7B,CAAC;YACF,OAAO,MAAM,sBAAsB,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QAClE,CAAA,CAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,SAAS,EAAE;gBACxB,CAAC,CAAC,gBAAgB,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YAClD,CAAA;YACD,sBAAsB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,CAAC;QACX,CAAA;KACJ;IAED;;;;;;;;;;KAUG,GACI,MAAM,sBAAsB,CAC/B,OAA0B,EAAA;QAE1B,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,+BAA+B,EAC/B,OAAO,CAAC,aAAa,CACxB,CAAC;QACF,MAAM,YAAY,GAA4B;YAC1C,GAAG,OAAO;YACV,GAAI,MAAM,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;SACjD,CAAC;QACF,IAAI;YACA,MAAM,mBAAmB,GAAG,MAAM,IAAI,CAAC,eAAe,CAClD,YAAY,CAAC,SAAS,EACtB,YAAY,CAAC,aAAa,EAC1B,SAAS,EACT,OAAO,CAAC,iBAAiB,CAC5B,CAAC;YACF,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,6BAA6B,CAC7D,mBAAmB,EACnB,YAAY,CAAC,aAAa,EAC1B,EAAE,EACF,SAAS,CACZ,CAAC;YACF,MAAM,SAAS,GAAG,IAAI,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;YACzD,IAAI,CAAC,MAAM,CAAC,OAAO,CACf,6BAA6B,EAC7B,YAAY,CAAC,aAAa,CAC7B,CAAC;YACF,OAAO,MAAM,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;QACrD,CAAA,CAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,YAAY,SAAS,EAAE;gBACxB,CAAC,CAAC,gBAAgB,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YAClD,CAAA;YACD,MAAM,CAAC,CAAC;QACX,CAAA;KACJ;AACJ;AC9SD;;;CAGG,GAEH;;;;;;CAMG,GACG,SAAU,SAAS,CAAC,UAA2B,EAAA;IACjD,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;QAChC,OAAO,KAAK,CAAC;IAChB,CAAA;IAED,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC;IAClC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,UAAU,CAAC;AACvE;ACnBA;;;CAGG,SAYU,qBAAqB,CAAA;IAK9B,WAAA,CACI,mBAAmC,EACnC,WAA6B,EAC7B,MAAc,CAAA;QAEd,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAEO,MAAM,6BAA6B,CACvC,UAAsB,EACtB,GAAW,EACX,OAA+B,EAAA;QAE/B,IAAI,UAAU,KAAK,UAAU,CAAC,GAAG,EAAE;YAC/B,OAAO,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QACrE,CAAA,MAAM;YACH,OAAO,IAAI,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QACtE,CAAA;KACJ;IAEO,MAAM,uBAAuB,CACjC,UAAsB,EACtB,GAAW,EACX,OAA+B,EAAA;;QAG/B,IAAI,QAAQ,GACR,MAAM,IAAI,CAAC,6BAA6B,CAAC,UAAU,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;QAEvE,IAAI,cAAc,IAAI,IAAI,CAAC,WAAW,EAAE;YACpC,IAAI,CAAC,WAAW,CAAC,YAAY,GAAG,IAAI,CAAC;QACxC,CAAA;QAED,IAAI,YAAY,GAAW,CAAC,CAAC;QAC7B,MACI,MAAM,IAAI,CAAC,WAAW,CAAC,aAAa,CAChC,QAAQ,CAAC,MAAM,EACf,YAAY,EACZ,IAAI,CAAC,MAAM,EACX,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,WAAW,CAAC,CAC5C,CACH;YACE,QAAQ,GAAG,MAAM,IAAI,CAAC,6BAA6B,CAC/C,UAAU,EACV,GAAG,EACH,OAAO,CACV,CAAC;YACF,YAAY,EAAE,CAAC;QAClB,CAAA;QAED,OAAO,QAAQ,CAAC;KACnB;IAEM,MAAM,mBAAmB,CAC5B,GAAW,EACX,OAA+B,EAAA;QAE/B,OAAO,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KACrE;IAEM,MAAM,oBAAoB,CAC7B,GAAW,EACX,OAA+B,EAAA;QAE/B,OAAO,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;KACtE;AACJ;ACxFD;;;CAGG,GAqCH;;CAEG,GACI,MAAM,gDAAgD,GAAG;IAC5D,+BAA+B,EAAE,UAAU;IAC3C,0BAA0B,EAAE,WAAW;IACvC,0BAA0B,EAAE,WAAW;IACvC,iCAAiC,EAAE,YAAY;IAC/C,qCAAqC,EAAE,WAAW;CAC5C,CAAC;MAIW,yBAAyB,CAAA;IAO3C,WACI,CAAA,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,CAAA;QAE/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;KACxD;IAOM,MAAM,2BAA2B,CACpC,QAAuD;IAEvD,cAA8B;IAE9B,eAAiD;IAEjD,sBAA6C,EAAA;QAE7C,OAAO,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;KAChD;IAEM,sBAAsB,CACzB,QAAuD,EAAA;QAEvD,IAAI,SAAS,EAAE,SAA6B,CAAC;QAC7C,IAAI,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE;;YAE1B,IAAI,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;gBACrC,QAAQ,CAAC,IAAI,CAAC,UAAU,GACpB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;YAC3D,CAAA;YAED,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,GAAG5C,UAAoB,EAAE,CAAC;;YAG9D,IAAI,SAAS,GAAG,CAAC,GAAG,IAAI,EAAE;gBACtB,SAAS,GAAG,SAAS,GAAG,CAAC,CAAC;YAC7B,CAAA;QACJ,CAAA;QAED,MAAM,mBAAmB,GAAqC;YAC1D,MAAM,EAAE,QAAQ,CAAC,MAAM;;YAGvB,YAAY,EAAE,QAAQ,CAAC,IAAI,CAAC,YAAY;YACxC,UAAU,EAAE,SAAS;YACrB,KAAK,EAAE,QAAQ,CAAC,IAAI,CAAC,QAAQ;YAC7B,UAAU,EAAE,QAAQ,CAAC,IAAI,CAAC,UAAU;YACpC,UAAU,EAAE,SAAS;;YAGrB,cAAc,EACV,QAAQ,CAAC,IAAI,CAAC,cAAc,IAAI,QAAQ,CAAC,IAAI,CAAC,aAAa;YAC/D,KAAK,EACD,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,KAAK,QAAQ,GACjC,QAAQ,CAAC,IAAI,CAAC,KAAK,GACnB,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI;YACnC,iBAAiB,EACb,QAAQ,CAAC,IAAI,CAAC,OAAO,IACrB,CAAC,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,KAAK,QAAQ,GAClC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,GAC/B,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC;YACvC,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC,WAAW;YACtC,SAAS,EAAE,QAAQ,CAAC,IAAI,CAAC,SAAS;YAClC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,QAAQ;SACnC,CAAC;QAEF,OAAO,mBAAmB,CAAC;KAC9B;IAEM,MAAM,+BAA+B,CACxC,sBAA8C,EAC9C,iBAAoC,EACpC,aAAwB,EACxB,kBAA4B,EAAA;QAE5B,MAAM,cAAc,GAChB,IAAI,CAAC,aAAa,CACd,sBAAsB,CAAC,QAAQ,EAC/B,iBAAiB,CACpB,CAAC;QAEN,IAAI,sBAAsB,CAAC,sBAAsB,EAAE;YAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,CAAuE,oEAAA,EAAA,sBAAsB,CAAC,MAAM,CAAE,CAAA,CACzG,CAAC;YAEF,cAAc,CAAC,eAAe,CAC1B,8BAA8B,CAAC,uBAAuB,CACzD,GAAG,sBAAsB,CAAC,sBAAsB,CAAC;QACrD,CAAA;QAED,IAAI,sBAAsB,CAAC,kBAAkB,EAAE,MAAM,EAAE;YACnD,MAAM,kBAAkB,GACpB,sBAAsB,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;YAEzD,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,CAAoF,iFAAA,EAAA,kBAAkB,CAAE,CAAA,CAC3G,CAAC;YAEF,cAAc,CAAC,eAAe,CAC1B,8BAA8B,CAAC,MAAM,CACxC,GAAG,kBAAkB,CAAC;QAC1B,CAAA;QAED,MAAM,OAAO,GAA2B,cAAc,CAAC,OAAO,CAAC;QAC/D,OAAO,CAAC,WAAW,CAAC,YAAY,CAAC,GAAGjC,WAAS,CAAC,qBAAqB,CAAC;QAEpE,MAAM,qBAAqB,GAA0B;YAAE,OAAO;QAAA,CAAE,CAAC;QAEjE,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,MAAM,EAAE;YACnD,qBAAqB,CAAC,IAAI,GACtB,cAAc,CAAC,2BAA2B,EAAE,CAAC;QACpD,CAAA;QAED;;;;SAIG,GACH,MAAM,mBAAmB,GAAmB,IAAI,CAAC,sBAAsB,GACjE,IAAI,CAAC,aAAa,GAClB,IAAI,qBAAqB,CACrB,IAAI,CAAC,aAAa,EAClB,cAAc,CAAC,WAAW,EAC1B,IAAI,CAAC,MAAM,CACd,CAAC;QAER,MAAM,YAAY,GAAGiC,UAAoB,EAAE,CAAC;QAC5C,IAAI,QAAuD,CAAC;QAC5D,IAAI;;YAEA,IAAI,cAAc,CAAC,UAAU,KAAK,UAAU,CAAC,IAAI,EAAE;gBAC/C,QAAQ,GACJ,MAAM,mBAAmB,CAAC,oBAAoB,CAC1C,cAAc,CAAC,UAAU,EAAE,EAC3B,qBAAqB,CACxB,CAAC;;YAET,CAAA,MAAM;gBACH,QAAQ,GACJ,MAAM,mBAAmB,CAAC,mBAAmB,CACzC,cAAc,CAAC,UAAU,EAAE,EAC3B,qBAAqB,CACxB,CAAC;YACT,CAAA;QACJ,CAAA,CAAC,OAAO,KAAK,EAAE;YACZ,IAAI,KAAK,YAAY,SAAS,EAAE;gBAC5B,MAAM,KAAK,CAAC;YACf,CAAA,MAAM;gBACH,MAAM,qBAAqB,CAAC6C,YAAiC,CAAC,CAAC;YAClE,CAAA;QACJ,CAAA;QAED,MAAM,eAAe,GAAG,IAAI,eAAe,CACvC,iBAAiB,CAAC,EAAE,EACpB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,MAAM,EACX,IAAI,EACJ,IAAI,CACP,CAAC;QAEF,MAAM,mBAAmB,GACrB,MAAM,IAAI,CAAC,2BAA2B,CAClC,QAAQ,EACR,mBAAmB,EACnB,cAAc,EACd,qBAAqB,CACxB,CAAC;QAEN,eAAe,CAAC,qBAAqB,CACjC,mBAAmB,EACnB,kBAAkB,CACrB,CAAC;;QAGF,OAAO,eAAe,CAAC,yBAAyB,CAC5C,mBAAmB,EACnB,aAAa,EACb,YAAY,EACZ,sBAAsB,CACzB,CAAC;KACL;IAEM,iDAAiD,CACpD,qBAA4C,EAC5C,MAAgB,EAChB,WAAqB,EAAA;QAErB,OAAQ,qBAAqB;YACzB,KAAK,qBAAqB,CAAC,uBAAuB;gBAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,CAAA,gCAAA,EACI,WAAW,GAAG,OAAO,GAAG,OAC5B,CAAA,gDAAA,CAAkD,CACrD,CAAC;;gBAEF,OAAO,WAAW,GACZ,gDAAgD,CAAC,+BAA+B,GAChF,gDAAgD,CAAC,0BAA0B,CAAC;YAEtF,KAAK,qBAAqB,CAAC,yBAAyB;gBAChD,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,qEAAqE,CACxE,CAAC;gBACF,OAAO,MAAM,GACP,gDAAgD,CAAC,iCAAiC,GAClF,gDAAgD,CAAC,qCAAqC,CAAC;YAEjG,KAAK,qBAAqB,CAAC,uBAAuB;gBAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,mEAAmE,CACtE,CAAC;gBACF,OAAO,gDAAgD,CAAC,0BAA0B,CAAC;YACvF;gBACI,MAAM,0BAA0B,CAC5BrE,4BAAsD,CACzD,CAAC;QACT,CAAA;KACJ;;AAEa,yBAAgC,CAAA,gCAAA,GAAG,CAC7C,qBAA6B,EAC7B,WAAmB,EACnB,UAAkB,EAClB,MAAc,KACN;IACR,IAAI;QACA,OAAO,IAAI,SAAS,CAAC,WAAW,CAAC,CAAC,SAAS,CAAC;IAC/C,CAAA,CAAC,OAAO,KAAK,EAAE;QACZ,MAAM,CAAC,IAAI,CACP,CAAA,mBAAA,EAAsB,UAAU,CAAiD,8CAAA,EAAA,qBAAqB,CAAsC,oCAAA,CAAA,CAC/I,CAAC;QAEF,MAAM,0BAA0B,CAC5BsE,4CACiD,CAC7C,qBAAqB,CACxB,CACJ,CAAC;IACL,CAAA;AACL,CAAC;ACxTL;;;CAGG,SAIU,mBAAmB,CAAA;IAC5B;;;;;;;KAOG,GACI,cAAc,CACjB,WAA+C,EAC/C,YAAoB,EAAA;QAEpB,IAAI,CAAC,WAAW,EAAE;YACd,OAAO,YAAY,CAAC;QACvB,CAAA;;QAGD,IAAI,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,CAAC;QAE/D;;;SAGG,GACH,IAAI,KAAK,CAAC,aAAa,CAAC,EAAE;;YAEtB,aAAa,GACT,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAC9D,CAAA;QAED,OAAO,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;KAChD;AACJ;ACvCD;;;CAGG,GAOI,MAAM,oCAAoC,GAAW,CAAC,CAAC,CAAA,0BAAA;AAC9D,MAAM,uCAAuC,GAAW,IAAI,CAAC;AAC7D,MAAM,sDAAsD,GAAkB;IAC1EC,WAAAA,UAAU,CAAC,SAAS;IACpBA,WAAAA,UAAU,CAAC,eAAe;IAC1BA,WAAAA,UAAU,CAAC,iBAAiB;IAC5BA,WAAAA,UAAU,CAAC,YAAY;IACvBA,WAAAA,UAAU,CAAC,mBAAmB;IAC9BA,WAAAA,UAAU,CAAC,eAAe;CAC7B,CAAC;MAEW,iCAAiC,CAAA;IAA9C,WAAA,EAAA;QASY,IAAA,CAAA,mBAAmB,GACvB,IAAI,mBAAmB,EAAE,CAAC;KAsCjC;IA/CG;;;KAGG,GACH,WAAW,uCAAuC,GAAA;QAC9C,OAAO,uCAAuC,CAAC;KAClD;IAKD,MAAM,aAAa,CACf,cAAsB,EACtB,YAAoB,EACpB,MAAc,EACd,gBAAoD,EAAA;QAEpD,IACI,sDAAsD,CAAC,QAAQ,CAC3D,cAAc,CACjB,IACD,YAAY,GAAG,oCAAoC,EACrD;YACE,MAAM,eAAe,GACjB,IAAI,CAAC,mBAAmB,CAAC,cAAc,CACnC,gBAAgB,EAChB,iCAAiC,CAAC,uCAAuC,CAC5E,CAAC;YAEN,MAAM,CAAC,OAAO,CACV,CAAuB,oBAAA,EAAA,eAAe,CAClC,mBAAA,EAAA,YAAY,GAAG,CACnB,CAAG,CAAA,CAAA,CACN,CAAC;;YAGF,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,KAAI;;gBAE1B,OAAO,UAAU,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC;QACf,CAAA;;QAGD,OAAO,KAAK,CAAC;KAChB;AACJ;ACrED;;;CAGG,SAUU,gCAAgC,CAAA;IAQzC,WAAA,CACI,UAAsB,EACtB,QAAgB,EAChB,WAA2B,CAAA;QAE3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC9B,IAAI,CAAC,OAAO,GAAG,CAAA,CAA4B,CAAC;QAC5C,IAAI,CAAC,cAAc,GAAG,CAAA,CAA4B,CAAC;QACnD,IAAI,CAAC,eAAe,GAAG,CAAA,CAA4B,CAAC;QAEpD,IAAI,CAAC,WAAW,GACZ,WAAW,IAAI,IAAI,iCAAiC,EAAE,CAAC;KAC9D;IAEM,UAAU,GAAA;QACb,MAAM,UAAU,GAAG,IAAI,GAAG,EAAkB,CAAC;QAE7C,IAAI,IAAI,CAAC,eAAe,EAAE;YACtBzB,uBAA+C,CAC3C,UAAU,EACV,IAAI,CAAC,eAAe,CACvB,CAAC;QACL,CAAA;QAED,MAAM,qBAAqB,GAAGJ,gBAAyB,CAAC,UAAU,CAAC,CAAC;QAEpE,OAAO,SAAS,CAAC,iBAAiB,CAC9B,IAAI,CAAC,aAAa,EAClB,qBAAqB,CACxB,CAAC;KACL;IAEM,2BAA2B,GAAA;QAC9B,MAAM,UAAU,GAAG,IAAI,GAAG,EAAkB,CAAC;QAE7C,IAAI,IAAI,CAAC,cAAc,EAAE;YACrBI,uBAA+C,CAC3C,UAAU,EACV,IAAI,CAAC,cAAc,CACtB,CAAC;QACL,CAAA;QAED,OAAOJ,gBAAyB,CAAC,UAAU,CAAC,CAAC;KAChD;AACJ;AClED;;;CAGG,GAiBH,wHAAA;AACA,MAAM,2BAA2B,GAAW,YAAY,CAAC;AAEzD;;CAEG,GACG,MAAO,UAAW,SAAQ,yBAAyB,CAAA;IAIrD,WAAA,CACI,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,EAC/B,gBAAwB,EACxB,cAAsB,CAAA;QAEtB,KAAK,CACD,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,CACzB,CAAC;QAEF,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;KACxC;IAEM,OAAO,uBAAuB,GAAA;QACjC,MAAM,gBAAgB,GAClB,OAAO,CAAC,GAAG,CACP,uCAAuC,CAAC,iBAAiB,CAC5D,CAAC;QACN,MAAM,cAAc,GAChB,OAAO,CAAC,GAAG,CACP,uCAAuC,CAAC,eAAe,CAC1D,CAAC;QAEN,OAAO;YAAC,gBAAgB;YAAE,cAAc;SAAC,CAAC;KAC7C;IAEM,OAAO,SAAS,CACnB,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,EAAA;QAE/B,MAAM,CAAC,gBAAgB,EAAE,cAAc,CAAC,GACpC,UAAU,CAAC,uBAAuB,EAAE,CAAC;;QAGzC,IAAI,CAAC,gBAAgB,IAAI,CAAC,cAAc,EAAE;YACtC,MAAM,CAAC,IAAI,CACP,CAAsB,mBAAA,EAAA,0BAA0B,CAAC,WAAW,CAAA,6DAAA,EAAgE,uCAAuC,CAAC,eAAe,CAAU,OAAA,EAAA,uCAAuC,CAAC,iBAAiB,CAAA,wCAAA,CAA0C,CACnS,CAAC;YACF,OAAO,IAAI,CAAC;QACf,CAAA;QAED,MAAM,yBAAyB,GAC3B,UAAU,CAAC,gCAAgC,CACvC,uCAAuC,CAAC,iBAAiB,EACzD,gBAAgB,EAChB,0BAA0B,CAAC,WAAW,EACtC,MAAM,CACT,CAAC;QAEN,MAAM,CAAC,IAAI,CACP,CAAA,+DAAA,EAAkE,0BAA0B,CAAC,WAAW,CAAoC,iCAAA,EAAA,yBAAyB,CAAA,WAAA,EAAc,0BAA0B,CAAC,WAAW,CAAA,kBAAA,CAAoB,CAChP,CAAC;QAEF,OAAO,IAAI,UAAU,CACjB,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,EACtB,gBAAgB,EAChB,cAAc,CACjB,CAAC;KACL;IAEM,aAAa,CAChB,QAAgB,EAChB,iBAAoC,EAAA;QAEpC,MAAM,OAAO,GACT,IAAI,gCAAgC,CAChC,UAAU,CAAC,GAAG,EACd,IAAI,CAAC,gBAAgB,CACxB,CAAC;QAEN,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,8BAA8B,CAAC,GAClE,IAAI,CAAC,cAAc,CAAC;QAExB,OAAO,CAAC,eAAe,CAAC,8BAA8B,CAAC,WAAW,CAAC,GAC/D,2BAA2B,CAAC;QAChC,OAAO,CAAC,eAAe,CAAC,8BAA8B,CAAC,QAAQ,CAAC,GAC5D,QAAQ,CAAC;QAEb,IACI,iBAAiB,CAAC,MAAM,KAAK,qBAAqB,CAAC,eAAe,EACpE;YACE,OAAO,CAAC,eAAe,CACnB,IAAI,CAAC,iDAAiD,CAClD,iBAAiB,CAAC,MAAM,CAC3B,CACJ,GAAG,iBAAiB,CAAC,EAAE,CAAC;QAC5B,CAAA;;QAID,OAAO,OAAO,CAAC;KAClB;AACJ;ACzID;;;CAGG,GAyCI,MAAM,eAAe,GAAW,YAAY,CAAC;AAC7C,MAAM,mCAAmC,GAC5C,uDAAuD,CAAC;AAC5D,MAAM,8BAA8B,GAAG,8BAA8B,CAAC;AAO/D,MAAM,6BAA6B,GAAgB;IACtD,KAAK,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAwC,sCAAA,CAAA;IAC5E,KAAK,EAAE,4BAA4B;CACtC,CAAC;AAEK,MAAM,wBAAwB,GAAgB;IACjD,KAAK,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAyC,uCAAA,CAAA;IAC9E,KAAK,EAAE,0BAA0B;CACpC,CAAC;AAEF;;CAEG,GACG,MAAO,QAAS,SAAQ,yBAAyB,CAAA;IAGnD,WACI,CAAA,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,EAC/B,gBAAwB,CAAA;QAExB,KAAK,CACD,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,CACzB,CAAC;QAEF,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;KAC5C;IAEM,OAAO,uBAAuB,GAAA;QACjC,IAAI,gBAAgB,GAChB,OAAO,CAAC,GAAG,CACP,uCAAuC,CAAC,iBAAiB,CAC5D,CAAC;QACN,IAAI,YAAY,GACZ,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,aAAa,CAAC,CAAC;;QAGvE,IAAI,CAAC,gBAAgB,IAAI,CAAC,YAAY,EAAE;;YAEpC,MAAM,iBAAiB,GACnB,wBAAwB,CAAC,OAAO,CAAC,QAA6B,CAAC,CAAC;YACpE,IAAI;gBACA;;;iBAGG,GACH8B,GAAAA,UAAU,CACN,iBAAiB,EACjBC,GAAAA,SAAW,CAAC,IAAI,GAAGA,GAAAA,SAAW,CAAC,IAAI,CACtC,CAAC;gBAEF,gBAAgB,GAAG,mCAAmC,CAAC;gBACvD,YAAY,GAAG,8BAA8B,CAAC;YACjD,CAAA,CAAC,OAAO,GAAG,EAAE;YACV;;;iBAGG,GACN,CAAA;QACJ,CAAA;QAED,OAAO;YAAC,gBAAgB;YAAE,YAAY;SAAC,CAAC;KAC3C;IAEM,OAAO,SAAS,CACnB,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,EAC/B,iBAAoC,EAAA;QAEpC,MAAM,CAAC,gBAAgB,EAAE,YAAY,CAAC,GAClC,QAAQ,CAAC,uBAAuB,EAAE,CAAC;;QAGvC,IAAI,CAAC,gBAAgB,IAAI,CAAC,YAAY,EAAE;YACpC,MAAM,CAAC,IAAI,CACP,CAAA,mBAAA,EAAsB,0BAA0B,CAAC,SAAS,CAAA,uFAAA,EAA0F,uCAAuC,CAAC,iBAAiB,CAAU,OAAA,EAAA,uCAAuC,CAAC,aAAa,CAAA,mBAAA,EAAsB,0BAA0B,CAAC,SAAS,CAA+D,6DAAA,CAAA,CACxY,CAAC;YAEF,OAAO,IAAI,CAAC;QACf,CAAA;;QAGD,IAAI,YAAY,KAAK,8BAA8B,EAAE;YACjD,MAAM,CAAC,IAAI,CACP,CAAA,mBAAA,EAAsB,0BAA0B,CAAC,SAAS,CAA8E,2EAAA,EAAA,0BAA0B,CAAC,SAAS,CAAA,WAAA,EAAc,mCAAmC,CAAc,WAAA,EAAA,0BAA0B,CAAC,SAAS,CAAA,kBAAA,CAAoB,CACtS,CAAC;QACL,CAAA,MAAM;;YAGH,MAAM,yBAAyB,GAC3B,QAAQ,CAAC,gCAAgC,CACrC,uCAAuC,CAAC,iBAAiB,EACzD,gBAAgB,EAChB,0BAA0B,CAAC,SAAS,EACpC,MAAM,CACT,CAAC;;YAEN,yBAAyB,CAAC,QAAQ,CAAC,GAAG,CAAC,GACjC,yBAAyB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAA,CAAE,CAAC,GACtC,yBAAyB,CAAC;YAEhC,QAAQ,CAAC,gCAAgC,CACrC,uCAAuC,CAAC,aAAa,EACrD,YAAY,EACZ,0BAA0B,CAAC,SAAS,EACpC,MAAM,CACT,CAAC;YAEF,MAAM,CAAC,IAAI,CACP,CAAA,+DAAA,EAAkE,0BAA0B,CAAC,SAAS,CAAoC,iCAAA,EAAA,yBAAyB,CAAA,WAAA,EAAc,0BAA0B,CAAC,SAAS,CAAA,kBAAA,CAAoB,CAC5O,CAAC;QACL,CAAA;QAED,IACI,iBAAiB,CAAC,MAAM,KAAK,qBAAqB,CAAC,eAAe,EACpE;YACE,MAAM,0BAA0B,CAC5BnE,sBAAgD,CACnD,CAAC;QACL,CAAA;QAED,OAAO,IAAI,QAAQ,CACf,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,EACtB,gBAAgB,CACnB,CAAC;KACL;IAEM,aAAa,CAAC,QAAgB,EAAA;QACjC,MAAM,OAAO,GACT,IAAI,gCAAgC,CAChC,UAAU,CAAC,GAAG,EACd,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,EAAE,WAAW,CAAC,CAC1D,CAAC;QAEN,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,GAAG,MAAM,CAAC;QAEtE,OAAO,CAAC,eAAe,CAAC,8BAA8B,CAAC,WAAW,CAAC,GAC/D,eAAe,CAAC;QACpB,OAAO,CAAC,eAAe,CAAC,8BAA8B,CAAC,QAAQ,CAAC,GAC5D,QAAQ,CAAC;;QAIb,OAAO,OAAO,CAAC;KAClB;IAEM,MAAM,2BAA2B,CACpC,gBAA+D,EAC/D,aAA6B,EAC7B,cAAgD,EAChD,qBAA4C,EAAA;QAE5C,IAAI,aAEW,CAAC;QAEhB,IAAI,gBAAgB,CAAC,MAAM,KAAK,UAAU,CAAC,YAAY,EAAE;YACrD,MAAM,aAAa,GACf,gBAAgB,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;YACjD,IAAI,CAAC,aAAa,EAAE;gBAChB,MAAM,0BAA0B,CAC5BK,4BAAsD,CACzD,CAAC;YACL,CAAA;YACD,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;gBACzC,MAAM,0BAA0B,CAC5BC,sCAAgE,CACnE,CAAC;YACL,CAAA;YAED,MAAM,cAAc,GAAG,aAAa,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;;YAG9D,IACI,CAAC,6BAA6B,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,EACjE;gBACE,MAAM,0BAA0B,CAC5BV,oBAA8C,CACjD,CAAC;YACL,CAAA;;YAGD,MAAM,sBAAsB,GACxB,6BAA6B,CACzB,OAAO,CAAC,QAA6B,CACxC,CAAC;;YAGN,MAAM,QAAQ,GAAW,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;YACvD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC5B,MAAM,0BAA0B,CAC5BJ,oBAA8C,CACjD,CAAC;YACL,CAAA;YAED;;;;aAIG,GACH,IAAI,sBAAsB,GAAG,QAAQ,KAAK,cAAc,EAAE;gBACtD,MAAM,0BAA0B,CAC5BC,eAAyC,CAC5C,CAAC;YACL,CAAA;YAED,IAAI,cAAc,CAAC;;YAEnB,IAAI;gBACA,cAAc,GAAG,MAAM2E,GAAAA,QAAQ,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC;YACxD,CAAA,CAAC,OAAO,CAAC,EAAE;gBACR,MAAM,0BAA0B,CAC5BjE,sBAAgD,CACnD,CAAC;YACL,CAAA;;YAED,IAAI,cAAc,GAAG,oCAAoC,EAAE;gBACvD,MAAM,0BAA0B,CAC5BR,aAAuC,CAC1C,CAAC;YACL,CAAA;;YAGD,IAAI,MAAM,CAAC;YACX,IAAI;gBACA,MAAM,GAAG0E,GAAAA,YAAY,CAAC,cAAc,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC;YAC7D,CAAA,CAAC,OAAO,CAAC,EAAE;gBACR,MAAM,0BAA0B,CAC5BlE,sBAAgD,CACnD,CAAC;YACL,CAAA;YACD,MAAM,eAAe,GAAG,CAAS,MAAA,EAAA,MAAM,EAAE,CAAC;YAE1C,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,CAAA,8DAAA,CAAgE,CACnE,CAAC;YACF,cAAc,CAAC,OAAO,CAClB,sBAAsB,CAAC,yBAAyB,CACnD,GAAG,eAAe,CAAC;YAEpB,IAAI;gBACA,aAAa,GACT,MAAM,aAAa,CAAC,mBAAmB,CACnC,cAAc,CAAC,UAAU,EAAE,EAC3B,qBAAqB,CACxB,CAAC;YACT,CAAA,CAAC,OAAO,KAAK,EAAE;gBACZ,IAAI,KAAK,YAAY,SAAS,EAAE;oBAC5B,MAAM,KAAK,CAAC;gBACf,CAAA,MAAM;oBACH,MAAM,qBAAqB,CACvB4D,YAAiC,CACpC,CAAC;gBACL,CAAA;YACJ,CAAA;QACJ,CAAA;QAED,OAAO,IAAI,CAAC,sBAAsB,CAAC,aAAa,IAAI,gBAAgB,CAAC,CAAC;KACzE;AACJ;ACvUD;;;CAGG,GAqBH;;CAEG,GACG,MAAO,UAAW,SAAQ,yBAAyB,CAAA;IAGrD,WACI,CAAA,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,EAC/B,WAAmB,CAAA;QAEnB,KAAK,CACD,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,CACzB,CAAC;QAEF,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;KAClC;IAEM,OAAO,uBAAuB,GAAA;QACjC,MAAM,WAAW,GACb,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,YAAY,CAAC,CAAC;QAEtE,OAAO;YAAC,WAAW;SAAC,CAAC;KACxB;IAEM,OAAO,SAAS,CACnB,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,EAC/B,iBAAoC,EAAA;QAEpC,MAAM,CAAC,WAAW,CAAC,GAAG,UAAU,CAAC,uBAAuB,EAAE,CAAC;;QAG3D,IAAI,CAAC,WAAW,EAAE;YACd,MAAM,CAAC,IAAI,CACP,CAAA,mBAAA,EAAsB,0BAA0B,CAAC,WAAW,CAAA,8CAAA,EAAiD,uCAAuC,CAAC,YAAY,CAAA,qCAAA,CAAuC,CAC3M,CAAC;YACF,OAAO,IAAI,CAAC;QACf,CAAA;QAED,MAAM,oBAAoB,GACtB,UAAU,CAAC,gCAAgC,CACvC,uCAAuC,CAAC,YAAY,EACpD,WAAW,EACX,0BAA0B,CAAC,WAAW,EACtC,MAAM,CACT,CAAC;QAEN,MAAM,CAAC,IAAI,CACP,CAAA,8DAAA,EAAiE,0BAA0B,CAAC,WAAW,CAAoC,iCAAA,EAAA,oBAAoB,CAAA,WAAA,EAAc,0BAA0B,CAAC,WAAW,CAAA,kBAAA,CAAoB,CAC1O,CAAC;QAEF,IACI,iBAAiB,CAAC,MAAM,KAAK,qBAAqB,CAAC,eAAe,EACpE;YACE,MAAM,0BAA0B,CAC5B9D,wBAAkD,CACrD,CAAC;QACL,CAAA;QAED,OAAO,IAAI,UAAU,CACjB,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,EACtB,WAAW,CACd,CAAC;KACL;IAEM,aAAa,CAAC,QAAgB,EAAA;QACjC,MAAM,OAAO,GACT,IAAI,gCAAgC,CAChC,UAAU,CAAC,IAAI,EACf,IAAI,CAAC,WAAW,CACnB,CAAC;QAEN,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,GAAG,MAAM,CAAC;QAEtE,OAAO,CAAC,cAAc,CAAC,8BAA8B,CAAC,QAAQ,CAAC,GAC3D,QAAQ,CAAC;QAEb,OAAO,OAAO,CAAC;KAClB;AACJ;ACtHD;;;CAGG,SAEU,wBAAwB,CAAA;IAQjC,WAAA,CACI,qBAA6B,EAC7B,qBAA6B,EAC7B,uBAA+B,CAAA;QAE/B,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACnD,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACnD,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;KAC1D;IAED;;;;;;;;;;;;;;KAcG,GACI,cAAc,CAAC,YAAoB,EAAA;;QAEtC,IAAI,YAAY,KAAK,CAAC,EAAE;YACpB,OAAO,IAAI,CAAC,qBAAqB,CAAC;QACrC,CAAA;;QAGD,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAC7B,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,uBAAuB,EAC5D,IAAI,CAAC,qBAAqB,CAC7B,CAAC;QAEF,OAAO,gBAAgB,CAAC;KAC3B;AACJ;ACpDD;;;CAGG,GAMH,MAAM,8CAA8C,GAAkB;IAClEgE,WAAAA,UAAU,CAAC,SAAS;IACpBA,WAAAA,UAAU,CAAC,eAAe;IAC1BA,WAAAA,UAAU,CAAC,IAAI;IACfA,WAAAA,UAAU,CAAC,iBAAiB;CAC/B,CAAC;AAEF,MAAM,gCAAgC,GAAG,CAAC,CAAC;AAC3C,MAAM,2BAA2B,GAAG,CAAC,CAAC;AAEtC,MAAM,0BAA0B,GAAW,IAAI,CAAC;AAChD,MAAM,0BAA0B,GAAW,IAAI,CAAC;AAChD,MAAM,4BAA4B,GAAW,IAAI,CAAC;AAElD,MAAM,+BAA+B,GAAW,EAAE,GAAG,IAAI,CAAC,CAAA,aAAA;MAE7C,eAAe,CAAA;IAA5B,WAAA,EAAA;QAyBY,IAAA,CAAA,wBAAwB,GAC5B,IAAI,wBAAwB,CACxB,eAAe,CAAC,0BAA0B,EAC1C,eAAe,CAAC,0BAA0B,EAC1C,eAAe,CAAC,4BAA4B,CAC/C,CAAC;KAiET;IA9FG;;;KAGG,GACH,WAAW,0BAA0B,GAAA;QACjC,OAAO,0BAA0B,CAAC;KACrC;IACD,WAAW,0BAA0B,GAAA;QACjC,OAAO,0BAA0B,CAAC;KACrC;IACD,WAAW,4BAA4B,GAAA;QACnC,OAAO,4BAA4B,CAAC;KACvC;IACD,WAAW,+BAA+B,GAAA;QACtC,OAAO,+BAA+B,CAAC;KAC1C;IAGD,IAAI,YAAY,CAAC,KAAc,EAAA;QAC3B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;KAC9B;IAWD;;;;;;;KAOG,GACH,MAAM,aAAa,CACf,cAAsB,EACtB,YAAoB,EACpB,MAAc,EAAA;QAEd,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;;YAG3B,IAAI,CAAC,UAAU,GACX,cAAc,KAAKA,WAAAA,UAAU,CAAC,IAAI,GAC5B,2BAA2B,GAC3B,gCAAgC,CAAC;QAC9C,CAAA;QAED;;;;;;SAMG,GACH,IACI,CAAC,8CAA8C,CAAC,QAAQ,CACpD,cAAc,CACjB,IACI,cAAc,IAAIA,WAAAA,UAAU,CAAC,wBAAwB,IAClD,cAAc,IAAIA,WAAAA,UAAU,CAAC,sBAAsB,IACnD,YAAY,GAAG,IAAI,CAAC,UAAW,AAAD,KACtC,YAAY,GAAG,IAAI,CAAC,UAAU,EAChC;YACE,MAAM,eAAe,GACjB,cAAc,KAAKA,WAAAA,UAAU,CAAC,IAAI,GAC5B,eAAe,CAAC,+BAA+B,GAC/C,IAAI,CAAC,wBAAwB,CAAC,cAAc,CACxC,YAAY,CACf,CAAC;YAEZ,MAAM,CAAC,OAAO,CACV,CAAuB,oBAAA,EAAA,eAAe,CAClC,mBAAA,EAAA,YAAY,GAAG,CACnB,CAAG,CAAA,CAAA,CACN,CAAC;;YAGF,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,KAAI;gBAC1B,OAAO,UAAU,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;YAChD,CAAC,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC;QACf,CAAA;;QAGD,OAAO,KAAK,CAAC;KAChB;AACJ;ACxHD;;;CAGG,GAkBH,yKAAA;AAEA,MAAM,eAAe,GAAW,iCAAiC,CAAC;AAClE,MAAM,qBAAqB,GAAW,CAAyB,sBAAA,EAAA,eAAe,EAAE,CAAC;AACjF,MAAM,gBAAgB,GAAW,YAAY,CAAC;AAE9C;;CAEG,GACG,MAAO,IAAK,SAAQ,yBAAyB,CAAA;IAG/C;;;;;;;;KAQG,GACH,WACI,CAAA,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,EAC/B,gBAAwB,CAAA;QAExB,KAAK,CACD,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,CACzB,CAAC;QAEF,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;KAC5C;IAED;;;;;;;;;;;KAWG,GACI,OAAO,SAAS,CACnB,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,EAAA;QAE/B,IAAI,yBAAiC,CAAC;QAEtC,IACI,OAAO,CAAC,GAAG,CACP,uCAAuC,CAClC,iCAAiC,CACzC,EACH;YACE,MAAM,CAAC,IAAI,CACP,CACI,wCAAA,EAAA,uCAAuC,CAAC,iCAC5C,CAAA,KAAA,EAAQ,0BAA0B,CAAC,IAAI,CACnC,oBAAA,EAAA,OAAO,CAAC,GAAG,CACP,uCAAuC,CAClC,iCAAiC,CAE9C,CAAE,CAAA,CACL,CAAC;YACF,yBAAyB,GAAG,IAAI,CAAC,gCAAgC,CAC7D,uCAAuC,CAAC,iCAAiC,EACzE,CACI,EAAA,OAAO,CAAC,GAAG,CACP,uCAAuC,CAClC,iCAAiC,CAE9C,CAAG,EAAA,eAAe,CAAE,CAAA,EACpB,0BAA0B,CAAC,IAAI,EAC/B,MAAM,CACT,CAAC;QACL,CAAA,MAAM;YACH,MAAM,CAAC,IAAI,CACP,CAAA,kCAAA,EAAqC,uCAAuC,CAAC,iCAAiC,CAAA,0BAAA,EAA6B,0BAA0B,CAAC,IAAI,CAAA,6BAAA,CAA+B,CAC5M,CAAC;YACF,yBAAyB,GAAG,qBAAqB,CAAC;QACrD,CAAA;QAED,OAAO,IAAI,IAAI,CACX,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,EACtB,yBAAyB,CAC5B,CAAC;KACL;IAED;;;;;;;KAOG,GACI,aAAa,CAChB,QAAgB,EAChB,iBAAoC,EAAA;QAEpC,MAAM,OAAO,GACT,IAAI,gCAAgC,CAChC,UAAU,CAAC,GAAG,EACd,IAAI,CAAC,gBAAgB,CACxB,CAAC;QAEN,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,GAAG,MAAM,CAAC;QAEtE,OAAO,CAAC,eAAe,CAAC,8BAA8B,CAAC,WAAW,CAAC,GAC/D,gBAAgB,CAAC;QACrB,OAAO,CAAC,eAAe,CAAC,8BAA8B,CAAC,QAAQ,CAAC,GAC5D,QAAQ,CAAC;QAEb,IACI,iBAAiB,CAAC,MAAM,KAAK,qBAAqB,CAAC,eAAe,EACpE;YACE,OAAO,CAAC,eAAe,CACnB,IAAI,CAAC,iDAAiD,CAClD,iBAAiB,CAAC,MAAM,EACxB,IAAI,CAAA,2BAAA;cAEX,GAAG,iBAAiB,CAAC,EAAE,CAAC;QAC5B,CAAA;;QAID,OAAO,CAAC,WAAW,GAAG,IAAI,eAAe,EAAE,CAAC;QAE5C,OAAO,OAAO,CAAC;KAClB;AACJ;ACxKD;;;CAGG,GAiBH,MAAM,8BAA8B,GAAW,oBAAoB,CAAC;AAEpE;;CAEG,GACG,MAAO,aAAc,SAAQ,yBAAyB,CAAA;IAIxD;;;;;;;;;KASG,GACH,WAAA,CACI,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,EAC/B,gBAAwB,EACxB,cAAsB,CAAA;QAEtB,KAAK,CACD,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,CACzB,CAAC;QAEF,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;KACxC;IAED;;;KAGG,GACI,OAAO,uBAAuB,GAAA;QACjC,MAAM,gBAAgB,GAClB,OAAO,CAAC,GAAG,CACP,uCAAuC,CAAC,iBAAiB,CAC5D,CAAC;QACN,MAAM,cAAc,GAChB,OAAO,CAAC,GAAG,CACP,uCAAuC,CAAC,eAAe,CAC1D,CAAC;QACN,MAAM,wBAAwB,GAC1B,OAAO,CAAC,GAAG,CACP,uCAAuC,CAClC,0BAA0B,CAClC,CAAC;QAEN,OAAO;YAAC,gBAAgB;YAAE,cAAc;YAAE,wBAAwB;SAAC,CAAC;KACvE;IAED;;;;;;;;;KASG,GACI,OAAO,SAAS,CACnB,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,EAC/B,iBAAoC,EAAA;QAEpC,MAAM,CAAC,gBAAgB,EAAE,cAAc,EAAE,wBAAwB,CAAC,GAC9D,aAAa,CAAC,uBAAuB,EAAE,CAAC;QAE5C,IAAI,CAAC,gBAAgB,IAAI,CAAC,cAAc,IAAI,CAAC,wBAAwB,EAAE;YACnE,MAAM,CAAC,IAAI,CACP,CAAA,mBAAA,EAAsB,0BAA0B,CAAC,cAAc,CAAA,4DAAA,EAA+D,uCAAuC,CAAC,eAAe,CAAO,IAAA,EAAA,uCAAuC,CAAC,iBAAiB,CAAA,MAAA,EAAS,uCAAuC,CAAC,0BAA0B,CAA0C,wCAAA,CAAA,CAC7W,CAAC;YACF,OAAO,IAAI,CAAC;QACf,CAAA;QAED,MAAM,yBAAyB,GAC3B,aAAa,CAAC,gCAAgC,CAC1C,uCAAuC,CAAC,iBAAiB,EACzD,gBAAgB,EAChB,0BAA0B,CAAC,cAAc,EACzC,MAAM,CACT,CAAC;QAEN,MAAM,CAAC,IAAI,CACP,CAAA,+DAAA,EAAkE,0BAA0B,CAAC,cAAc,CAAoC,iCAAA,EAAA,yBAAyB,CAAA,WAAA,EAAc,0BAA0B,CAAC,cAAc,CAAA,kBAAA,CAAoB,CACtP,CAAC;QAEF,IACI,iBAAiB,CAAC,MAAM,KAAK,qBAAqB,CAAC,eAAe,EACpE;YACE,MAAM,CAAC,OAAO,CACV,CAAA,mBAAA,EAAsB,0BAA0B,CAAC,cAAc,CAAsN,oNAAA,CAAA,CACxR,CAAC;QACL,CAAA;QAED,OAAO,IAAI,aAAa,CACpB,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,EACtB,gBAAgB,EAChB,cAAc,CACjB,CAAC;KACL;IAED;;;;;KAKG,GACI,aAAa,CAChB,QAAgB,EAChB,iBAAoC,EAAA;QAEpC,MAAM,OAAO,GACT,IAAI,gCAAgC,CAChC,UAAU,CAAC,GAAG,EACd,IAAI,CAAC,gBAAgB,CACxB,CAAC;QAEN,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,4BAA4B,CAAC,GAChE,IAAI,CAAC,cAAc,CAAC;QAExB,OAAO,CAAC,eAAe,CAAC,8BAA8B,CAAC,WAAW,CAAC,GAC/D,8BAA8B,CAAC;QACnC,OAAO,CAAC,eAAe,CAAC,8BAA8B,CAAC,QAAQ,CAAC,GAC5D,QAAQ,CAAC;QAEb,IACI,iBAAiB,CAAC,MAAM,KAAK,qBAAqB,CAAC,eAAe,EACpE;YACE,OAAO,CAAC,eAAe,CACnB,IAAI,CAAC,iDAAiD,CAClD,iBAAiB,CAAC,MAAM,CAC3B,CACJ,GAAG,iBAAiB,CAAC,EAAE,CAAC;QAC5B,CAAA;;QAID,OAAO,OAAO,CAAC;KAClB;AACJ;ACnLD;;;CAGG,GAoBH,MAAM,gCAAgC,GAAW,YAAY,CAAC;AAEvD,MAAM,2DAA2D,GAAG,CAAA,kEAAA,EAAqE,0BAA0B,CAAC,gBAAgB,CAAA,CAAA,CAAG,CAAC,CAAA,0BAAA;AAEzL,MAAO,eAAgB,SAAQ,yBAAyB,CAAA;IAI1D,WAAA,CACI,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,EAC/B,WAAmB,EACnB,MAAc,CAAA;QAEd,KAAK,CACD,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,CACzB,CAAC;QAEF,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;KACxB;IAEM,OAAO,uBAAuB,GAAA;QACjC,MAAM,WAAW,GACb,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,YAAY,CAAC,CAAC;QAEtE,MAAM,MAAM,GACR,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC,UAAU,CAAC,CAAC;QAEpE,OAAO;YAAC,WAAW;YAAE,MAAM;SAAC,CAAC;KAChC;IAEM,OAAO,SAAS,CACnB,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,EAAA;QAE/B,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,GAAG,eAAe,CAAC,uBAAuB,EAAE,CAAC;;QAGxE,IAAI,CAAC,WAAW,IAAI,CAAC,MAAM,EAAE;YACzB,MAAM,CAAC,IAAI,CACP,CAAsB,mBAAA,EAAA,0BAA0B,CAAC,gBAAgB,CAAA,6DAAA,EAAgE,uCAAuC,CAAC,YAAY,CAAU,OAAA,EAAA,uCAAuC,CAAC,UAAU,CAAA,wCAAA,CAA0C,CAC9R,CAAC;YACF,OAAO,IAAI,CAAC;QACf,CAAA;QAED,MAAM,oBAAoB,GACtB,eAAe,CAAC,gCAAgC,CAC5C,uCAAuC,CAAC,YAAY,EACpD,WAAW,EACX,0BAA0B,CAAC,gBAAgB,EAC3C,MAAM,CACT,CAAC;QAEN,MAAM,CAAC,IAAI,CACP,CAAA,+DAAA,EAAkE,0BAA0B,CAAC,gBAAgB,CAAoC,iCAAA,EAAA,oBAAoB,CAAA,WAAA,EAAc,0BAA0B,CAAC,gBAAgB,CAAA,kBAAA,CAAoB,CACrP,CAAC;QAEF,OAAO,IAAI,eAAe,CACtB,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,EACtB,WAAW,EACX,MAAM,CACT,CAAC;KACL;IAEM,aAAa,CAChB,QAAgB,EAChB,iBAAoC,EAAA;QAEpC,MAAM,OAAO,GACT,IAAI,gCAAgC,CAChC,UAAU,CAAC,GAAG,EACd,IAAI,CAAC,WAAW,CACnB,CAAC;QAEN,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,oBAAoB,CAAC,GAAG,MAAM,CAAC;QACtE,OAAO,CAAC,OAAO,CAAC,sBAAsB,CAAC,4BAA4B,CAAC,GAChE,IAAI,CAAC,MAAM,CAAC;QAEhB,OAAO,CAAC,eAAe,CAAC,8BAA8B,CAAC,WAAW,CAAC,GAC/D,gCAAgC,CAAC;QACrC,OAAO,CAAC,eAAe,CAAC,8BAA8B,CAAC,QAAQ,CAAC,GAC5D,QAAQ,CAAC;QAEb,IACI,iBAAiB,CAAC,MAAM,KAAK,qBAAqB,CAAC,eAAe,EACpE;YACE,OAAO,CAAC,eAAe,CACnB,gDAAgD,CAAC,+BAA+B,CACnF,GAAG,OAAO,CAAC,GAAG,CACX,uCAAuC,CAClC,0BAA0B,CACxB,CAAC,CAAA,8EAAA;QACf,CAAA,MAAM,IACH,iBAAiB,CAAC,MAAM,KACxB,qBAAqB,CAAC,uBAAuB,EAC/C;YACE,OAAO,CAAC,eAAe,CACnB,IAAI,CAAC,iDAAiD,CAClD,iBAAiB,CAAC,MAAM,EACxB,KAAK,EACL,IAAI,CAAA,cAAA;cAEX,GAAG,iBAAiB,CAAC,EAAE,CAAC;QAC5B,CAAA,MAAM;YACH,MAAM,IAAI,KAAK,CACX,2DAA2D,CAC9D,CAAC;QACL,CAAA;;QAID,OAAO,OAAO,CAAC;KAClB;AACJ;ACvJD;;;CAGG,GAyBH;;;CAGG,SACU,qBAAqB,CAAA;IAU9B,WACI,CAAA,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,CAAA;QAE/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;KACxD;IAEM,MAAM,+BAA+B,CACxC,sBAA8C,EAC9C,iBAAoC,EACpC,aAAwB,EACxB,kBAA4B,EAAA;QAE5B,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE;YACvC,qBAAqB,CAAC,cAAc,GAChC,IAAI,CAAC,2BAA2B,CAC5B,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,sBAAsB,EAC3B,iBAAiB,CACpB,CAAC;QACT,CAAA;QAED,OAAO,qBAAqB,CAAC,cAAc,CAAC,+BAA+B,CACvE,sBAAsB,EACtB,iBAAiB,EACjB,aAAa,EACb,kBAAkB,CACrB,CAAC;KACL;IAEO,iCAAiC,CACrC,oBAA+C,EAAA;QAE/C,OAAO,MAAM,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,KAAK,CAC5C,CAAC,mBAAmB,KAAI;YACpB,OAAO,mBAAmB,KAAK,SAAS,CAAC;QAC7C,CAAC,CACJ,CAAC;KACL;IAED;;;KAGG,GACI,wBAAwB,GAAA;QAC3B,qBAAqB,CAAC,UAAU,GAC5B,IAAI,CAAC,iCAAiC,CAClC,aAAa,CAAC,uBAAuB,EAAE,CAC1C,GACK,0BAA0B,CAAC,cAAc,GACzC,IAAI,CAAC,iCAAiC,CAClC,UAAU,CAAC,uBAAuB,EAAE,CACvC,GACD,0BAA0B,CAAC,WAAW,GACtC,IAAI,CAAC,iCAAiC,CAClC,eAAe,CAAC,uBAAuB,EAAE,CAC5C,GACD,0BAA0B,CAAC,gBAAgB,GAC3C,IAAI,CAAC,iCAAiC,CAClC,UAAU,CAAC,uBAAuB,EAAE,CACvC,GACD,0BAA0B,CAAC,WAAW,GACtC,IAAI,CAAC,iCAAiC,CAClC,QAAQ,CAAC,uBAAuB,EAAE,CACrC,GACD,0BAA0B,CAAC,SAAS,GACpC,0BAA0B,CAAC,eAAe,CAAC;QAErD,OAAO,qBAAqB,CAAC,UAAU,CAAC;KAC3C;IAED;;;KAGG,GACK,2BAA2B,CAC/B,MAAc,EACd,WAAwB,EACxB,aAA6B,EAC7B,cAA8B,EAC9B,sBAA+B,EAC/B,iBAAoC,EAAA;QAEpC,MAAM,MAAM,GACR,aAAa,CAAC,SAAS,CACnB,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,EACtB,iBAAiB,CACpB,IACD,UAAU,CAAC,SAAS,CAChB,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,CACzB,IACD,eAAe,CAAC,SAAS,CACrB,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,CACzB,IACD,UAAU,CAAC,SAAS,CAChB,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,EACtB,iBAAiB,CACpB,IACD,QAAQ,CAAC,SAAS,CACd,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,EACtB,iBAAiB,CACpB,IACD,IAAI,CAAC,SAAS,CACV,MAAM,EACN,WAAW,EACX,aAAa,EACb,cAAc,EACd,sBAAsB,CACzB,CAAC;QACN,IAAI,CAAC,MAAM,EAAE;YACT,MAAM,0BAA0B,CAC5B/D,oBAA8C,CACjD,CAAC;QACL,CAAA;QACD,OAAO,MAAM,CAAC;KACjB;AACJ;AC5LD;;;CAGG,GAsCH,MAAM,qCAAqC,GACvC;IAAC,0BAA0B,CAAC,cAAc;CAAC,CAAC;AAEhD;;;CAGG,SACU,0BAA0B,CAAA;IAkBnC,WAAA,CAAY,aAA4C,CAAA;;QAEpD,IAAI,CAAC,MAAM,GAAG,iCAAiC,CAAC,aAAa,IAAI,CAAA,CAAE,CAAC,CAAC;QAErE,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CACpB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,EAChC,IAAI,EACJ,OAAO,CACV,CAAC;QAEF,MAAM,0BAA0B,GAA2B;YACvD,kBAAkB,EAAEjB,WAAS,CAAC,iBAAiB;SAClD,CAAC;QAEF,IAAI,CAAC,0BAA0B,CAAC,WAAW,EAAE;YACzC,0BAA0B,CAAC,WAAW,GAAG,IAAI,WAAW,CACpD,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,EAChC,6BAA6B,EAC7B,0BAA0B,CAC7B,CAAC;QACL,CAAA;QAED,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,aAAa,CAAC;QAEtD,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC;QAE3C,MAAM,oBAAoB,GAAqB;YAC3C,YAAY,EAAE,YAAY,CAAC,GAAG;YAC9B,gBAAgB,EAAE;gBAAC,sCAAsC;aAAC;YAC1D,sBAAsB,EAAE,EAAE;YAC1B,iBAAiB,EAAE,EAAE;SACxB,CAAC;QACF,IAAI,CAAC,aAAa,GAAG,IAAI,SAAS,CAC9B,sCAAsC,EACtC,IAAI,CAAC,aAAa,EAClB,0BAA0B,CAAC,WAA0B,EACrD,oBAAoB,EACpB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE,EACnC,SAAS,EACT,IAAI,CACP,CAAC;QAEF,IAAI,CAAC,0BAA0B,GAAG,IAAI,sBAAsB,CAAC;YACzD,WAAW,EAAE;gBACT,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE;gBAC1C,SAAS,EAAE,IAAI,CAAC,aAAa;YACjB,CAAA;QACI,CAAA,CAAC,CAAC;QAE1B,IAAI,CAAC,qBAAqB,GAAG,IAAI,qBAAqB,CAClD,IAAI,CAAC,MAAM,EACX,0BAA0B,CAAC,WAA0B,EACrD,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,MAAM,CAAC,sBAAsB,CACrC,CAAC;QAEF,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;KACpC;IAED;;;;KAIG,GACI,MAAM,YAAY,CACrB,4BAA0D,EAAA;QAE1D,IAAI,CAAC,4BAA4B,CAAC,QAAQ,EAAE;YACxC,MAAM,8BAA8B,CAChCqF,aAA2C,CAC9C,CAAC;QACL,CAAA;QAED,MAAM,sBAAsB,GAA2B;YACnD,YAAY,EAAE,4BAA4B,CAAC,YAAY;YACvD,QAAQ,EAAE,4BAA4B,CAAC,QAAQ,CAAC,OAAO,CACnD,WAAW,EACX,EAAE,CACL;YACD,MAAM,EAAE;gBACJ,4BAA4B,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;aACjE;YACD,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,kBAAkB;YAChD,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE;YAClD,MAAM,EAAE,4BAA4B,CAAC,MAAM;YAC3C,kBAAkB,EAAE,IAAI,CAAC,MAAM,CAAC,kBAAkB;SACrD,CAAC;QAEF,IAAI,sBAAsB,CAAC,YAAY,EAAE;YACrC,OAAO,IAAI,CAAC,+BAA+B,CACvC,sBAAsB,EACtB,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAC7B,IAAI,CAAC,aAAa,CACrB,CAAC;QACL,CAAA;QAED,MAAM,CAAC,0BAA0B,EAAE,gBAAgB,CAAC,GAChD,MAAM,IAAI,CAAC,0BAA0B,CAAC,6BAA6B,CAC/D,sBAAsB,EACtB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,aAAa,EAClB,0BAA0B,CAAC,WAA0B,CACxD,CAAC;QAEN;;;SAGG,GACH,IAAI,sBAAsB,CAAC,MAAM,EAAE;YAC/B,MAAM,UAAU,GACZ,IAAI,CAAC,qBAAqB,CAAC,wBAAwB,EAAE,CAAC;YAE1D;;;aAGG,GACH,IACI,0BAA0B,IAC1B,qCAAqC,CAAC,QAAQ,CAAC,UAAU,CAAC,EAC5D;gBACE,MAAM,sBAAsB,GAAW,IAAI,CAAC,SAAS,CAChD,MAAM,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAC9C,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;gBACjC,sBAAsB,CAAC,sBAAsB,GACzC,sBAAsB,CAAC;YAC9B,CAAA;YAED,OAAO,IAAI,CAAC,+BAA+B,CACvC,sBAAsB,EACtB,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAC7B,IAAI,CAAC,aAAa,CACrB,CAAC;QACL,CAAA;QAED,IAAI,0BAA0B,EAAE;;YAE5B,IAAI,gBAAgB,KAAK,YAAY,CAAC,qBAAqB,EAAE;gBACzD,IAAI,CAAC,MAAM,CAAC,IAAI,CACZ,8JAA8J,CACjK,CAAC;;gBAGF,MAAM,kBAAkB,GAAG,IAAI,CAAC;gBAChC,MAAM,IAAI,CAAC,+BAA+B,CACtC,sBAAsB,EACtB,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAC7B,IAAI,CAAC,aAAa,EAClB,kBAAkB,CACrB,CAAC;YACL,CAAA;YAED,OAAO,0BAA0B,CAAC;QACrC,CAAA,MAAM;YACH,OAAO,IAAI,CAAC,+BAA+B,CACvC,sBAAsB,EACtB,IAAI,CAAC,MAAM,CAAC,iBAAiB,EAC7B,IAAI,CAAC,aAAa,CACrB,CAAC;QACL,CAAA;KACJ;IAED;;;;;;;;KAQG,GACK,MAAM,+BAA+B,CACzC,sBAA8C,EAC9C,iBAAoC,EACpC,aAAwB,EACxB,kBAA4B,EAAA;;QAG5B,OAAO,IAAI,CAAC,qBAAqB,CAAC,+BAA+B,CAC7D,sBAAsB,EACtB,iBAAiB,EACjB,aAAa,EACb,kBAAkB,CACrB,CAAC;KACL;IAED;;;KAGG,GACI,wBAAwB,GAAA;QAC3B,OACI,qBAAqB,CAAC,UAAU,IAChC,IAAI,CAAC,qBAAqB,CAAC,wBAAwB,EAAE,EACvD;KACL;AACJ;ACzQD;;;CAGG,GAWH;;;CAGG,SACU,sBAAsB,CAAA;IAI/B,WAAY,CAAA,MAAoB,EAAE,gBAAmC,CAAA;QACjE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;KAC5C;IAED;;;KAGG,GACI,MAAM,iBAAiB,CAC1B,YAA+B,EAAA;QAE/B,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;QAC1D,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACtD,YAAY,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;KAClD;IAED;;;KAGG,GACI,MAAM,gBAAgB,CACzB,YAA+B,EAAA;QAE/B,IAAI,YAAY,CAAC,eAAe,EAAE;YAC9B,MAAM,OAAO,GACT,YAAY,CAAC,UAChB,CAAC,UAAU,EAAE,CAAC;YACf,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,KAAK,GACxD,aAAa,CAAC,eAAe,CAAC,KAAe,CAAC,CACjD,CAAC;YAEF,IAAI,YAAoB,CAAC;YACzB,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC5B,MAAM,aAAa,GAAG,eAAe,CAAC,CAAC,CAAkB,CAAC;gBAC1D,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,CACjD,aAAa,CAChB,CAAC;YACL,CAAA,MAAM;gBACH,YAAY,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;YACvD,CAAA;YAED,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CACjB,YAAY,EACZ,YAAY,CAAC,UAAU,CAAC,SAAS,EAAE,CACtC,CAAC;QACL,CAAA;KACJ;AACJ","debugId":null}}]
}