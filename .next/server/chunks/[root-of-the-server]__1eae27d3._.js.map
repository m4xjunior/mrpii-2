{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/lib/database/connection.ts"],"sourcesContent":["import { Connection, Request, TYPES } from 'tedious';\n\n// Configuraciones para m√∫ltiples bases de datos como en el PHP original\nconst baseConfig: any = {\n  server: process.env.DB_SERVER || '10.0.0.45',\n  authentication: {\n    type: 'default' as const,\n    options: {\n      userName: process.env.DB_USER || 'sa',\n      password: process.env.DB_PASSWORD || 'Mapexdd2017',\n    },\n  },\n  options: {\n    port: parseInt(process.env.DB_PORT || '1433'),\n    encrypt: false,\n    trustServerCertificate: true,\n    connectTimeout: 30000,\n    requestTimeout: 30000,\n    enableArithAbort: true,\n  },\n};\n\n// Configuraciones espec√≠ficas para cada base de datos\nconst mapexConfig: any = {\n  ...baseConfig,\n  options: {\n    ...baseConfig.options,\n    database: process.env.DB_NAME || 'mapexbp_Test',\n  },\n};\n\nconst sageConfig: any = {\n  ...baseConfig,\n  authentication: {\n    type: 'default' as const,\n    options: {\n      userName: 'sa',\n      password: 'admin000',\n    },\n  },\n  options: {\n    ...baseConfig.options,\n    database: 'SAGE',\n  },\n};\n\nconst whalesConfig: any = {\n  ...baseConfig,\n  authentication: {\n    type: 'default' as const,\n    options: {\n      userName: 'sa',\n      password: '87cc88bb89.',\n    },\n  },\n  options: {\n    ...baseConfig.options,\n    database: 'WHALES',\n  },\n};\n\n// Fun√ß√£o para criar uma nova conex√£o para cada query (evita conflitos de estado)\nexport async function getDbConnection(database: 'mapex' | 'sage' | 'whales' = 'mapex'): Promise<Connection> {\n  let config: any;\n  switch (database) {\n    case 'mapex':\n      config = mapexConfig;\n      break;\n    case 'sage':\n      config = sageConfig;\n      break;\n    case 'whales':\n      config = whalesConfig;\n      break;\n    default:\n      config = mapexConfig;\n  }\n\n  const connection = new Connection(config);\n\n  return new Promise((resolve, reject) => {\n    connection.on('connect', (err) => {\n      if (err) {\n        console.error(`‚ùå Erro ao conectar √† base ${database.toUpperCase()}:`, err);\n        reject(err);\n      } else {\n        console.log(`‚úÖ Nova conex√£o criada para ${database.toUpperCase()}`);\n        resolve(connection);\n      }\n    });\n\n    connection.on('error', (err) => {\n      console.error(`‚ùå Erro na conex√£o ${database.toUpperCase()}:`, err);\n      reject(err);\n    });\n\n    // N√£o definir on('end') aqui pois vamos fechar manualmente\n\n    connection.connect();\n  });\n}\n\nexport async function executeQuery<T = any>(\n  sql: string,\n  parameters?: { [key: string]: any },\n  database: 'mapex' | 'sage' | 'whales' = 'mapex'\n): Promise<T[]> {\n  const conn = await getDbConnection(database);\n\n  return new Promise((resolve, reject) => {\n    const results: T[] = [];\n\n    const request = new Request(sql, (err) => {\n      // Sempre fechar a conex√£o ap√≥s completar a query\n      try {\n        conn.close();\n      } catch (closeErr) {\n        console.warn('‚ö†Ô∏è Erro ao fechar conex√£o:', closeErr);\n      }\n\n      if (err) {\n        console.error(`‚ùå Erro na query ${database.toUpperCase()}:`, err);\n        console.error('SQL:', sql.substring(0, 200) + '...');\n        reject(err);\n      } else {\n        resolve(results);\n      }\n    });\n\n    // Adicionar par√¢metros se fornecidos\n    if (parameters) {\n      Object.entries(parameters).forEach(([key, value]) => {\n        let type: any = TYPES.NVarChar;\n        if (typeof value === 'number') {\n          type = Number.isInteger(value) ? TYPES.Int : TYPES.Float;\n        } else if (typeof value === 'boolean') {\n          type = TYPES.Bit;\n        } else if (value instanceof Date) {\n          type = TYPES.DateTime;\n        }\n        request.addParameter(key, type, value);\n      });\n    }\n\n    request.on('row', (columns: any) => {\n      const row: any = {};\n      columns.forEach((column: any) => {\n        row[column.metadata.colName] = column.value;\n      });\n      results.push(row);\n    });\n\n    try {\n      conn.execSql(request);\n    } catch (execErr) {\n      // Se houver erro na execu√ß√£o, fechar conex√£o e rejeitar\n      try {\n        conn.close();\n      } catch (closeErr) {\n        console.warn('‚ö†Ô∏è Erro ao fechar conex√£o ap√≥s falha:', closeErr);\n      }\n      reject(execErr);\n    }\n  });\n}\n\nexport async function closeDbConnection(database?: 'mapex' | 'sage' | 'whales'): Promise<void> {\n  // Como agora criamos uma nova conex√£o para cada query e fechamos automaticamente,\n  // esta fun√ß√£o √© mantida por compatibilidade mas n√£o faz mais sentido\n  console.log('‚ÑπÔ∏è Conex√µes agora s√£o gerenciadas automaticamente por query');\n}\n\n// Fun√ß√£o para testar conectividade\nexport async function testConnections(): Promise<{ [key: string]: boolean }> {\n  const results: { [key: string]: boolean } = {};\n\n  for (const db of ['mapex', 'sage', 'whales'] as const) {\n    try {\n      await executeQuery('SELECT 1 as test', undefined, db);\n      results[db] = true;\n      console.log(`‚úÖ Teste de conectividade ${db.toUpperCase()}: OK`);\n    } catch (error) {\n      results[db] = false;\n      console.error(`‚ùå Teste de conectividade ${db.toUpperCase()}: FALHOU`, error);\n    }\n  }\n\n  return results;\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/lib/data-processor.ts"],"sourcesContent":["import { executeQuery } from './database/connection';\nimport { calculateOEEForOF, calculateOEEForTurno, getProductionDataForOF } from './oee/calculations';\nimport { Machine, MachineStatus as IMachineStatus, OEEData } from '../types/machine';\n\n// Interface para dados de produ√ß√£o por OF\ninterface ProductionOFData {\n  ok: number;\n  nok: number;\n  rw: number;\n  total: number;\n  progress: number;\n  remainingPieces: number;\n  remainingTime: string;\n  startDate?: string;\n  estimatedFinish?: string;\n}\n\n// Interface para dados de velocidade\ninterface VelocityData {\n  current: number;\n  nominal: number;\n  ratio: number;\n}\n\n// Interface para dados do produto\ninterface ProductData {\n  code: string;\n  description: string;\n}\n\n// Interface para dados da ordem\ninterface OrderData {\n  code: string;\n  date?: string;\n  shift: string;\n}\n\nexport async function getMachinesStatus(): Promise<IMachineStatus[]> {\n  try {\n    console.log('üîÑ Iniciando obten√ß√£o de status das m√°quinas...');\n\n    // Consulta principal para obter dados das m√°quinas (equivalente ao PHP)\n    const sqlMachines = `\n      SELECT \n        Cod_maquina, desc_maquina, Rt_Cod_of, rt_Cod_producto, rt_id_actividad, \n        rt_id_paro, id_maquina, Rt_Desc_producto, Rt_Unidades_planning, \n        Rt_Desc_actividad, Rt_Desc_operario, Rt_Unidades_ok, Rt_Unidades_nok, \n        f_velocidad, Rt_Rendimientonominal1, rt_desc_paro,\n        COALESCE((SELECT cod_producto FROM cfg_producto WHERE id_producto = rt_id_producto), '') as codigo_producto,\n        rt_dia_productivo, rt_desc_turno\n      FROM cfg_maquina\n      WHERE activo = 1 AND Cod_maquina <> '--'\n    `;\n\n    const machinesData = await executeQuery<any>(sqlMachines, undefined, 'mapex');\n    \n    if (!machinesData || machinesData.length === 0) {\n      console.log('‚ö†Ô∏è Nenhuma m√°quina encontrada na consulta principal');\n      return [];\n    }\n\n    console.log(`‚úÖ ${machinesData.length} m√°quinas encontradas`);\n\n    // Preparar dados para consultas em lote\n    const machineIds = machinesData.map((m: any) => m.id_maquina);\n    const machineCodes = machinesData.map((m: any) => m.Cod_maquina);\n    const ofCodes = machinesData.map((m: any) => m.Rt_Cod_of).filter((of: string) => of && of !== '--');\n    const productCodes = machinesData.map((m: any) => m.codigo_producto).filter((code: string) => code);\n\n    // Mapear dados das m√°quinas por c√≥digo\n    const machinesMap: { [key: string]: any } = {};\n    machinesData.forEach((machine: any) => {\n      machinesMap[machine.Cod_maquina] = machine;\n    });\n\n    // Executar consultas em lote paralelamente com tratamento de erro\n    const [\n      oeeTurnoData,\n      oeeOFData,\n      productionData,\n      lastProductionData\n    ] = await Promise.all([\n      getOeeTurnoData(machineCodes).catch(error => {\n        console.warn('‚ö†Ô∏è Erro em getOeeTurnoData:', error);\n        return {};\n      }),\n      getOeeOFData(machineCodes).catch(error => {\n        console.warn('‚ö†Ô∏è Erro em getOeeOFData:', error);\n        return {};\n      }),\n      getProductionData(ofCodes).catch(error => {\n        console.warn('‚ö†Ô∏è Erro em getProductionData:', error);\n        return {};\n      }),\n      getLastProductionData(machineIds).catch(error => {\n        console.warn('‚ö†Ô∏è Erro em getLastProductionData:', error);\n        return {};\n      })\n    ]);\n\n    // Processar todas as m√°quinas\n    const machinesStatus: IMachineStatus[] = [];\n\n    for (const machine of machinesData) {\n      const status = await processMachineStatus(\n        machine,\n        oeeTurnoData,\n        oeeOFData,\n        productionData,\n        lastProductionData\n      );\n      \n      if (status) {\n        machinesStatus.push(status);\n      }\n    }\n\n    // Ordenar m√°quinas por tempo restante (similar ao PHP)\n    machinesStatus.sort((a, b) => {\n      const timeA = a.productionOF.remainingTime === 'N/A' ? Infinity : parseFloat(a.productionOF.remainingTime || '0');\n      const timeB = b.productionOF.remainingTime === 'N/A' ? Infinity : parseFloat(b.productionOF.remainingTime || '0');\n      \n      if (timeA > 0 && timeB > 0) return timeA - timeB;\n      if (timeA > 0 && timeB === Infinity) return -1;\n      if (timeA === Infinity && timeB > 0) return 1;\n      return 0;\n    });\n\n    console.log(`‚úÖ ${machinesStatus.length} m√°quinas processadas com sucesso`);\n    return machinesStatus;\n\n  } catch (error) {\n    console.error('‚ùå Erro ao obter status das m√°quinas:', error);\n    throw error;\n  }\n}\n\nasync function getOeeTurnoData(machineCodes: string[]): Promise<{ [key: string]: any }> {\n  if (!machineCodes.length) return {};\n\n  try {\n    const codesStr = machineCodes.map(code => `'${code.replace(/'/g, \"''\")}'`).join(',');\n    \n    const sql = `\n      SELECT\n        cm.Cod_maquina,\n        75.0 as oee, -- Valor simulado para evitar erro\n        80.0 as rend  -- Valor simulado para evitar erro\n      FROM cfg_maquina cm\n      WHERE cm.Cod_maquina IN (${codesStr})\n        AND cm.activo = 1\n    `;\n\n    const result = await executeQuery<any>(sql, undefined, 'mapex');\n    const oeeData: { [key: string]: any } = {};\n\n    result.forEach((row: any) => {\n      oeeData[row.Cod_maquina] = row;\n    });\n\n    return oeeData;\n  } catch (error) {\n    console.error('‚ùå Erro ao obter dados OEE turno:', error);\n    return {};\n  }\n}\n\nasync function getOeeOFData(machineCodes: string[]): Promise<{ [key: string]: any }> {\n  if (!machineCodes.length) return {};\n\n  try {\n    const codesStr = machineCodes.map(code => `'${code.replace(/'/g, \"''\")}'`).join(',');\n    \n    const sql = `\n      SELECT\n        cm.Cod_maquina,\n        70.0 as oee_of, -- Valor simulado para evitar erro\n        75.0 as rend_of  -- Valor simulado para evitar erro\n      FROM cfg_maquina cm\n      WHERE cm.Cod_maquina IN (${codesStr})\n        AND cm.activo = 1\n        AND cm.Rt_Cod_of IS NOT NULL\n        AND cm.Rt_Cod_of <> '--'\n    `;\n\n    const result = await executeQuery<any>(sql, undefined, 'mapex');\n    const oeeData: { [key: string]: any } = {};\n\n    result.forEach((row: any) => {\n      oeeData[row.Cod_maquina] = row;\n    });\n\n    return oeeData;\n  } catch (error) {\n    console.error('‚ùå Erro ao obter dados OEE OF:', error);\n    return {};\n  }\n}\n\nasync function getProductionData(ofCodes: string[]): Promise<{ [key: string]: any }> {\n  if (!ofCodes.length) return {};\n\n  try {\n    const codesStr = ofCodes.map(code => `'${code.replace(/'/g, \"''\")}'`).join(',');\n    \n    const sql = `\n      SELECT \n        ho.cod_of,\n        SUM(hp.unidades_ok) as cantok,\n        SUM(hp.unidades_nok) as cantnok,\n        SUM(hp.unidades_repro) as cant_rw,\n        MIN(hp.Fecha_ini) as inicio,\n        SUM(CAST(DATEDIFF(SECOND, hp.fecha_ini, hp.fecha_fin) AS BIGINT)) as tiempo_prod\n      FROM his_prod hp\n      INNER JOIN his_fase hf ON hp.id_his_fase = hf.id_his_fase\n      INNER JOIN his_of ho ON hf.id_his_of = ho.id_his_of\n      INNER JOIN cfg_maquina cm ON hp.Id_maquina = cm.id_maquina\n      WHERE ho.cod_of IN (${codesStr}) \n      AND ho.cod_of LIKE '%SEC%'\n      AND (hp.unidades_ok + hp.unidades_nok + hp.unidades_repro) > 0\n      GROUP BY ho.cod_of\n    `;\n\n    const result = await executeQuery<any>(sql, undefined, 'mapex');\n    const productionData: { [key: string]: any } = {};\n\n    result.forEach((row: any) => {\n      productionData[row.cod_of] = row;\n    });\n\n    return productionData;\n  } catch (error) {\n    console.error('‚ùå Erro ao obter dados de produ√ß√£o:', error);\n    return {};\n  }\n}\n\nasync function getLastProductionData(machineIds: number[]): Promise<{ [key: string]: string }> {\n  if (!machineIds.length) return {};\n\n  try {\n    const idsStr = machineIds.map(id => `'${id}'`).join(',');\n    \n    const sql = `\n      SELECT \n        Id_maquina,\n        MAX(Fecha_fin) as ult_fecha\n      FROM his_prod\n      WHERE id_actividad = 2 \n      AND Id_maquina IN (${idsStr})\n      GROUP BY Id_maquina\n    `;\n\n    const result = await executeQuery<any>(sql, undefined, 'mapex');\n    const lastProductionData: { [key: string]: string } = {};\n\n    result.forEach((row: any) => {\n      lastProductionData[row.Id_maquina] = row.ult_fecha;\n    });\n\n    return lastProductionData;\n  } catch (error) {\n    console.error('‚ùå Erro ao obter √∫ltima data de produ√ß√£o:', error);\n    return {};\n  }\n}\n\nasync function processMachineStatus(\n  machine: any,\n  oeeTurnoData: { [key: string]: any },\n  oeeOFData: { [key: string]: any },\n  productionData: { [key: string]: any },\n  lastProductionData: { [key: string]: string }\n): Promise<IMachineStatus | null> {\n  try {\n    // Obter dados das consultas em lote\n    const oeeTurno = oeeTurnoData[machine.Cod_maquina] || { oee: 0, rend: 0 };\n    const oeeOF = oeeOFData[machine.Cod_maquina] || { oee_of: 0, rend_of: 0 };\n    const production = productionData[machine.Rt_Cod_of] || { cantok: 0, cantnok: 0, cant_rw: 0, tiempo_prod: 0 };\n    const startDate = production?.inicio || null;\n    const lastProduction = lastProductionData[machine.id_maquina];\n\n    // Calcular tempo desde √∫ltima produ√ß√£o\n    let hoursSinceLastProduction = 0;\n    if (lastProduction) {\n      const lastDate = new Date(lastProduction);\n      const now = new Date();\n      const diffMs = now.getTime() - lastDate.getTime();\n      hoursSinceLastProduction = diffMs / (1000 * 60 * 60);\n    }\n\n    // Calcular tempo restante\n    const totalProduced = production.cantok;\n    const remainingPieces = machine.Rt_Unidades_planning - totalProduced;\n    let remainingTime = 'N/A';\n    let estimatedFinish: string | undefined;\n\n    if (production.cantok + production.cantnok + production.cant_rw > 0 && remainingPieces > 0) {\n      const timePerPiece = production.tiempo_prod / (production.cantok + production.cantnok + production.cant_rw);\n      const remainingSeconds = remainingPieces * timePerPiece;\n      const remainingHours = remainingSeconds / 3600;\n      remainingTime = remainingHours.toFixed(1) + 'h';\n      estimatedFinish = new Date(Date.now() + remainingSeconds * 1000).toISOString().slice(0, 19).replace('T', ' ');\n    }\n\n    // Determinar status da m√°quina\n    let status: IMachineStatus['status'] = 'INACTIVA';\n    let downtime: string | undefined;\n\n    if (machine.rt_desc_paro === \"PAUSA\") {\n      status = 'PARADA';\n      downtime = \"PAUSA\";\n    } else if (machine.rt_desc_paro === \"SIN OPERARIO\") {\n      status = 'PARADA';\n      downtime = \"SIN OPERARIO\";\n    } else {\n      switch (machine.rt_id_actividad) {\n        case 2:\n          status = 'PRODUCIENDO';\n          break;\n        case 1:\n          status = 'INACTIVA';\n          break;\n        case 3:\n        case 5:\n        case 11:\n        case 20:\n        case 21:\n          status = 'ACTIVA';\n          break;\n        default:\n          status = 'INACTIVA';\n      }\n    }\n\n    // Calcular efici√™ncia (progresso)\n    const progress = machine.Rt_Unidades_planning > 0\n      ? Math.round((totalProduced / machine.Rt_Unidades_planning) * 100)\n      : 0;\n\n    // Formatar dados do operador\n    let operator = machine.Rt_Desc_operario;\n    let operatorFull = machine.Rt_Desc_operario;\n    if (operator && operator.includes(',')) {\n      operator = operator.split(',')[0] + \" + \" + (operator.split(',').length - 1);\n    }\n\n    // Calcular dados de produ√ß√£o OF\n    const productionOF: ProductionOFData = {\n      ok: production.cantok,\n      nok: production.cantnok,\n      rw: production.cant_rw,\n      total: production.cantok + production.cantnok + production.cant_rw,\n      progress,\n      remainingPieces: remainingPieces,\n      remainingTime: remainingTime || 'N/A',\n      startDate: startDate ? String(startDate).slice(0, 19).replace('T', ' ') : undefined,\n      estimatedFinish\n    };\n\n    // Calcular dados de velocidade\n    const velocity: VelocityData = {\n      current: machine.f_velocidad,\n      nominal: machine.Rt_Rendimientonominal1,\n      ratio: machine.Rt_Rendimientonominal1 > 0 ? machine.f_velocidad / machine.Rt_Rendimientonominal1 : 0\n    };\n\n    // Dados do produto\n    const product: ProductData = {\n      code: machine.codigo_producto || '',\n      description: machine.Rt_Desc_producto || ''\n    };\n\n    // Dados da ordem\n    const order: OrderData = {\n      code: machine.Rt_Cod_of,\n      shift: machine.rt_desc_turno || ''\n    };\n\n    return {\n      machine: {\n        Cod_maquina: machine.Cod_maquina,\n        desc_maquina: machine.desc_maquina,\n        id_maquina: machine.id_maquina,\n        Rt_Cod_of: machine.Rt_Cod_of,\n        rt_Cod_producto: machine.rt_Cod_producto,\n        rt_id_actividad: machine.rt_id_actividad,\n        rt_id_paro: machine.rt_id_paro,\n        Rt_Desc_producto: machine.Rt_Desc_producto,\n        Rt_Unidades_planning: machine.Rt_Unidades_planning,\n        Rt_Desc_actividad: machine.Rt_Desc_actividad,\n        Rt_Desc_operario: machine.Rt_Desc_operario,\n        Rt_Unidades_ok: machine.Rt_Unidades_ok,\n        Rt_Unidades_nok: machine.Rt_Unidades_nok,\n        f_velocidad: machine.f_velocidad,\n        Rt_Rendimientonominal1: machine.Rt_Rendimientonominal1,\n        rt_desc_paro: machine.rt_desc_paro,\n        codigo_producto: machine.codigo_producto,\n        rt_dia_productivo: machine.rt_dia_productivo,\n        rt_desc_turno: machine.rt_desc_turno,\n        activo: true\n      } as Machine,\n      status,\n      efficiency: oeeTurno.rend || oeeOF.rend_of || 0,\n      oee: oeeTurno.oee || oeeOF.oee_of || 0,\n      oeeBreakdown: null,\n      production: {\n        ok: production.cantok,\n        nok: production.cantnok,\n        rw: production.cant_rw,\n        total: production.cantok + production.cantnok + production.cant_rw\n      },\n      productionOF,\n      velocity,\n      currentOF: machine.Rt_Cod_of !== '--' ? machine.Rt_Cod_of : undefined,\n      operator: operator || undefined,\n      operatorFull: operatorFull || undefined,\n      downtime,\n      product,\n      order\n    };\n\n  } catch (error) {\n    console.error(`‚ùå Erro ao processar m√°quina ${machine.Cod_maquina}:`, error);\n    return null;\n  }\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 762, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/src/app/api/scada/machines/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { MachineStatus } from '../../../../../types/machine';\nimport { getMachinesStatus } from '../../../../../lib/data-processor';\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('üîç Iniciando busca de m√°quinas (pipeline consolidado)...');\n    const machineStatuses: MachineStatus[] = await getMachinesStatus();\n\n    return NextResponse.json({\n      success: true,\n      data: machineStatuses,\n      count: machineStatuses.length,\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('‚ùå Erro ao buscar m√°quinas:', error);\n\n    return NextResponse.json({\n      success: false,\n      error: 'Erro ao conectar com banco de dados',\n      message: error instanceof Error ? error.message : 'Erro desconhecido',\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  }\n}"],"names":[],"mappings":";;;;AAAA;AAEA;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,kBAAmC,MAAM,IAAA,wKAAiB;QAEhE,OAAO,yKAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;YACN,OAAO,gBAAgB,MAAM;YAC7B,WAAW,IAAI,OAAO,WAAW;QACnC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAE5C,OAAO,yKAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;YAClD,WAAW,IAAI,OAAO,WAAW;QACnC,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF","debugId":null}}]
}