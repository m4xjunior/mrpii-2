{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/src/app/api/scada/production/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport fs from 'fs/promises';\nimport path from 'path';\n\ninterface ProductionData {\n  machineId: string;\n  machineName: string;\n  ok: number;\n  nok: number;\n  rw: number;\n  total: number;\n  efficiency: number;\n  timestamp: string;\n  operator?: string;\n  shift?: string;\n}\n\ninterface ProductionSummary {\n  totalOk: number;\n  totalNok: number;\n  totalRw: number;\n  totalProduction: number;\n  averageEfficiency: number;\n  machines: ProductionData[];\n  timestamp: string;\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    console.log('üîç Buscando datos de producci√≥n...');\n\n    // Simular datos de producci√≥n (en producci√≥n vendr√≠a de la BD)\n    const productionData = await getProductionData();\n\n    // Guardar datos en JSON para hist√≥rico\n    await saveProductionData(productionData);\n\n    return NextResponse.json({\n      success: true,\n      data: productionData,\n      summary: calculateSummary(productionData),\n      timestamp: new Date().toISOString()\n    });\n\n  } catch (error) {\n    console.error('‚ùå Error al buscar datos de producci√≥n:', error);\n\n    return NextResponse.json({\n      success: false,\n      error: 'Error al conectar con banco de datos',\n      message: error instanceof Error ? error.message : 'Error desconocido',\n      timestamp: new Date().toISOString()\n    }, { status: 500 });\n  }\n}\n\nasync function getProductionData(): Promise<ProductionData[]> {\n  // Simular datos de producci√≥n (reemplazar con consulta real a BD)\n  const machines = [\n    { id: 'DOBL01', name: 'Dobladora 01', baseOk: 8500, baseNok: 45, baseRw: 12 },\n    { id: 'DOBL02', name: 'Dobladora 02', baseOk: 9200, baseNok: 38, baseRw: 8 },\n    { id: 'SOLD01', name: 'Soldadura 01', baseOk: 7800, baseNok: 52, baseRw: 15 },\n    { id: 'SOLD02', name: 'Soldadura 02', baseOk: 8100, baseNok: 41, baseRw: 11 },\n    { id: 'TROQ01', name: 'Troqueladora 01', baseOk: 7600, baseNok: 35, baseRw: 9 },\n    { id: 'TERM01', name: 'Terminaci√≥n 01', baseOk: 8900, baseNok: 47, baseRw: 13 },\n  ];\n\n  const now = new Date();\n  const currentHour = now.getHours();\n  const currentMinute = now.getMinutes();\n\n  // Simular variaci√≥n por minuto\n  const minuteVariation = Math.sin((currentHour * 60 + currentMinute) / 100) * 100;\n\n  return machines.map(machine => ({\n    machineId: machine.id,\n    machineName: machine.name,\n    ok: Math.floor(machine.baseOk + minuteVariation + Math.random() * 50),\n    nok: Math.floor(machine.baseNok + Math.random() * 10),\n    rw: Math.floor(machine.baseRw + Math.random() * 5),\n    total: 0, // Se calcular√° en el summary\n    efficiency: Math.round(85 + Math.random() * 15),\n    timestamp: now.toISOString(),\n    operator: `Operador ${Math.floor(Math.random() * 10) + 1}`,\n    shift: currentHour < 14 ? 'Ma√±ana' : currentHour < 22 ? 'Tarde' : 'Noche'\n  }));\n}\n\nasync function saveProductionData(data: ProductionData[]): Promise<void> {\n  try {\n    const dataDir = path.join(process.cwd(), 'data', 'production');\n    const fileName = `${new Date().toISOString().split('T')[0]}.json`;\n\n    // Crear directorio si no existe\n    await fs.mkdir(dataDir, { recursive: true });\n\n    // Leer datos existentes\n    let existingData: ProductionData[] = [];\n    try {\n      const existingFile = await fs.readFile(path.join(dataDir, fileName), 'utf-8');\n      existingData = JSON.parse(existingFile);\n    } catch (error) {\n      // El archivo no existe, se crear√° uno nuevo\n    }\n\n    // Agregar nuevos datos\n    existingData.push(...data);\n\n    // Guardar archivo\n    await fs.writeFile(\n      path.join(dataDir, fileName),\n      JSON.stringify(existingData, null, 2),\n      'utf-8'\n    );\n\n    console.log('üíæ Datos de producci√≥n guardados en:', path.join(dataDir, fileName));\n  } catch (error) {\n    console.error('‚ùå Error al guardar datos de producci√≥n:', error);\n  }\n}\n\nfunction calculateSummary(data: ProductionData[]): ProductionSummary {\n  const totalOk = data.reduce((sum, item) => sum + item.ok, 0);\n  const totalNok = data.reduce((sum, item) => sum + item.nok, 0);\n  const totalRw = data.reduce((sum, item) => sum + item.rw, 0);\n  const totalProduction = totalOk + totalNok + totalRw;\n  const averageEfficiency = data.reduce((sum, item) => sum + item.efficiency, 0) / data.length;\n\n  // Actualizar totales en cada m√°quina\n  data.forEach(item => {\n    item.total = item.ok + item.nok + item.rw;\n  });\n\n  return {\n    totalOk,\n    totalNok,\n    totalRw,\n    totalProduction,\n    averageEfficiency: Math.round(averageEfficiency * 100) / 100,\n    machines: data,\n    timestamp: new Date().toISOString()\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}