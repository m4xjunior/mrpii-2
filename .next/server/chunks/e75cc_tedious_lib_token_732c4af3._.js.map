{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/token.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Token = exports.TYPE = exports.SSPIToken = exports.RowToken = exports.RoutingEnvChangeToken = exports.RollbackTransactionEnvChangeToken = exports.ReturnValueToken = exports.ReturnStatusToken = exports.ResetConnectionEnvChangeToken = exports.PacketSizeEnvChangeToken = exports.OrderToken = exports.NBCRowToken = exports.LoginAckToken = exports.LanguageEnvChangeToken = exports.InfoMessageToken = exports.FedAuthInfoToken = exports.FeatureExtAckToken = exports.ErrorMessageToken = exports.DoneToken = exports.DoneProcToken = exports.DoneInProcToken = exports.DatabaseMirroringPartnerEnvChangeToken = exports.DatabaseEnvChangeToken = exports.CommitTransactionEnvChangeToken = exports.CollationChangeToken = exports.ColMetadataToken = exports.CharsetEnvChangeToken = exports.BeginTransactionEnvChangeToken = void 0;\nconst TYPE = exports.TYPE = {\n  ALTMETADATA: 0x88,\n  ALTROW: 0xD3,\n  COLMETADATA: 0x81,\n  COLINFO: 0xA5,\n  DONE: 0xFD,\n  DONEPROC: 0xFE,\n  DONEINPROC: 0xFF,\n  ENVCHANGE: 0xE3,\n  ERROR: 0xAA,\n  FEATUREEXTACK: 0xAE,\n  FEDAUTHINFO: 0xEE,\n  INFO: 0xAB,\n  LOGINACK: 0xAD,\n  NBCROW: 0xD2,\n  OFFSET: 0x78,\n  ORDER: 0xA9,\n  RETURNSTATUS: 0x79,\n  RETURNVALUE: 0xAC,\n  ROW: 0xD1,\n  SSPI: 0xED,\n  TABNAME: 0xA4\n};\nclass Token {\n  constructor(name, handlerName) {\n    this.name = name;\n    this.handlerName = handlerName;\n  }\n}\nexports.Token = Token;\nclass ColMetadataToken extends Token {\n  constructor(columns) {\n    super('COLMETADATA', 'onColMetadata');\n    this.columns = columns;\n  }\n}\nexports.ColMetadataToken = ColMetadataToken;\nclass DoneToken extends Token {\n  constructor({\n    more,\n    sqlError,\n    attention,\n    serverError,\n    rowCount,\n    curCmd\n  }) {\n    super('DONE', 'onDone');\n    this.more = more;\n    this.sqlError = sqlError;\n    this.attention = attention;\n    this.serverError = serverError;\n    this.rowCount = rowCount;\n    this.curCmd = curCmd;\n  }\n}\nexports.DoneToken = DoneToken;\nclass DoneInProcToken extends Token {\n  constructor({\n    more,\n    sqlError,\n    attention,\n    serverError,\n    rowCount,\n    curCmd\n  }) {\n    super('DONEINPROC', 'onDoneInProc');\n    this.more = more;\n    this.sqlError = sqlError;\n    this.attention = attention;\n    this.serverError = serverError;\n    this.rowCount = rowCount;\n    this.curCmd = curCmd;\n  }\n}\nexports.DoneInProcToken = DoneInProcToken;\nclass DoneProcToken extends Token {\n  constructor({\n    more,\n    sqlError,\n    attention,\n    serverError,\n    rowCount,\n    curCmd\n  }) {\n    super('DONEPROC', 'onDoneProc');\n    this.more = more;\n    this.sqlError = sqlError;\n    this.attention = attention;\n    this.serverError = serverError;\n    this.rowCount = rowCount;\n    this.curCmd = curCmd;\n  }\n}\nexports.DoneProcToken = DoneProcToken;\nclass DatabaseEnvChangeToken extends Token {\n  constructor(newValue, oldValue) {\n    super('ENVCHANGE', 'onDatabaseChange');\n    this.type = 'DATABASE';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\nexports.DatabaseEnvChangeToken = DatabaseEnvChangeToken;\nclass LanguageEnvChangeToken extends Token {\n  constructor(newValue, oldValue) {\n    super('ENVCHANGE', 'onLanguageChange');\n    this.type = 'LANGUAGE';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\nexports.LanguageEnvChangeToken = LanguageEnvChangeToken;\nclass CharsetEnvChangeToken extends Token {\n  constructor(newValue, oldValue) {\n    super('ENVCHANGE', 'onCharsetChange');\n    this.type = 'CHARSET';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\nexports.CharsetEnvChangeToken = CharsetEnvChangeToken;\nclass PacketSizeEnvChangeToken extends Token {\n  constructor(newValue, oldValue) {\n    super('ENVCHANGE', 'onPacketSizeChange');\n    this.type = 'PACKET_SIZE';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\nexports.PacketSizeEnvChangeToken = PacketSizeEnvChangeToken;\nclass BeginTransactionEnvChangeToken extends Token {\n  constructor(newValue, oldValue) {\n    super('ENVCHANGE', 'onBeginTransaction');\n    this.type = 'BEGIN_TXN';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\nexports.BeginTransactionEnvChangeToken = BeginTransactionEnvChangeToken;\nclass CommitTransactionEnvChangeToken extends Token {\n  constructor(newValue, oldValue) {\n    super('ENVCHANGE', 'onCommitTransaction');\n    this.type = 'COMMIT_TXN';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\nexports.CommitTransactionEnvChangeToken = CommitTransactionEnvChangeToken;\nclass RollbackTransactionEnvChangeToken extends Token {\n  constructor(newValue, oldValue) {\n    super('ENVCHANGE', 'onRollbackTransaction');\n    this.type = 'ROLLBACK_TXN';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\nexports.RollbackTransactionEnvChangeToken = RollbackTransactionEnvChangeToken;\nclass DatabaseMirroringPartnerEnvChangeToken extends Token {\n  constructor(newValue, oldValue) {\n    super('ENVCHANGE', 'onDatabaseMirroringPartner');\n    this.type = 'DATABASE_MIRRORING_PARTNER';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\nexports.DatabaseMirroringPartnerEnvChangeToken = DatabaseMirroringPartnerEnvChangeToken;\nclass ResetConnectionEnvChangeToken extends Token {\n  constructor(newValue, oldValue) {\n    super('ENVCHANGE', 'onResetConnection');\n    this.type = 'RESET_CONNECTION';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\nexports.ResetConnectionEnvChangeToken = ResetConnectionEnvChangeToken;\nclass CollationChangeToken extends Token {\n  constructor(newValue, oldValue) {\n    super('ENVCHANGE', 'onSqlCollationChange');\n    this.type = 'SQL_COLLATION';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\nexports.CollationChangeToken = CollationChangeToken;\nclass RoutingEnvChangeToken extends Token {\n  constructor(newValue, oldValue) {\n    super('ENVCHANGE', 'onRoutingChange');\n    this.type = 'ROUTING_CHANGE';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\nexports.RoutingEnvChangeToken = RoutingEnvChangeToken;\nclass FeatureExtAckToken extends Token {\n  /** Value of UTF8_SUPPORT acknowledgement.\n   *\n   * undefined when UTF8_SUPPORT not included in token. */\n\n  constructor(fedAuth, utf8Support) {\n    super('FEATUREEXTACK', 'onFeatureExtAck');\n    this.fedAuth = fedAuth;\n    this.utf8Support = utf8Support;\n  }\n}\nexports.FeatureExtAckToken = FeatureExtAckToken;\nclass FedAuthInfoToken extends Token {\n  constructor(spn, stsurl) {\n    super('FEDAUTHINFO', 'onFedAuthInfo');\n    this.spn = spn;\n    this.stsurl = stsurl;\n  }\n}\nexports.FedAuthInfoToken = FedAuthInfoToken;\nclass InfoMessageToken extends Token {\n  constructor({\n    number,\n    state,\n    class: clazz,\n    message,\n    serverName,\n    procName,\n    lineNumber\n  }) {\n    super('INFO', 'onInfoMessage');\n    this.number = number;\n    this.state = state;\n    this.class = clazz;\n    this.message = message;\n    this.serverName = serverName;\n    this.procName = procName;\n    this.lineNumber = lineNumber;\n  }\n}\nexports.InfoMessageToken = InfoMessageToken;\nclass ErrorMessageToken extends Token {\n  constructor({\n    number,\n    state,\n    class: clazz,\n    message,\n    serverName,\n    procName,\n    lineNumber\n  }) {\n    super('ERROR', 'onErrorMessage');\n    this.number = number;\n    this.state = state;\n    this.class = clazz;\n    this.message = message;\n    this.serverName = serverName;\n    this.procName = procName;\n    this.lineNumber = lineNumber;\n  }\n}\nexports.ErrorMessageToken = ErrorMessageToken;\nclass LoginAckToken extends Token {\n  constructor({\n    interface: interfaze,\n    tdsVersion,\n    progName,\n    progVersion\n  }) {\n    super('LOGINACK', 'onLoginAck');\n    this.interface = interfaze;\n    this.tdsVersion = tdsVersion;\n    this.progName = progName;\n    this.progVersion = progVersion;\n  }\n}\nexports.LoginAckToken = LoginAckToken;\nclass NBCRowToken extends Token {\n  constructor(columns) {\n    super('NBCROW', 'onRow');\n    this.columns = columns;\n  }\n}\nexports.NBCRowToken = NBCRowToken;\nclass OrderToken extends Token {\n  constructor(orderColumns) {\n    super('ORDER', 'onOrder');\n    this.orderColumns = orderColumns;\n  }\n}\nexports.OrderToken = OrderToken;\nclass ReturnStatusToken extends Token {\n  constructor(value) {\n    super('RETURNSTATUS', 'onReturnStatus');\n    this.value = value;\n  }\n}\nexports.ReturnStatusToken = ReturnStatusToken;\nclass ReturnValueToken extends Token {\n  constructor({\n    paramOrdinal,\n    paramName,\n    metadata,\n    value\n  }) {\n    super('RETURNVALUE', 'onReturnValue');\n    this.paramOrdinal = paramOrdinal;\n    this.paramName = paramName;\n    this.metadata = metadata;\n    this.value = value;\n  }\n}\nexports.ReturnValueToken = ReturnValueToken;\nclass RowToken extends Token {\n  constructor(columns) {\n    super('ROW', 'onRow');\n    this.columns = columns;\n  }\n}\nexports.RowToken = RowToken;\nclass SSPIToken extends Token {\n  constructor(ntlmpacket, ntlmpacketBuffer) {\n    super('SSPICHALLENGE', 'onSSPI');\n    this.ntlmpacket = ntlmpacket;\n    this.ntlmpacketBuffer = ntlmpacketBuffer;\n  }\n}\nexports.SSPIToken = SSPIToken;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/helpers.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Result = exports.NotEnoughDataError = void 0;\nexports.readBVarByte = readBVarByte;\nexports.readBVarChar = readBVarChar;\nexports.readBigInt64LE = readBigInt64LE;\nexports.readBigUInt64LE = readBigUInt64LE;\nexports.readDoubleLE = readDoubleLE;\nexports.readFloatLE = readFloatLE;\nexports.readInt16LE = readInt16LE;\nexports.readInt32LE = readInt32LE;\nexports.readUInt16LE = readUInt16LE;\nexports.readUInt24LE = readUInt24LE;\nexports.readUInt32BE = readUInt32BE;\nexports.readUInt32LE = readUInt32LE;\nexports.readUInt40LE = readUInt40LE;\nexports.readUInt8 = readUInt8;\nexports.readUNumeric128LE = readUNumeric128LE;\nexports.readUNumeric64LE = readUNumeric64LE;\nexports.readUNumeric96LE = readUNumeric96LE;\nexports.readUsVarByte = readUsVarByte;\nexports.readUsVarChar = readUsVarChar;\nclass Result {\n  constructor(value, offset) {\n    this.value = value;\n    this.offset = offset;\n  }\n}\nexports.Result = Result;\nclass NotEnoughDataError extends Error {\n  byteCount;\n  constructor(byteCount) {\n    super();\n    this.byteCount = byteCount;\n  }\n}\nexports.NotEnoughDataError = NotEnoughDataError;\nfunction readUInt8(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 1) {\n    throw new NotEnoughDataError(offset + 1);\n  }\n  return new Result(buf.readUInt8(offset), offset + 1);\n}\nfunction readUInt16LE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 2) {\n    throw new NotEnoughDataError(offset + 2);\n  }\n  return new Result(buf.readUInt16LE(offset), offset + 2);\n}\nfunction readInt16LE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 2) {\n    throw new NotEnoughDataError(offset + 2);\n  }\n  return new Result(buf.readInt16LE(offset), offset + 2);\n}\nfunction readUInt24LE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 3) {\n    throw new NotEnoughDataError(offset + 3);\n  }\n  return new Result(buf.readUIntLE(offset, 3), offset + 3);\n}\nfunction readUInt32LE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 4) {\n    throw new NotEnoughDataError(offset + 4);\n  }\n  return new Result(buf.readUInt32LE(offset), offset + 4);\n}\nfunction readUInt32BE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 4) {\n    throw new NotEnoughDataError(offset + 4);\n  }\n  return new Result(buf.readUInt32BE(offset), offset + 4);\n}\nfunction readUInt40LE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 5) {\n    throw new NotEnoughDataError(offset + 5);\n  }\n  return new Result(buf.readUIntLE(offset, 5), offset + 5);\n}\nfunction readInt32LE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 4) {\n    throw new NotEnoughDataError(offset + 4);\n  }\n  return new Result(buf.readInt32LE(offset), offset + 4);\n}\nfunction readBigUInt64LE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 8) {\n    throw new NotEnoughDataError(offset + 8);\n  }\n  return new Result(buf.readBigUInt64LE(offset), offset + 8);\n}\nfunction readBigInt64LE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 8) {\n    throw new NotEnoughDataError(offset + 8);\n  }\n  return new Result(buf.readBigInt64LE(offset), offset + 8);\n}\nfunction readFloatLE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 4) {\n    throw new NotEnoughDataError(offset + 4);\n  }\n  return new Result(buf.readFloatLE(offset), offset + 4);\n}\nfunction readDoubleLE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 8) {\n    throw new NotEnoughDataError(offset + 8);\n  }\n  return new Result(buf.readDoubleLE(offset), offset + 8);\n}\nfunction readBVarChar(buf, offset) {\n  offset = +offset;\n  let charCount;\n  ({\n    offset,\n    value: charCount\n  } = readUInt8(buf, offset));\n  const byteLength = charCount * 2;\n  if (buf.length < offset + byteLength) {\n    throw new NotEnoughDataError(offset + byteLength);\n  }\n  return new Result(buf.toString('ucs2', offset, offset + byteLength), offset + byteLength);\n}\nfunction readBVarByte(buf, offset) {\n  offset = +offset;\n  let byteLength;\n  ({\n    offset,\n    value: byteLength\n  } = readUInt8(buf, offset));\n  if (buf.length < offset + byteLength) {\n    throw new NotEnoughDataError(offset + byteLength);\n  }\n  return new Result(buf.slice(offset, offset + byteLength), offset + byteLength);\n}\nfunction readUsVarChar(buf, offset) {\n  offset = +offset;\n  let charCount;\n  ({\n    offset,\n    value: charCount\n  } = readUInt16LE(buf, offset));\n  const byteLength = charCount * 2;\n  if (buf.length < offset + byteLength) {\n    throw new NotEnoughDataError(offset + byteLength);\n  }\n  return new Result(buf.toString('ucs2', offset, offset + byteLength), offset + byteLength);\n}\nfunction readUsVarByte(buf, offset) {\n  offset = +offset;\n  let byteLength;\n  ({\n    offset,\n    value: byteLength\n  } = readUInt16LE(buf, offset));\n  if (buf.length < offset + byteLength) {\n    throw new NotEnoughDataError(offset + byteLength);\n  }\n  return new Result(buf.slice(offset, offset + byteLength), offset + byteLength);\n}\nfunction readUNumeric64LE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 8) {\n    throw new NotEnoughDataError(offset + 8);\n  }\n  const low = buf.readUInt32LE(offset);\n  const high = buf.readUInt32LE(offset + 4);\n  return new Result(0x100000000 * high + low, offset + 8);\n}\nfunction readUNumeric96LE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 12) {\n    throw new NotEnoughDataError(offset + 12);\n  }\n  const dword1 = buf.readUInt32LE(offset);\n  const dword2 = buf.readUInt32LE(offset + 4);\n  const dword3 = buf.readUInt32LE(offset + 8);\n  return new Result(dword1 + 0x100000000 * dword2 + 0x100000000 * 0x100000000 * dword3, offset + 12);\n}\nfunction readUNumeric128LE(buf, offset) {\n  offset = +offset;\n  if (buf.length < offset + 16) {\n    throw new NotEnoughDataError(offset + 16);\n  }\n  const dword1 = buf.readUInt32LE(offset);\n  const dword2 = buf.readUInt32LE(offset + 4);\n  const dword3 = buf.readUInt32LE(offset + 8);\n  const dword4 = buf.readUInt32LE(offset + 12);\n  return new Result(dword1 + 0x100000000 * dword2 + 0x100000000 * 0x100000000 * dword3 + 0x100000000 * 0x100000000 * 0x100000000 * dword4, offset + 16);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 478, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/colmetadata-token-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _metadataParser = require(\"../metadata-parser\");\nvar _token = require(\"./token\");\nvar _helpers = require(\"./helpers\");\nfunction readTableName(buf, offset, metadata, options) {\n  if (!metadata.type.hasTableName) {\n    return new _helpers.Result(undefined, offset);\n  }\n  if (options.tdsVersion < '7_2') {\n    return (0, _helpers.readUsVarChar)(buf, offset);\n  }\n  let numberOfTableNameParts;\n  ({\n    offset,\n    value: numberOfTableNameParts\n  } = (0, _helpers.readUInt8)(buf, offset));\n  const tableName = [];\n  for (let i = 0; i < numberOfTableNameParts; i++) {\n    let tableNamePart;\n    ({\n      offset,\n      value: tableNamePart\n    } = (0, _helpers.readUsVarChar)(buf, offset));\n    tableName.push(tableNamePart);\n  }\n  return new _helpers.Result(tableName, offset);\n}\nfunction readColumnName(buf, offset, index, metadata, options) {\n  let colName;\n  ({\n    offset,\n    value: colName\n  } = (0, _helpers.readBVarChar)(buf, offset));\n  if (options.columnNameReplacer) {\n    return new _helpers.Result(options.columnNameReplacer(colName, index, metadata), offset);\n  } else if (options.camelCaseColumns) {\n    return new _helpers.Result(colName.replace(/^[A-Z]/, function (s) {\n      return s.toLowerCase();\n    }), offset);\n  } else {\n    return new _helpers.Result(colName, offset);\n  }\n}\nfunction readColumn(buf, offset, options, index) {\n  let metadata;\n  ({\n    offset,\n    value: metadata\n  } = (0, _metadataParser.readMetadata)(buf, offset, options));\n  let tableName;\n  ({\n    offset,\n    value: tableName\n  } = readTableName(buf, offset, metadata, options));\n  let colName;\n  ({\n    offset,\n    value: colName\n  } = readColumnName(buf, offset, index, metadata, options));\n  return new _helpers.Result({\n    userType: metadata.userType,\n    flags: metadata.flags,\n    type: metadata.type,\n    collation: metadata.collation,\n    precision: metadata.precision,\n    scale: metadata.scale,\n    udtInfo: metadata.udtInfo,\n    dataLength: metadata.dataLength,\n    schema: metadata.schema,\n    colName: colName,\n    tableName: tableName\n  }, offset);\n}\nasync function colMetadataParser(parser) {\n  let columnCount;\n  while (true) {\n    let offset;\n    try {\n      ({\n        offset,\n        value: columnCount\n      } = (0, _helpers.readUInt16LE)(parser.buffer, parser.position));\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        await parser.waitForChunk();\n        continue;\n      }\n      throw err;\n    }\n    parser.position = offset;\n    break;\n  }\n  const columns = [];\n  for (let i = 0; i < columnCount; i++) {\n    while (true) {\n      let column;\n      let offset;\n      try {\n        ({\n          offset,\n          value: column\n        } = readColumn(parser.buffer, parser.position, parser.options, i));\n      } catch (err) {\n        if (err instanceof _helpers.NotEnoughDataError) {\n          await parser.waitForChunk();\n          continue;\n        }\n        throw err;\n      }\n      parser.position = offset;\n      columns.push(column);\n      break;\n    }\n  }\n  return new _token.ColMetadataToken(columns);\n}\nvar _default = exports.default = colMetadataParser;\nmodule.exports = colMetadataParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 579, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/done-token-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doneInProcParser = doneInProcParser;\nexports.doneParser = doneParser;\nexports.doneProcParser = doneProcParser;\nvar _token = require(\"./token\");\nvar _helpers = require(\"./helpers\");\n// s2.2.7.5/6/7\n\nconst STATUS = {\n  MORE: 0x0001,\n  ERROR: 0x0002,\n  // This bit is not yet in use by SQL Server, so is not exposed in the returned token\n  INXACT: 0x0004,\n  COUNT: 0x0010,\n  ATTN: 0x0020,\n  SRVERROR: 0x0100\n};\nfunction readToken(buf, offset, options) {\n  let status;\n  ({\n    offset,\n    value: status\n  } = (0, _helpers.readUInt16LE)(buf, offset));\n  const more = !!(status & STATUS.MORE);\n  const sqlError = !!(status & STATUS.ERROR);\n  const rowCountValid = !!(status & STATUS.COUNT);\n  const attention = !!(status & STATUS.ATTN);\n  const serverError = !!(status & STATUS.SRVERROR);\n  let curCmd;\n  ({\n    offset,\n    value: curCmd\n  } = (0, _helpers.readUInt16LE)(buf, offset));\n  let rowCount;\n  ({\n    offset,\n    value: rowCount\n  } = (options.tdsVersion < '7_2' ? _helpers.readUInt32LE : _helpers.readBigUInt64LE)(buf, offset));\n  return new _helpers.Result({\n    more: more,\n    sqlError: sqlError,\n    attention: attention,\n    serverError: serverError,\n    rowCount: rowCountValid ? Number(rowCount) : undefined,\n    curCmd: curCmd\n  }, offset);\n}\nfunction doneParser(buf, offset, options) {\n  let value;\n  ({\n    offset,\n    value\n  } = readToken(buf, offset, options));\n  return new _helpers.Result(new _token.DoneToken(value), offset);\n}\nfunction doneInProcParser(buf, offset, options) {\n  let value;\n  ({\n    offset,\n    value\n  } = readToken(buf, offset, options));\n  return new _helpers.Result(new _token.DoneInProcToken(value), offset);\n}\nfunction doneProcParser(buf, offset, options) {\n  let value;\n  ({\n    offset,\n    value\n  } = readToken(buf, offset, options));\n  return new _helpers.Result(new _token.DoneProcToken(value), offset);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9rZW4iLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJTVEFUVVMiLCJNT1JFIiwiRVJST1IiLCJJTlhBQ1QiLCJDT1VOVCIsIkFUVE4iLCJTUlZFUlJPUiIsInJlYWRUb2tlbiIsImJ1ZiIsIm9mZnNldCIsIm9wdGlvbnMiLCJzdGF0dXMiLCJ2YWx1ZSIsInJlYWRVSW50MTZMRSIsIm1vcmUiLCJzcWxFcnJvciIsInJvd0NvdW50VmFsaWQiLCJhdHRlbnRpb24iLCJzZXJ2ZXJFcnJvciIsImN1ckNtZCIsInJvd0NvdW50IiwidGRzVmVyc2lvbiIsInJlYWRVSW50MzJMRSIsInJlYWRCaWdVSW50NjRMRSIsIlJlc3VsdCIsIk51bWJlciIsInVuZGVmaW5lZCIsImRvbmVQYXJzZXIiLCJEb25lVG9rZW4iLCJkb25lSW5Qcm9jUGFyc2VyIiwiRG9uZUluUHJvY1Rva2VuIiwiZG9uZVByb2NQYXJzZXIiLCJEb25lUHJvY1Rva2VuIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rva2VuL2RvbmUtdG9rZW4tcGFyc2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHR5cGUgUGFyc2VyT3B0aW9ucyB9IGZyb20gJy4vc3RyZWFtLXBhcnNlcic7XG5pbXBvcnQgeyBEb25lVG9rZW4sIERvbmVJblByb2NUb2tlbiwgRG9uZVByb2NUb2tlbiB9IGZyb20gJy4vdG9rZW4nO1xuaW1wb3J0IHsgUmVzdWx0LCByZWFkQmlnVUludDY0TEUsIHJlYWRVSW50MTZMRSwgcmVhZFVJbnQzMkxFIH0gZnJvbSAnLi9oZWxwZXJzJztcblxuLy8gczIuMi43LjUvNi83XG5cbmNvbnN0IFNUQVRVUyA9IHtcbiAgTU9SRTogMHgwMDAxLFxuICBFUlJPUjogMHgwMDAyLFxuICAvLyBUaGlzIGJpdCBpcyBub3QgeWV0IGluIHVzZSBieSBTUUwgU2VydmVyLCBzbyBpcyBub3QgZXhwb3NlZCBpbiB0aGUgcmV0dXJuZWQgdG9rZW5cbiAgSU5YQUNUOiAweDAwMDQsXG4gIENPVU5UOiAweDAwMTAsXG4gIEFUVE46IDB4MDAyMCxcbiAgU1JWRVJST1I6IDB4MDEwMFxufTtcblxuaW50ZXJmYWNlIFRva2VuRGF0YSB7XG4gIG1vcmU6IGJvb2xlYW47XG4gIHNxbEVycm9yOiBib29sZWFuO1xuICBhdHRlbnRpb246IGJvb2xlYW47XG4gIHNlcnZlckVycm9yOiBib29sZWFuO1xuICByb3dDb3VudDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBjdXJDbWQ6IG51bWJlcjtcbn1cblxuZnVuY3Rpb24gcmVhZFRva2VuKGJ1ZjogQnVmZmVyLCBvZmZzZXQ6IG51bWJlciwgb3B0aW9uczogUGFyc2VyT3B0aW9ucyk6IFJlc3VsdDxUb2tlbkRhdGE+IHtcbiAgbGV0IHN0YXR1cztcbiAgKHsgb2Zmc2V0LCB2YWx1ZTogc3RhdHVzIH0gPSByZWFkVUludDE2TEUoYnVmLCBvZmZzZXQpKTtcblxuICBjb25zdCBtb3JlID0gISEoc3RhdHVzICYgU1RBVFVTLk1PUkUpO1xuICBjb25zdCBzcWxFcnJvciA9ICEhKHN0YXR1cyAmIFNUQVRVUy5FUlJPUik7XG4gIGNvbnN0IHJvd0NvdW50VmFsaWQgPSAhIShzdGF0dXMgJiBTVEFUVVMuQ09VTlQpO1xuICBjb25zdCBhdHRlbnRpb24gPSAhIShzdGF0dXMgJiBTVEFUVVMuQVRUTik7XG4gIGNvbnN0IHNlcnZlckVycm9yID0gISEoc3RhdHVzICYgU1RBVFVTLlNSVkVSUk9SKTtcblxuICBsZXQgY3VyQ21kO1xuICAoeyBvZmZzZXQsIHZhbHVlOiBjdXJDbWQgfSA9IHJlYWRVSW50MTZMRShidWYsIG9mZnNldCkpO1xuXG4gIGxldCByb3dDb3VudDtcbiAgKHsgb2Zmc2V0LCB2YWx1ZTogcm93Q291bnQgfSA9IChvcHRpb25zLnRkc1ZlcnNpb24gPCAnN18yJyA/IHJlYWRVSW50MzJMRSA6IHJlYWRCaWdVSW50NjRMRSkoYnVmLCBvZmZzZXQpKTtcblxuICByZXR1cm4gbmV3IFJlc3VsdCh7XG4gICAgbW9yZTogbW9yZSxcbiAgICBzcWxFcnJvcjogc3FsRXJyb3IsXG4gICAgYXR0ZW50aW9uOiBhdHRlbnRpb24sXG4gICAgc2VydmVyRXJyb3I6IHNlcnZlckVycm9yLFxuICAgIHJvd0NvdW50OiByb3dDb3VudFZhbGlkID8gTnVtYmVyKHJvd0NvdW50KSA6IHVuZGVmaW5lZCxcbiAgICBjdXJDbWQ6IGN1ckNtZFxuICB9LCBvZmZzZXQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZG9uZVBhcnNlcihidWY6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIsIG9wdGlvbnM6IFBhcnNlck9wdGlvbnMpOiBSZXN1bHQ8RG9uZVRva2VuPiB7XG4gIGxldCB2YWx1ZTtcbiAgKHsgb2Zmc2V0LCB2YWx1ZSB9ID0gcmVhZFRva2VuKGJ1Ziwgb2Zmc2V0LCBvcHRpb25zKSk7XG4gIHJldHVybiBuZXcgUmVzdWx0KG5ldyBEb25lVG9rZW4odmFsdWUpLCBvZmZzZXQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZG9uZUluUHJvY1BhcnNlcihidWY6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIsIG9wdGlvbnM6IFBhcnNlck9wdGlvbnMpOiBSZXN1bHQ8RG9uZUluUHJvY1Rva2VuPiB7XG4gIGxldCB2YWx1ZTtcbiAgKHsgb2Zmc2V0LCB2YWx1ZSB9ID0gcmVhZFRva2VuKGJ1Ziwgb2Zmc2V0LCBvcHRpb25zKSk7XG4gIHJldHVybiBuZXcgUmVzdWx0KG5ldyBEb25lSW5Qcm9jVG9rZW4odmFsdWUpLCBvZmZzZXQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZG9uZVByb2NQYXJzZXIoYnVmOiBCdWZmZXIsIG9mZnNldDogbnVtYmVyLCBvcHRpb25zOiBQYXJzZXJPcHRpb25zKTogUmVzdWx0PERvbmVQcm9jVG9rZW4+IHtcbiAgbGV0IHZhbHVlO1xuICAoeyBvZmZzZXQsIHZhbHVlIH0gPSByZWFkVG9rZW4oYnVmLCBvZmZzZXQsIG9wdGlvbnMpKTtcbiAgcmV0dXJuIG5ldyBSZXN1bHQobmV3IERvbmVQcm9jVG9rZW4odmFsdWUpLCBvZmZzZXQpO1xufVxuIl0sIm1hcHBpbmdzIjoi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"],"names":[],"mappings":"AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,gBAAgB,GAAG;AAC3B,QAAQ,UAAU,GAAG;AACrB,QAAQ,cAAc,GAAG;AACzB,IAAI;AACJ,IAAI;AACJ,eAAe;AAEf,MAAM,SAAS;IACb,MAAM;IACN,OAAO;IACP,oFAAoF;IACpF,QAAQ;IACR,OAAO;IACP,MAAM;IACN,UAAU;AACZ;AACA,SAAS,UAAU,GAAG,EAAE,MAAM,EAAE,OAAO;IACrC,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,MAAM,EACd,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;IAC3C,MAAM,OAAO,CAAC,CAAC,CAAC,SAAS,OAAO,IAAI;IACpC,MAAM,WAAW,CAAC,CAAC,CAAC,SAAS,OAAO,KAAK;IACzC,MAAM,gBAAgB,CAAC,CAAC,CAAC,SAAS,OAAO,KAAK;IAC9C,MAAM,YAAY,CAAC,CAAC,CAAC,SAAS,OAAO,IAAI;IACzC,MAAM,cAAc,CAAC,CAAC,CAAC,SAAS,OAAO,QAAQ;IAC/C,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,MAAM,EACd,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;IAC3C,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,QAAQ,EAChB,GAAG,CAAC,QAAQ,UAAU,GAAG,QAAQ,SAAS,YAAY,GAAG,SAAS,eAAe,EAAE,KAAK,OAAO;IAChG,OAAO,IAAI,SAAS,MAAM,CAAC;QACzB,MAAM;QACN,UAAU;QACV,WAAW;QACX,aAAa;QACb,UAAU,gBAAgB,OAAO,YAAY;QAC7C,QAAQ;IACV,GAAG;AACL;AACA,SAAS,WAAW,GAAG,EAAE,MAAM,EAAE,OAAO;IACtC,IAAI;IACJ,CAAC,EACC,MAAM,EACN,KAAK,EACN,GAAG,UAAU,KAAK,QAAQ,QAAQ;IACnC,OAAO,IAAI,SAAS,MAAM,CAAC,IAAI,OAAO,SAAS,CAAC,QAAQ;AAC1D;AACA,SAAS,iBAAiB,GAAG,EAAE,MAAM,EAAE,OAAO;IAC5C,IAAI;IACJ,CAAC,EACC,MAAM,EACN,KAAK,EACN,GAAG,UAAU,KAAK,QAAQ,QAAQ;IACnC,OAAO,IAAI,SAAS,MAAM,CAAC,IAAI,OAAO,eAAe,CAAC,QAAQ;AAChE;AACA,SAAS,eAAe,GAAG,EAAE,MAAM,EAAE,OAAO;IAC1C,IAAI;IACJ,CAAC,EACC,MAAM,EACN,KAAK,EACN,GAAG,UAAU,KAAK,QAAQ,QAAQ;IACnC,OAAO,IAAI,SAAS,MAAM,CAAC,IAAI,OAAO,aAAa,CAAC,QAAQ;AAC9D,EACA,4lMAA4lM","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 637, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/env-change-token-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _collation = require(\"../collation\");\nvar _token = require(\"./token\");\nvar _helpers = require(\"./helpers\");\nconst types = {\n  1: {\n    name: 'DATABASE',\n    event: 'databaseChange'\n  },\n  2: {\n    name: 'LANGUAGE',\n    event: 'languageChange'\n  },\n  3: {\n    name: 'CHARSET',\n    event: 'charsetChange'\n  },\n  4: {\n    name: 'PACKET_SIZE',\n    event: 'packetSizeChange'\n  },\n  7: {\n    name: 'SQL_COLLATION',\n    event: 'sqlCollationChange'\n  },\n  8: {\n    name: 'BEGIN_TXN',\n    event: 'beginTransaction'\n  },\n  9: {\n    name: 'COMMIT_TXN',\n    event: 'commitTransaction'\n  },\n  10: {\n    name: 'ROLLBACK_TXN',\n    event: 'rollbackTransaction'\n  },\n  13: {\n    name: 'DATABASE_MIRRORING_PARTNER',\n    event: 'partnerNode'\n  },\n  17: {\n    name: 'TXN_ENDED'\n  },\n  18: {\n    name: 'RESET_CONNECTION',\n    event: 'resetConnection'\n  },\n  20: {\n    name: 'ROUTING_CHANGE',\n    event: 'routingChange'\n  }\n};\nfunction _readNewAndOldValue(buf, offset, length, type) {\n  switch (type.name) {\n    case 'DATABASE':\n    case 'LANGUAGE':\n    case 'CHARSET':\n    case 'PACKET_SIZE':\n    case 'DATABASE_MIRRORING_PARTNER':\n      {\n        let newValue;\n        ({\n          offset,\n          value: newValue\n        } = (0, _helpers.readBVarChar)(buf, offset));\n        let oldValue;\n        ({\n          offset,\n          value: oldValue\n        } = (0, _helpers.readBVarChar)(buf, offset));\n        switch (type.name) {\n          case 'PACKET_SIZE':\n            return new _helpers.Result(new _token.PacketSizeEnvChangeToken(parseInt(newValue), parseInt(oldValue)), offset);\n          case 'DATABASE':\n            return new _helpers.Result(new _token.DatabaseEnvChangeToken(newValue, oldValue), offset);\n          case 'LANGUAGE':\n            return new _helpers.Result(new _token.LanguageEnvChangeToken(newValue, oldValue), offset);\n          case 'CHARSET':\n            return new _helpers.Result(new _token.CharsetEnvChangeToken(newValue, oldValue), offset);\n          case 'DATABASE_MIRRORING_PARTNER':\n            return new _helpers.Result(new _token.DatabaseMirroringPartnerEnvChangeToken(newValue, oldValue), offset);\n        }\n        throw new Error('unreachable');\n      }\n    case 'SQL_COLLATION':\n    case 'BEGIN_TXN':\n    case 'COMMIT_TXN':\n    case 'ROLLBACK_TXN':\n    case 'RESET_CONNECTION':\n      {\n        let newValue;\n        ({\n          offset,\n          value: newValue\n        } = (0, _helpers.readBVarByte)(buf, offset));\n        let oldValue;\n        ({\n          offset,\n          value: oldValue\n        } = (0, _helpers.readBVarByte)(buf, offset));\n        switch (type.name) {\n          case 'SQL_COLLATION':\n            {\n              const newCollation = newValue.length ? _collation.Collation.fromBuffer(newValue) : undefined;\n              const oldCollation = oldValue.length ? _collation.Collation.fromBuffer(oldValue) : undefined;\n              return new _helpers.Result(new _token.CollationChangeToken(newCollation, oldCollation), offset);\n            }\n          case 'BEGIN_TXN':\n            return new _helpers.Result(new _token.BeginTransactionEnvChangeToken(newValue, oldValue), offset);\n          case 'COMMIT_TXN':\n            return new _helpers.Result(new _token.CommitTransactionEnvChangeToken(newValue, oldValue), offset);\n          case 'ROLLBACK_TXN':\n            return new _helpers.Result(new _token.RollbackTransactionEnvChangeToken(newValue, oldValue), offset);\n          case 'RESET_CONNECTION':\n            return new _helpers.Result(new _token.ResetConnectionEnvChangeToken(newValue, oldValue), offset);\n        }\n        throw new Error('unreachable');\n      }\n    case 'ROUTING_CHANGE':\n      {\n        let routePacket;\n        ({\n          offset,\n          value: routePacket\n        } = (0, _helpers.readUsVarByte)(buf, offset));\n        let oldValue;\n        ({\n          offset,\n          value: oldValue\n        } = (0, _helpers.readUsVarByte)(buf, offset));\n\n        // Routing Change:\n        // Byte 1: Protocol (must be 0)\n        // Bytes 2-3 (USHORT): Port number\n        // Bytes 4-5 (USHORT): Length of server data in unicode (2byte chars)\n        // Bytes 6-*: Server name in unicode characters\n        const protocol = routePacket.readUInt8(0);\n        if (protocol !== 0) {\n          throw new Error('Unknown protocol byte in routing change event');\n        }\n        const port = routePacket.readUInt16LE(1);\n        const serverLen = routePacket.readUInt16LE(3);\n        // 2 bytes per char, starting at offset 5\n        const server = routePacket.toString('ucs2', 5, 5 + serverLen * 2);\n        const newValue = {\n          protocol: protocol,\n          port: port,\n          server: server\n        };\n        return new _helpers.Result(new _token.RoutingEnvChangeToken(newValue, oldValue), offset);\n      }\n    default:\n      {\n        console.error('Tedious > Unsupported ENVCHANGE type ' + type.name);\n\n        // skip unknown bytes\n        return new _helpers.Result(undefined, offset + length - 1);\n      }\n  }\n}\nfunction envChangeParser(buf, offset, _options) {\n  let tokenLength;\n  ({\n    offset,\n    value: tokenLength\n  } = (0, _helpers.readUInt16LE)(buf, offset));\n  if (buf.length < offset + tokenLength) {\n    throw new _helpers.NotEnoughDataError(offset + tokenLength);\n  }\n  let typeNumber;\n  ({\n    offset,\n    value: typeNumber\n  } = (0, _helpers.readUInt8)(buf, offset));\n  const type = types[typeNumber];\n  if (!type) {\n    console.error('Tedious > Unsupported ENVCHANGE type ' + typeNumber);\n    return new _helpers.Result(undefined, offset + tokenLength - 1);\n  }\n  return _readNewAndOldValue(buf, offset, tokenLength, type);\n}\nvar _default = exports.default = envChangeParser;\nmodule.exports = envChangeParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 802, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/infoerror-token-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.errorParser = errorParser;\nexports.infoParser = infoParser;\nvar _helpers = require(\"./helpers\");\nvar _token = require(\"./token\");\nfunction readToken(buf, offset, options) {\n  let tokenLength;\n  ({\n    offset,\n    value: tokenLength\n  } = (0, _helpers.readUInt16LE)(buf, offset));\n  if (buf.length < tokenLength + offset) {\n    throw new _helpers.NotEnoughDataError(tokenLength + offset);\n  }\n  let number;\n  ({\n    offset,\n    value: number\n  } = (0, _helpers.readUInt32LE)(buf, offset));\n  let state;\n  ({\n    offset,\n    value: state\n  } = (0, _helpers.readUInt8)(buf, offset));\n  let clazz;\n  ({\n    offset,\n    value: clazz\n  } = (0, _helpers.readUInt8)(buf, offset));\n  let message;\n  ({\n    offset,\n    value: message\n  } = (0, _helpers.readUsVarChar)(buf, offset));\n  let serverName;\n  ({\n    offset,\n    value: serverName\n  } = (0, _helpers.readBVarChar)(buf, offset));\n  let procName;\n  ({\n    offset,\n    value: procName\n  } = (0, _helpers.readBVarChar)(buf, offset));\n  let lineNumber;\n  ({\n    offset,\n    value: lineNumber\n  } = options.tdsVersion < '7_2' ? (0, _helpers.readUInt16LE)(buf, offset) : (0, _helpers.readUInt32LE)(buf, offset));\n  return new _helpers.Result({\n    'number': number,\n    'state': state,\n    'class': clazz,\n    'message': message,\n    'serverName': serverName,\n    'procName': procName,\n    'lineNumber': lineNumber\n  }, offset);\n}\nfunction infoParser(buf, offset, options) {\n  let data;\n  ({\n    offset,\n    value: data\n  } = readToken(buf, offset, options));\n  return new _helpers.Result(new _token.InfoMessageToken(data), offset);\n}\nfunction errorParser(buf, offset, options) {\n  let data;\n  ({\n    offset,\n    value: data\n  } = readToken(buf, offset, options));\n  return new _helpers.Result(new _token.ErrorMessageToken(data), offset);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaGVscGVycyIsInJlcXVpcmUiLCJfdG9rZW4iLCJyZWFkVG9rZW4iLCJidWYiLCJvZmZzZXQiLCJvcHRpb25zIiwidG9rZW5MZW5ndGgiLCJ2YWx1ZSIsInJlYWRVSW50MTZMRSIsImxlbmd0aCIsIk5vdEVub3VnaERhdGFFcnJvciIsIm51bWJlciIsInJlYWRVSW50MzJMRSIsInN0YXRlIiwicmVhZFVJbnQ4IiwiY2xhenoiLCJtZXNzYWdlIiwicmVhZFVzVmFyQ2hhciIsInNlcnZlck5hbWUiLCJyZWFkQlZhckNoYXIiLCJwcm9jTmFtZSIsImxpbmVOdW1iZXIiLCJ0ZHNWZXJzaW9uIiwiUmVzdWx0IiwiaW5mb1BhcnNlciIsImRhdGEiLCJJbmZvTWVzc2FnZVRva2VuIiwiZXJyb3JQYXJzZXIiLCJFcnJvck1lc3NhZ2VUb2tlbiJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90b2tlbi9pbmZvZXJyb3ItdG9rZW4tcGFyc2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vdEVub3VnaERhdGFFcnJvciwgcmVhZEJWYXJDaGFyLCByZWFkVUludDE2TEUsIHJlYWRVSW50MzJMRSwgcmVhZFVJbnQ4LCByZWFkVXNWYXJDaGFyLCBSZXN1bHQgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgdHlwZSBQYXJzZXJPcHRpb25zIH0gZnJvbSAnLi9zdHJlYW0tcGFyc2VyJztcblxuaW1wb3J0IHsgSW5mb01lc3NhZ2VUb2tlbiwgRXJyb3JNZXNzYWdlVG9rZW4gfSBmcm9tICcuL3Rva2VuJztcblxuaW50ZXJmYWNlIFRva2VuRGF0YSB7XG4gIG51bWJlcjogbnVtYmVyO1xuICBzdGF0ZTogbnVtYmVyO1xuICBjbGFzczogbnVtYmVyO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHNlcnZlck5hbWU6IHN0cmluZztcbiAgcHJvY05hbWU6IHN0cmluZztcbiAgbGluZU51bWJlcjogbnVtYmVyO1xufVxuXG5mdW5jdGlvbiByZWFkVG9rZW4oYnVmOiBCdWZmZXIsIG9mZnNldDogbnVtYmVyLCBvcHRpb25zOiBQYXJzZXJPcHRpb25zKTogUmVzdWx0PFRva2VuRGF0YT4ge1xuICBsZXQgdG9rZW5MZW5ndGg7XG4gICh7IG9mZnNldCwgdmFsdWU6IHRva2VuTGVuZ3RoIH0gPSByZWFkVUludDE2TEUoYnVmLCBvZmZzZXQpKTtcblxuICBpZiAoYnVmLmxlbmd0aCA8IHRva2VuTGVuZ3RoICsgb2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IE5vdEVub3VnaERhdGFFcnJvcih0b2tlbkxlbmd0aCArIG9mZnNldCk7XG4gIH1cblxuICBsZXQgbnVtYmVyO1xuICAoeyBvZmZzZXQsIHZhbHVlOiBudW1iZXIgfSA9IHJlYWRVSW50MzJMRShidWYsIG9mZnNldCkpO1xuXG4gIGxldCBzdGF0ZTtcbiAgKHsgb2Zmc2V0LCB2YWx1ZTogc3RhdGUgfSA9IHJlYWRVSW50OChidWYsIG9mZnNldCkpO1xuXG4gIGxldCBjbGF6ejtcbiAgKHsgb2Zmc2V0LCB2YWx1ZTogY2xhenogfSA9IHJlYWRVSW50OChidWYsIG9mZnNldCkpO1xuXG4gIGxldCBtZXNzYWdlO1xuICAoeyBvZmZzZXQsIHZhbHVlOiBtZXNzYWdlIH0gPSByZWFkVXNWYXJDaGFyKGJ1Ziwgb2Zmc2V0KSk7XG5cbiAgbGV0IHNlcnZlck5hbWU7XG4gICh7IG9mZnNldCwgdmFsdWU6IHNlcnZlck5hbWUgfSA9IHJlYWRCVmFyQ2hhcihidWYsIG9mZnNldCkpO1xuXG4gIGxldCBwcm9jTmFtZTtcbiAgKHsgb2Zmc2V0LCB2YWx1ZTogcHJvY05hbWUgfSA9IHJlYWRCVmFyQ2hhcihidWYsIG9mZnNldCkpO1xuXG4gIGxldCBsaW5lTnVtYmVyO1xuICAoeyBvZmZzZXQsIHZhbHVlOiBsaW5lTnVtYmVyIH0gPSBvcHRpb25zLnRkc1ZlcnNpb24gPCAnN18yJyA/IHJlYWRVSW50MTZMRShidWYsIG9mZnNldCkgOiByZWFkVUludDMyTEUoYnVmLCBvZmZzZXQpKTtcblxuICByZXR1cm4gbmV3IFJlc3VsdCh7XG4gICAgJ251bWJlcic6IG51bWJlcixcbiAgICAnc3RhdGUnOiBzdGF0ZSxcbiAgICAnY2xhc3MnOiBjbGF6eixcbiAgICAnbWVzc2FnZSc6IG1lc3NhZ2UsXG4gICAgJ3NlcnZlck5hbWUnOiBzZXJ2ZXJOYW1lLFxuICAgICdwcm9jTmFtZSc6IHByb2NOYW1lLFxuICAgICdsaW5lTnVtYmVyJzogbGluZU51bWJlclxuICB9LCBvZmZzZXQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5mb1BhcnNlcihidWY6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIsIG9wdGlvbnM6IFBhcnNlck9wdGlvbnMpOiBSZXN1bHQ8SW5mb01lc3NhZ2VUb2tlbj4ge1xuICBsZXQgZGF0YTtcbiAgKHsgb2Zmc2V0LCB2YWx1ZTogZGF0YSB9ID0gcmVhZFRva2VuKGJ1Ziwgb2Zmc2V0LCBvcHRpb25zKSk7XG5cbiAgcmV0dXJuIG5ldyBSZXN1bHQobmV3IEluZm9NZXNzYWdlVG9rZW4oZGF0YSksIG9mZnNldCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlcnJvclBhcnNlcihidWY6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIsIG9wdGlvbnM6IFBhcnNlck9wdGlvbnMpOiBSZXN1bHQ8RXJyb3JNZXNzYWdlVG9rZW4+IHtcbiAgbGV0IGRhdGE7XG4gICh7IG9mZnNldCwgdmFsdWU6IGRhdGEgfSA9IHJlYWRUb2tlbihidWYsIG9mZnNldCwgb3B0aW9ucykpO1xuXG4gIHJldHVybiBuZXcgUmVzdWx0KG5ldyBFcnJvck1lc3NhZ2VUb2tlbihkYXRhKSwgb2Zmc2V0KTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFFBQUEsR0FBQUMsT0FBQTtBQUdBLElBQUFDLE1BQUEsR0FBQUQsT0FBQTtBQVlBLFNBQVNFLFNBQVNBLENBQUNDLEdBQVcsRUFBRUMsTUFBYyxFQUFFQyxPQUFzQixFQUFxQjtFQUN6RixJQUFJQyxXQUFXO0VBQ2YsQ0FBQztJQUFFRixNQUFNO0lBQUVHLEtBQUssRUFBRUQ7RUFBWSxDQUFDLEdBQUcs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"],"names":[],"mappings":"AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,WAAW,GAAG;AACtB,QAAQ,UAAU,GAAG;AACrB,IAAI;AACJ,IAAI;AACJ,SAAS,UAAU,GAAG,EAAE,MAAM,EAAE,OAAO;IACrC,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,WAAW,EACnB,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;IAC3C,IAAI,IAAI,MAAM,GAAG,cAAc,QAAQ;QACrC,MAAM,IAAI,SAAS,kBAAkB,CAAC,cAAc;IACtD;IACA,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,MAAM,EACd,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;IAC3C,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,KAAK,EACb,GAAG,CAAC,GAAG,SAAS,SAAS,EAAE,KAAK,OAAO;IACxC,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,KAAK,EACb,GAAG,CAAC,GAAG,SAAS,SAAS,EAAE,KAAK,OAAO;IACxC,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,OAAO,EACf,GAAG,CAAC,GAAG,SAAS,aAAa,EAAE,KAAK,OAAO;IAC5C,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,UAAU,EAClB,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;IAC3C,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,QAAQ,EAChB,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;IAC3C,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,UAAU,EAClB,GAAG,QAAQ,UAAU,GAAG,QAAQ,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,UAAU,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;IAClH,OAAO,IAAI,SAAS,MAAM,CAAC;QACzB,UAAU;QACV,SAAS;QACT,SAAS;QACT,WAAW;QACX,cAAc;QACd,YAAY;QACZ,cAAc;IAChB,GAAG;AACL;AACA,SAAS,WAAW,GAAG,EAAE,MAAM,EAAE,OAAO;IACtC,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,IAAI,EACZ,GAAG,UAAU,KAAK,QAAQ,QAAQ;IACnC,OAAO,IAAI,SAAS,MAAM,CAAC,IAAI,OAAO,gBAAgB,CAAC,OAAO;AAChE;AACA,SAAS,YAAY,GAAG,EAAE,MAAM,EAAE,OAAO;IACvC,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,IAAI,EACZ,GAAG,UAAU,KAAK,QAAQ,QAAQ;IACnC,OAAO,IAAI,SAAS,MAAM,CAAC,IAAI,OAAO,iBAAiB,CAAC,OAAO;AACjE,EACA,w0LAAw0L","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 853, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/fedauth-info-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _helpers = require(\"./helpers\");\nvar _token = require(\"./token\");\nconst FEDAUTHINFOID = {\n  STSURL: 0x01,\n  SPN: 0x02\n};\nfunction readFedAuthInfo(data) {\n  let offset = 0;\n  let spn, stsurl;\n  const countOfInfoIDs = data.readUInt32LE(offset);\n  offset += 4;\n  for (let i = 0; i < countOfInfoIDs; i++) {\n    const fedauthInfoID = data.readUInt8(offset);\n    offset += 1;\n    const fedAuthInfoDataLen = data.readUInt32LE(offset);\n    offset += 4;\n    const fedAuthInfoDataOffset = data.readUInt32LE(offset);\n    offset += 4;\n    switch (fedauthInfoID) {\n      case FEDAUTHINFOID.SPN:\n        spn = data.toString('ucs2', fedAuthInfoDataOffset, fedAuthInfoDataOffset + fedAuthInfoDataLen);\n        break;\n      case FEDAUTHINFOID.STSURL:\n        stsurl = data.toString('ucs2', fedAuthInfoDataOffset, fedAuthInfoDataOffset + fedAuthInfoDataLen);\n        break;\n\n      // ignoring unknown fedauthinfo options\n      default:\n        break;\n    }\n  }\n  return {\n    spn,\n    stsurl\n  };\n}\nfunction fedAuthInfoParser(buf, offset, _options) {\n  let tokenLength;\n  ({\n    offset,\n    value: tokenLength\n  } = (0, _helpers.readUInt32LE)(buf, offset));\n  if (buf.length < offset + tokenLength) {\n    throw new _helpers.NotEnoughDataError(offset + tokenLength);\n  }\n  const data = buf.slice(offset, offset + tokenLength);\n  offset += tokenLength;\n  const {\n    spn,\n    stsurl\n  } = readFedAuthInfo(data);\n  return new _helpers.Result(new _token.FedAuthInfoToken(spn, stsurl), offset);\n}\nvar _default = exports.default = fedAuthInfoParser;\nmodule.exports = fedAuthInfoParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaGVscGVycyIsInJlcXVpcmUiLCJfdG9rZW4iLCJGRURBVVRISU5GT0lEIiwiU1RTVVJMIiwiU1BOIiwicmVhZEZlZEF1dGhJbmZvIiwiZGF0YSIsIm9mZnNldCIsInNwbiIsInN0c3VybCIsImNvdW50T2ZJbmZvSURzIiwicmVhZFVJbnQzMkxFIiwiaSIsImZlZGF1dGhJbmZvSUQiLCJyZWFkVUludDgiLCJmZWRBdXRoSW5mb0RhdGFMZW4iLCJmZWRBdXRoSW5mb0RhdGFPZmZzZXQiLCJ0b1N0cmluZyIsImZlZEF1dGhJbmZvUGFyc2VyIiwiYnVmIiwiX29wdGlvbnMiLCJ0b2tlbkxlbmd0aCIsInZhbHVlIiwibGVuZ3RoIiwiTm90RW5vdWdoRGF0YUVycm9yIiwic2xpY2UiLCJSZXN1bHQiLCJGZWRBdXRoSW5mb1Rva2VuIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiZGVmYXVsdCIsIm1vZHVsZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90b2tlbi9mZWRhdXRoLWluZm8tcGFyc2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vdEVub3VnaERhdGFFcnJvciwgcmVhZFVJbnQzMkxFLCBSZXN1bHQgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgdHlwZSBQYXJzZXJPcHRpb25zIH0gZnJvbSAnLi9zdHJlYW0tcGFyc2VyJztcbmltcG9ydCB7IEZlZEF1dGhJbmZvVG9rZW4gfSBmcm9tICcuL3Rva2VuJztcblxuY29uc3QgRkVEQVVUSElORk9JRCA9IHtcbiAgU1RTVVJMOiAweDAxLFxuICBTUE46IDB4MDJcbn07XG5cbmZ1bmN0aW9uIHJlYWRGZWRBdXRoSW5mbyhkYXRhOiBCdWZmZXIpOiB7IHNwbjogc3RyaW5nIHwgdW5kZWZpbmVkLCBzdHN1cmw6IHN0cmluZyB8IHVuZGVmaW5lZCB9IHtcbiAgbGV0IG9mZnNldCA9IDA7XG4gIGxldCBzcG4sIHN0c3VybDtcblxuICBjb25zdCBjb3VudE9mSW5mb0lEcyA9IGRhdGEucmVhZFVJbnQzMkxFKG9mZnNldCk7XG4gIG9mZnNldCArPSA0O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnRPZkluZm9JRHM7IGkrKykge1xuICAgIGNvbnN0IGZlZGF1dGhJbmZvSUQgPSBkYXRhLnJlYWRVSW50OChvZmZzZXQpO1xuICAgIG9mZnNldCArPSAxO1xuXG4gICAgY29uc3QgZmVkQXV0aEluZm9EYXRhTGVuID0gZGF0YS5yZWFkVUludDMyTEUob2Zmc2V0KTtcbiAgICBvZmZzZXQgKz0gNDtcblxuICAgIGNvbnN0IGZlZEF1dGhJbmZvRGF0YU9mZnNldCA9IGRhdGEucmVhZFVJbnQzMkxFKG9mZnNldCk7XG4gICAgb2Zmc2V0ICs9IDQ7XG5cbiAgICBzd2l0Y2ggKGZlZGF1dGhJbmZvSUQpIHtcbiAgICAgIGNhc2UgRkVEQVVUSElORk9JRC5TUE46XG4gICAgICAgIHNwbiA9IGRhdGEudG9TdHJpbmcoJ3VjczInLCBmZWRBdXRoSW5mb0RhdGFPZmZzZXQsIGZlZEF1dGhJbmZvRGF0YU9mZnNldCArIGZlZEF1dGhJbmZvRGF0YUxlbik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEZFREFVVEhJTkZPSUQuU1RTVVJMOlxuICAgICAgICBzdHN1cmwgPSBkYXRhLnRvU3RyaW5nKCd1Y3MyJywgZmVkQXV0aEluZm9EYXRhT2Zmc2V0LCBmZWRBdXRoSW5mb0RhdGFPZmZzZXQgKyBmZWRBdXRoSW5mb0RhdGFMZW4pO1xuICAgICAgICBicmVhaztcblxuICAgICAgLy8gaWdub3JpbmcgdW5rbm93biBmZWRhdXRoaW5mbyBvcHRpb25zXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBzcG4sIHN0c3VybCB9O1xufVxuXG5mdW5jdGlvbiBmZWRBdXRoSW5mb1BhcnNlcihidWY6IEJ1ZmZlciwgb2Zmc2V0OiBudW1iZXIsIF9vcHRpb25zOiBQYXJzZXJPcHRpb25zKTogUmVzdWx0PEZlZEF1dGhJbmZvVG9rZW4+IHtcbiAgbGV0IHRva2VuTGVuZ3RoO1xuICAoeyBvZmZzZXQsIHZhbHVlOiB0b2tlbkxlbmd0aCB9ID0gcmVhZFVJbnQzMkxFKGJ1Ziwgb2Zmc2V0KSk7XG5cbiAgaWYgKGJ1Zi5sZW5ndGggPCBvZmZzZXQgKyB0b2tlbkxlbmd0aCkge1xuICAgIHRocm93IG5ldyBOb3RFbm91Z2hEYXRhRXJyb3Iob2Zmc2V0ICsgdG9rZW5MZW5ndGgpO1xuICB9XG5cbiAgY29uc3QgZGF0YSA9IGJ1Zi5zbGljZShvZmZzZXQsIG9mZnNldCArIHRva2VuTGVuZ3RoKTtcbiAgb2Zmc2V0ICs9IHRva2VuTGVuZ3RoO1xuXG4gIGNvbnN0IHsgc3BuLCBzdHN1cmwgfSA9IHJlYWRGZWRBdXRoSW5mbyhkYXRhKTtcbiAgcmV0dXJuIG5ldyBSZXN1bHQobmV3IEZlZEF1dGhJbmZvVG9rZW4oc3BuLCBzdHN1cmwpLCBvZmZzZXQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmZWRBdXRoSW5mb1BhcnNlcjtcbm1vZHVsZS5leHBvcnRzID0gZmVkQXV0aEluZm9QYXJzZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLFFBQUEsR0FBQUMsT0FBQTtBQUVBLElBQUFDLE1BQUEsR0FBQUQsT0FBQTtBQUVBLE1BQU1FLGFBQWEsR0FBRztFQUNwQkMsTUFBTSxFQUFFLElBQUk7RUFDWkMsR0FBRyxFQUFFO0FBQ1AsQ0FBQztBQUVELFNBQVNDLGVBQWVBLENBQUNDLElBQVksRUFBMkQ7RUFDOUYsSUFBSUMsTUFBTSxHQUFHLENBQUM7RUFDZCxJQUFJQyxHQUFHLEVBQUVDLE1BQU07RUFFZixNQUFNQyxjQUFjLEdBQUdKLElBQUksQ0FBQ0ssWUFBWSxDQUFDSixNQUFNLENBQUM7RUFDaERBLE1BQU0sSUFBSSxDQUFDO0VBRVgsS0FBSyxJQUFJSyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdGLGNBQWMsRUFBRUUsQ0FBQyxFQUFFLEVBQUU7SUFDdkMsTUFBTUMsYUFBYSxHQUFHUCxJQUFJLENBQUNRLFNBQVMsQ0FBQ1AsTUFBTSxDQUFDO0lBQzVDQSxNQUFNLElBQUksQ0FBQztJQUVYLE1BQU1RLGtCQUFrQixHQUFHVCxJQUFJLENBQUNLLFlBQVksQ0FBQ0osTUFBTSxDQUFDO0lBQ3BEQSxNQUFNLElBQUksQ0FBQztJQUVYLE1BQU1TLHFCQUFxQixHQUFHVixJQUFJLENBQUNLLFlBQVksQ0FBQ0osTUFBTSxDQUFDO0lBQ3ZEQSxNQUFNLElBQUksQ0FBQztJQUVYLFFBQVFNLGFBQWE7TUFDbkIsS0FBS1gsYUFBYSxDQUFDRSxHQUFHO1FBQ3BCSSxHQUFHLEdBQUdGLElBQUksQ0FBQ1csUUFBUSxDQUFDLE1BQU0sRUFBRUQscUJBQXFCLEVBQUVBLHFCQUFxQixHQUFHRCxrQkFBa0IsQ0FBQztRQUM5RjtNQUVGLEtBQUtiLGFBQWEsQ0FBQ0MsTUFBTTtRQUN2Qk0sTUFBTSxHQUFHSCxJQUFJLENBQUNXLFFBQVEsQ0FBQyxNQUFNLEVBQUVELHFCQUFxQixFQUFFQSxxQkFBcUIsR0FBR0Qsa0JBQWtCLENBQUM7UUFDakc7O01BRUY7TUFDQTtRQUNFO0lBQ0o7RUFDRjtFQUVBLE9BQU87SUFBRVAsR0FBRztJQUFFQztFQUFPLENBQUM7QUFDeEI7QUFFQSxTQUFTUyxpQkFBaUJBLENBQUNDLEdBQVcsRUFBRVosTUFBYyxFQUFFYSxRQUF1QixFQUE0QjtFQUN6RyxJQUFJQyxXQUFXO0VBQ2YsQ0FBQztJQUFFZCxNQUFNO0lBQUVlLEtBQUssRUFBRUQ7RUFBWSxDQUFDLEdBQUcsSUFBQVYscUJBQVksRUFBQ1EsR0FBRyxFQUFFWixNQUFNLENBQUM7RUFFM0QsSUFBSVksR0FBRyxDQUFDSSxNQUFNLEdBQUdoQixNQUFNLEdBQUdjLFdBQVcsRUFBRTtJQUNyQyxNQUFNLElBQUlHLDJCQUFrQixDQUFDakIsTUFBTSxHQUFHYyxXQUFXLENBQUM7RUFDcEQ7RUFFQSxNQUFNZixJQUFJLEdBQUdhLEdBQUcsQ0FBQ00sS0FBSyxDQUFDbEIsTUFBTSxFQUFFQSxNQUFNLEdBQUdjLFdBQVcsQ0FBQztFQUNwRGQsTUFBTSxJQUFJYyxXQUFXO0VBRXJCLE1BQU07SUFBRWIsR0FBRztJQUFFQztFQUFPLENBQUMsR0FBR0osZUFBZSxDQUFDQyxJQUFJLENBQUM7RUFDN0MsT0FBTyxJQUFJb0IsZUFBTSxDQUFDLElBQUlDLHVCQUFnQixDQUFDbkIsR0FBRyxFQUFFQyxNQUFNLENBQUMsRUFBRUYsTUFBTSxDQUFDO0FBQzlEO0FBQUMsSUFBQXFCLFFBQUEsR0FBQUMsT0FBQSxDQUFBQyxPQUFBLEdBRWNaLGlCQUFpQjtBQUNoQ2EsTUFBTSxDQUFDRixPQUFPLEdBQUdYLGlCQUFpQiJ9"],"names":[],"mappings":"AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,OAAO,GAAG,KAAK;AACvB,IAAI;AACJ,IAAI;AACJ,MAAM,gBAAgB;IACpB,QAAQ;IACR,KAAK;AACP;AACA,SAAS,gBAAgB,IAAI;IAC3B,IAAI,SAAS;IACb,IAAI,KAAK;IACT,MAAM,iBAAiB,KAAK,YAAY,CAAC;IACzC,UAAU;IACV,IAAK,IAAI,IAAI,GAAG,IAAI,gBAAgB,IAAK;QACvC,MAAM,gBAAgB,KAAK,SAAS,CAAC;QACrC,UAAU;QACV,MAAM,qBAAqB,KAAK,YAAY,CAAC;QAC7C,UAAU;QACV,MAAM,wBAAwB,KAAK,YAAY,CAAC;QAChD,UAAU;QACV,OAAQ;YACN,KAAK,cAAc,GAAG;gBACpB,MAAM,KAAK,QAAQ,CAAC,QAAQ,uBAAuB,wBAAwB;gBAC3E;YACF,KAAK,cAAc,MAAM;gBACvB,SAAS,KAAK,QAAQ,CAAC,QAAQ,uBAAuB,wBAAwB;gBAC9E;YAEF,uCAAuC;YACvC;gBACE;QACJ;IACF;IACA,OAAO;QACL;QACA;IACF;AACF;AACA,SAAS,kBAAkB,GAAG,EAAE,MAAM,EAAE,QAAQ;IAC9C,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,WAAW,EACnB,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;IAC3C,IAAI,IAAI,MAAM,GAAG,SAAS,aAAa;QACrC,MAAM,IAAI,SAAS,kBAAkB,CAAC,SAAS;IACjD;IACA,MAAM,OAAO,IAAI,KAAK,CAAC,QAAQ,SAAS;IACxC,UAAU;IACV,MAAM,EACJ,GAAG,EACH,MAAM,EACP,GAAG,gBAAgB;IACpB,OAAO,IAAI,SAAS,MAAM,CAAC,IAAI,OAAO,gBAAgB,CAAC,KAAK,SAAS;AACvE;AACA,IAAI,WAAW,QAAQ,OAAO,GAAG;AACjC,OAAO,OAAO,GAAG,mBACjB,wjKAAwjK","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 909, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/feature-ext-ack-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _helpers = require(\"./helpers\");\nvar _token = require(\"./token\");\nconst FEATURE_ID = {\n  SESSIONRECOVERY: 0x01,\n  FEDAUTH: 0x02,\n  COLUMNENCRYPTION: 0x04,\n  GLOBALTRANSACTIONS: 0x05,\n  AZURESQLSUPPORT: 0x08,\n  UTF8_SUPPORT: 0x0A,\n  TERMINATOR: 0xFF\n};\nfunction featureExtAckParser(buf, offset, _options) {\n  let fedAuth;\n  let utf8Support;\n  while (true) {\n    let featureId;\n    ({\n      value: featureId,\n      offset\n    } = (0, _helpers.readUInt8)(buf, offset));\n    if (featureId === FEATURE_ID.TERMINATOR) {\n      return new _helpers.Result(new _token.FeatureExtAckToken(fedAuth, utf8Support), offset);\n    }\n    let featureAckDataLen;\n    ({\n      value: featureAckDataLen,\n      offset\n    } = (0, _helpers.readUInt32LE)(buf, offset));\n    if (buf.length < offset + featureAckDataLen) {\n      throw new _helpers.NotEnoughDataError(offset + featureAckDataLen);\n    }\n    const featureData = buf.slice(offset, offset + featureAckDataLen);\n    offset += featureAckDataLen;\n    switch (featureId) {\n      case FEATURE_ID.FEDAUTH:\n        fedAuth = featureData;\n        break;\n      case FEATURE_ID.UTF8_SUPPORT:\n        utf8Support = !!featureData[0];\n        break;\n    }\n  }\n}\nvar _default = exports.default = featureExtAckParser;\nmodule.exports = featureExtAckParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaGVscGVycyIsInJlcXVpcmUiLCJfdG9rZW4iLCJGRUFUVVJFX0lEIiwiU0VTU0lPTlJFQ09WRVJZIiwiRkVEQVVUSCIsIkNPTFVNTkVOQ1JZUFRJT04iLCJHTE9CQUxUUkFOU0FDVElPTlMiLCJBWlVSRVNRTFNVUFBPUlQiLCJVVEY4X1NVUFBPUlQiLCJURVJNSU5BVE9SIiwiZmVhdHVyZUV4dEFja1BhcnNlciIsImJ1ZiIsIm9mZnNldCIsIl9vcHRpb25zIiwiZmVkQXV0aCIsInV0ZjhTdXBwb3J0IiwiZmVhdHVyZUlkIiwidmFsdWUiLCJyZWFkVUludDgiLCJSZXN1bHQiLCJGZWF0dXJlRXh0QWNrVG9rZW4iLCJmZWF0dXJlQWNrRGF0YUxlbiIsInJlYWRVSW50MzJMRSIsImxlbmd0aCIsIk5vdEVub3VnaERhdGFFcnJvciIsImZlYXR1cmVEYXRhIiwic2xpY2UiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0IiwibW9kdWxlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rva2VuL2ZlYXR1cmUtZXh0LWFjay1wYXJzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm90RW5vdWdoRGF0YUVycm9yLCByZWFkVUludDMyTEUsIHJlYWRVSW50OCwgUmVzdWx0IH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IHR5cGUgUGFyc2VyT3B0aW9ucyB9IGZyb20gJy4vc3RyZWFtLXBhcnNlcic7XG5cbmltcG9ydCB7IEZlYXR1cmVFeHRBY2tUb2tlbiB9IGZyb20gJy4vdG9rZW4nO1xuXG5jb25zdCBGRUFUVVJFX0lEID0ge1xuICBTRVNTSU9OUkVDT1ZFUlk6IDB4MDEsXG4gIEZFREFVVEg6IDB4MDIsXG4gIENPTFVNTkVOQ1JZUFRJT046IDB4MDQsXG4gIEdMT0JBTFRSQU5TQUNUSU9OUzogMHgwNSxcbiAgQVpVUkVTUUxTVVBQT1JUOiAweDA4LFxuICBVVEY4X1NVUFBPUlQ6IDB4MEEsXG4gIFRFUk1JTkFUT1I6IDB4RkZcbn07XG5cbmZ1bmN0aW9uIGZlYXR1cmVFeHRBY2tQYXJzZXIoYnVmOiBCdWZmZXIsIG9mZnNldDogbnVtYmVyLCBfb3B0aW9uczogUGFyc2VyT3B0aW9ucyk6IFJlc3VsdDxGZWF0dXJlRXh0QWNrVG9rZW4+IHtcbiAgbGV0IGZlZEF1dGg6IEJ1ZmZlciB8IHVuZGVmaW5lZDtcbiAgbGV0IHV0ZjhTdXBwb3J0OiBib29sZWFuIHwgdW5kZWZpbmVkO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgbGV0IGZlYXR1cmVJZDtcbiAgICAoeyB2YWx1ZTogZmVhdHVyZUlkLCBvZmZzZXQgfSA9IHJlYWRVSW50OChidWYsIG9mZnNldCkpO1xuXG4gICAgaWYgKGZlYXR1cmVJZCA9PT0gRkVBVFVSRV9JRC5URVJNSU5BVE9SKSB7XG4gICAgICByZXR1cm4gbmV3IFJlc3VsdChuZXcgRmVhdHVyZUV4dEFja1Rva2VuKGZlZEF1dGgsIHV0ZjhTdXBwb3J0KSwgb2Zmc2V0KTtcbiAgICB9XG5cbiAgICBsZXQgZmVhdHVyZUFja0RhdGFMZW47XG4gICAgKHsgdmFsdWU6IGZlYXR1cmVBY2tEYXRhTGVuLCBvZmZzZXQgfSA9IHJlYWRVSW50MzJMRShidWYsIG9mZnNldCkpO1xuXG4gICAgaWYgKGJ1Zi5sZW5ndGggPCBvZmZzZXQgKyBmZWF0dXJlQWNrRGF0YUxlbikge1xuICAgICAgdGhyb3cgbmV3IE5vdEVub3VnaERhdGFFcnJvcihvZmZzZXQgKyBmZWF0dXJlQWNrRGF0YUxlbik7XG4gICAgfVxuXG4gICAgY29uc3QgZmVhdHVyZURhdGEgPSBidWYuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBmZWF0dXJlQWNrRGF0YUxlbik7XG4gICAgb2Zmc2V0ICs9IGZlYXR1cmVBY2tEYXRhTGVuO1xuXG4gICAgc3dpdGNoIChmZWF0dXJlSWQpIHtcbiAgICAgIGNhc2UgRkVBVFVSRV9JRC5GRURBVVRIOlxuICAgICAgICBmZWRBdXRoID0gZmVhdHVyZURhdGE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBGRUFUVVJFX0lELlVURjhfU1VQUE9SVDpcbiAgICAgICAgdXRmOFN1cHBvcnQgPSAhIWZlYXR1cmVEYXRhWzBdO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZmVhdHVyZUV4dEFja1BhcnNlcjtcbm1vZHVsZS5leHBvcnRzID0gZmVhdHVyZUV4dEFja1BhcnNlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBR0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBRUEsTUFBTUUsVUFBVSxHQUFHO0VBQ2pCQyxlQUFlLEVBQUUsSUFBSTtFQUNyQkMsT0FBTyxFQUFFLElBQUk7RUFDYkMsZ0JBQWdCLEVBQUUsSUFBSTtFQUN0QkMsa0JBQWtCLEVBQUUsSUFBSTtFQUN4QkMsZUFBZSxFQUFFLElBQUk7RUFDckJDLFlBQVksRUFBRSxJQUFJO0VBQ2xCQyxVQUFVLEVBQUU7QUFDZCxDQUFDO0FBRUQsU0FBU0MsbUJBQW1CQSxDQUFDQyxHQUFXLEVBQUVDLE1BQWMsRUFBRUMsUUFBdUIsRUFBOEI7RUFDN0csSUFBSUMsT0FBMkI7RUFDL0IsSUFBSUMsV0FBZ0M7RUFFcEMsT0FBTyxJQUFJLEVBQUU7SUFDWCxJQUFJQyxTQUFTO0lBQ2IsQ0FBQztNQUFFQyxLQUFLLEVBQUVELFNBQVM7TUFBRUo7SUFBTyxDQUFDLEdBQUcsSUFBQU0sa0JBQVMsRUFBQ1AsR0FBRyxFQUFFQyxNQUFNLENBQUM7SUFFdEQsSUFBSUksU0FBUyxLQUFLZCxVQUFVLENBQUNPLFVBQVUsRUFBRTtNQUN2QyxPQUFPLElBQUlVLGVBQU0sQ0FBQyxJQUFJQyx5QkFBa0IsQ0FBQ04sT0FBTyxFQUFFQyxXQUFXLENBQUMsRUFBRUgsTUFBTSxDQUFDO0lBQ3pFO0lBRUEsSUFBSVMsaUJBQWlCO0lBQ3JCLENBQUM7TUFBRUosS0FBSyxFQUFFSSxpQkFBaUI7TUFBRVQ7SUFBTyxDQUFDLEdBQUcsSUFBQVUscUJBQVksRUFBQ1gsR0FBRyxFQUFFQyxNQUFNLENBQUM7SUFFakUsSUFBSUQsR0FBRyxDQUFDWSxNQUFNLEdBQUdYLE1BQU0sR0FBR1MsaUJBQWlCLEVBQUU7TUFDM0MsTUFBTSxJQUFJRywyQkFBa0IsQ0FBQ1osTUFBTSxHQUFHUyxpQkFBaUIsQ0FBQztJQUMxRDtJQUVBLE1BQU1JLFdBQVcsR0FBR2QsR0FBRyxDQUFDZSxLQUFLLENBQUNkLE1BQU0sRUFBRUEsTUFBTSxHQUFHUyxpQkFBaUIsQ0FBQztJQUNqRVQsTUFBTSxJQUFJUyxpQkFBaUI7SUFFM0IsUUFBUUwsU0FBUztNQUNmLEtBQUtkLFVBQVUsQ0FBQ0UsT0FBTztRQUNyQlUsT0FBTyxHQUFHVyxXQUFXO1FBQ3JCO01BQ0YsS0FBS3ZCLFVBQVUsQ0FBQ00sWUFBWTtRQUMxQk8sV0FBVyxHQUFHLENBQUMsQ0FBQ1UsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUM5QjtJQUNKO0VBQ0Y7QUFDRjtBQUFDLElBQUFFLFFBQUEsR0FBQUMsT0FBQSxDQUFBQyxPQUFBLEdBRWNuQixtQkFBbUI7QUFDbENvQixNQUFNLENBQUNGLE9BQU8sR0FBR2xCLG1CQUFtQiJ9"],"names":[],"mappings":"AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,OAAO,GAAG,KAAK;AACvB,IAAI;AACJ,IAAI;AACJ,MAAM,aAAa;IACjB,iBAAiB;IACjB,SAAS;IACT,kBAAkB;IAClB,oBAAoB;IACpB,iBAAiB;IACjB,cAAc;IACd,YAAY;AACd;AACA,SAAS,oBAAoB,GAAG,EAAE,MAAM,EAAE,QAAQ;IAChD,IAAI;IACJ,IAAI;IACJ,MAAO,KAAM;QACX,IAAI;QACJ,CAAC,EACC,OAAO,SAAS,EAChB,MAAM,EACP,GAAG,CAAC,GAAG,SAAS,SAAS,EAAE,KAAK,OAAO;QACxC,IAAI,cAAc,WAAW,UAAU,EAAE;YACvC,OAAO,IAAI,SAAS,MAAM,CAAC,IAAI,OAAO,kBAAkB,CAAC,SAAS,cAAc;QAClF;QACA,IAAI;QACJ,CAAC,EACC,OAAO,iBAAiB,EACxB,MAAM,EACP,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;QAC3C,IAAI,IAAI,MAAM,GAAG,SAAS,mBAAmB;YAC3C,MAAM,IAAI,SAAS,kBAAkB,CAAC,SAAS;QACjD;QACA,MAAM,cAAc,IAAI,KAAK,CAAC,QAAQ,SAAS;QAC/C,UAAU;QACV,OAAQ;YACN,KAAK,WAAW,OAAO;gBACrB,UAAU;gBACV;YACF,KAAK,WAAW,YAAY;gBAC1B,cAAc,CAAC,CAAC,WAAW,CAAC,EAAE;gBAC9B;QACJ;IACF;AACF;AACA,IAAI,WAAW,QAAQ,OAAO,GAAG;AACjC,OAAO,OAAO,GAAG,qBACjB,osIAAosI","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 956, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/loginack-token-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _token = require(\"./token\");\nvar _tdsVersions = require(\"../tds-versions\");\nvar _helpers = require(\"./helpers\");\nconst interfaceTypes = {\n  0: 'SQL_DFLT',\n  1: 'SQL_TSQL'\n};\nfunction loginAckParser(buf, offset, _options) {\n  // length\n  let tokenLength;\n  ({\n    offset,\n    value: tokenLength\n  } = (0, _helpers.readUInt16LE)(buf, offset));\n  if (buf.length < tokenLength + offset) {\n    throw new _helpers.NotEnoughDataError(tokenLength + offset);\n  }\n  let interfaceNumber;\n  ({\n    offset,\n    value: interfaceNumber\n  } = (0, _helpers.readUInt8)(buf, offset));\n  const interfaceType = interfaceTypes[interfaceNumber];\n  let tdsVersionNumber;\n  ({\n    offset,\n    value: tdsVersionNumber\n  } = (0, _helpers.readUInt32BE)(buf, offset));\n  const tdsVersion = _tdsVersions.versionsByValue[tdsVersionNumber];\n  let progName;\n  ({\n    offset,\n    value: progName\n  } = (0, _helpers.readBVarChar)(buf, offset));\n  let major;\n  ({\n    offset,\n    value: major\n  } = (0, _helpers.readUInt8)(buf, offset));\n  let minor;\n  ({\n    offset,\n    value: minor\n  } = (0, _helpers.readUInt8)(buf, offset));\n  let buildNumHi;\n  ({\n    offset,\n    value: buildNumHi\n  } = (0, _helpers.readUInt8)(buf, offset));\n  let buildNumLow;\n  ({\n    offset,\n    value: buildNumLow\n  } = (0, _helpers.readUInt8)(buf, offset));\n  return new _helpers.Result(new _token.LoginAckToken({\n    interface: interfaceType,\n    tdsVersion: tdsVersion,\n    progName: progName,\n    progVersion: {\n      major: major,\n      minor: minor,\n      buildNumHi: buildNumHi,\n      buildNumLow: buildNumLow\n    }\n  }), offset);\n}\nvar _default = exports.default = loginAckParser;\nmodule.exports = loginAckParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9rZW4iLCJyZXF1aXJlIiwiX3Rkc1ZlcnNpb25zIiwiX2hlbHBlcnMiLCJpbnRlcmZhY2VUeXBlcyIsImxvZ2luQWNrUGFyc2VyIiwiYnVmIiwib2Zmc2V0IiwiX29wdGlvbnMiLCJ0b2tlbkxlbmd0aCIsInZhbHVlIiwicmVhZFVJbnQxNkxFIiwibGVuZ3RoIiwiTm90RW5vdWdoRGF0YUVycm9yIiwiaW50ZXJmYWNlTnVtYmVyIiwicmVhZFVJbnQ4IiwiaW50ZXJmYWNlVHlwZSIsInRkc1ZlcnNpb25OdW1iZXIiLCJyZWFkVUludDMyQkUiLCJ0ZHNWZXJzaW9uIiwidmVyc2lvbnMiLCJwcm9nTmFtZSIsInJlYWRCVmFyQ2hhciIsIm1ham9yIiwibWlub3IiLCJidWlsZE51bUhpIiwiYnVpbGROdW1Mb3ciLCJSZXN1bHQiLCJMb2dpbkFja1Rva2VuIiwiaW50ZXJmYWNlIiwicHJvZ1ZlcnNpb24iLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0IiwibW9kdWxlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rva2VuL2xvZ2luYWNrLXRva2VuLXBhcnNlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0eXBlIFBhcnNlck9wdGlvbnMgfSBmcm9tICcuL3N0cmVhbS1wYXJzZXInO1xuXG5pbXBvcnQgeyBMb2dpbkFja1Rva2VuIH0gZnJvbSAnLi90b2tlbic7XG5cbmltcG9ydCB7IHZlcnNpb25zQnlWYWx1ZSBhcyB2ZXJzaW9ucyB9IGZyb20gJy4uL3Rkcy12ZXJzaW9ucyc7XG5pbXBvcnQgeyBOb3RFbm91Z2hEYXRhRXJyb3IsIHJlYWRCVmFyQ2hhciwgcmVhZFVJbnQxNkxFLCByZWFkVUludDMyQkUsIHJlYWRVSW50OCwgUmVzdWx0IH0gZnJvbSAnLi9oZWxwZXJzJztcblxuY29uc3QgaW50ZXJmYWNlVHlwZXM6IHsgW2tleTogbnVtYmVyXTogc3RyaW5nIH0gPSB7XG4gIDA6ICdTUUxfREZMVCcsXG4gIDE6ICdTUUxfVFNRTCdcbn07XG5cbmZ1bmN0aW9uIGxvZ2luQWNrUGFyc2VyKGJ1ZjogQnVmZmVyLCBvZmZzZXQ6IG51bWJlciwgX29wdGlvbnM6IFBhcnNlck9wdGlvbnMpOiBSZXN1bHQ8TG9naW5BY2tUb2tlbj4ge1xuICAvLyBsZW5ndGhcbiAgbGV0IHRva2VuTGVuZ3RoO1xuICAoeyBvZmZzZXQsIHZhbHVlOiB0b2tlbkxlbmd0aCB9ID0gcmVhZFVJbnQxNkxFKGJ1Ziwgb2Zmc2V0KSk7XG5cbiAgaWYgKGJ1Zi5sZW5ndGggPCB0b2tlbkxlbmd0aCArIG9mZnNldCkge1xuICAgIHRocm93IG5ldyBOb3RFbm91Z2hEYXRhRXJyb3IodG9rZW5MZW5ndGggKyBvZmZzZXQpO1xuICB9XG5cbiAgbGV0IGludGVyZmFjZU51bWJlcjtcbiAgKHsgb2Zmc2V0LCB2YWx1ZTogaW50ZXJmYWNlTnVtYmVyIH0gPSByZWFkVUludDgoYnVmLCBvZmZzZXQpKTtcblxuICBjb25zdCBpbnRlcmZhY2VUeXBlID0gaW50ZXJmYWNlVHlwZXNbaW50ZXJmYWNlTnVtYmVyXTtcblxuICBsZXQgdGRzVmVyc2lvbk51bWJlcjtcbiAgKHsgb2Zmc2V0LCB2YWx1ZTogdGRzVmVyc2lvbk51bWJlciB9ID0gcmVhZFVJbnQzMkJFKGJ1Ziwgb2Zmc2V0KSk7XG5cbiAgY29uc3QgdGRzVmVyc2lvbiA9IHZlcnNpb25zW3Rkc1ZlcnNpb25OdW1iZXJdO1xuXG4gIGxldCBwcm9nTmFtZTtcbiAgKHsgb2Zmc2V0LCB2YWx1ZTogcHJvZ05hbWUgfSA9IHJlYWRCVmFyQ2hhcihidWYsIG9mZnNldCkpO1xuXG4gIGxldCBtYWpvcjtcbiAgKHsgb2Zmc2V0LCB2YWx1ZTogbWFqb3IgfSA9IHJlYWRVSW50OChidWYsIG9mZnNldCkpO1xuXG4gIGxldCBtaW5vcjtcbiAgKHsgb2Zmc2V0LCB2YWx1ZTogbWlub3IgfSA9IHJlYWRVSW50OChidWYsIG9mZnNldCkpO1xuXG4gIGxldCBidWlsZE51bUhpO1xuICAoeyBvZmZzZXQsIHZhbHVlOiBidWlsZE51bUhpIH0gPSByZWFkVUludDgoYnVmLCBvZmZzZXQpKTtcblxuICBsZXQgYnVpbGROdW1Mb3c7XG4gICh7IG9mZnNldCwgdmFsdWU6IGJ1aWxkTnVtTG93IH0gPSByZWFkVUludDgoYnVmLCBvZmZzZXQpKTtcblxuICByZXR1cm4gbmV3IFJlc3VsdChuZXcgTG9naW5BY2tUb2tlbih7XG4gICAgaW50ZXJmYWNlOiBpbnRlcmZhY2VUeXBlLFxuICAgIHRkc1ZlcnNpb246IHRkc1ZlcnNpb24sXG4gICAgcHJvZ05hbWU6IHByb2dOYW1lLFxuICAgIHByb2dWZXJzaW9uOiB7XG4gICAgICBtYWpvcjogbWFqb3IsXG4gICAgICBtaW5vcjogbWlub3IsXG4gICAgICBidWlsZE51bUhpOiBidWlsZE51bUhpLFxuICAgICAgYnVpbGROdW1Mb3c6IGJ1aWxkTnVtTG93XG4gICAgfVxuICB9KSwgb2Zmc2V0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbG9naW5BY2tQYXJzZXI7XG5tb2R1bGUuZXhwb3J0cyA9IGxvZ2luQWNrUGFyc2VyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFFQSxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxRQUFBLEdBQUFGLE9BQUE7QUFFQSxNQUFNRyxjQUF5QyxHQUFHO0VBQ2hELENBQUMsRUFBRSxVQUFVO0VBQ2IsQ0FBQyxFQUFFO0FBQ0wsQ0FBQztBQUVELFNBQVNDLGNBQWNBLENBQUNDLEdBQVcsRUFBRUMsTUFBYyxFQUFFQyxRQUF1QixFQUF5QjtFQUNuRztFQUNBLElBQUlDLFdBQVc7RUFDZixDQUFDO0lBQUVGLE1BQU07SUFBRUcsS0FBSyxFQUFFRDtFQUFZLENBQUMsR0FBRyxJQUFBRSxxQkFBWSxFQUFDTCxHQUFHLEVBQUVDLE1BQU0sQ0FBQztFQUUzRCxJQUFJRCxHQUFHLENBQUNNLE1BQU0sR0FBR0gsV0FBVyxHQUFHRixNQUFNLEVBQUU7SUFDckMsTUFBTSxJQUFJTSwyQkFBa0IsQ0FBQ0osV0FBVyxHQUFHRixNQUFNLENBQUM7RUFDcEQ7RUFFQSxJQUFJTyxlQUFlO0VBQ25CLENBQUM7SUFBRVAsTUFBTTtJQUFFRyxLQUFLLEVBQUVJO0VBQWdCLENBQUMsR0FBRyxJQUFBQyxrQkFBUyxFQUFDVCxHQUFHLEVBQUVDLE1BQU0sQ0FBQztFQUU1RCxNQUFNUyxhQUFhLEdBQUdaLGNBQWMsQ0FBQ1UsZUFBZSxDQUFDO0VBRXJELElBQUlHLGdCQUFnQjtFQUNwQixDQUFDO0lBQUVWLE1BQU07SUFBRUcsS0FBSyxFQUFFTztFQUFpQixDQUFDLEdBQUcsSUFBQUMscUJBQVksRUFBQ1osR0FBRyxFQUFFQyxNQUFNLENBQUM7RUFFaEUsTUFBTVksVUFBVSxHQUFHQyw0QkFBUSxDQUFDSCxnQkFBZ0IsQ0FBQztFQUU3QyxJQUFJSSxRQUFRO0VBQ1osQ0FBQztJQUFFZCxNQUFNO0lBQUVHLEtBQUssRUFBRVc7RUFBUyxDQUFDLEdBQUcsSUFBQUMscUJBQVksRUFBQ2hCLEdBQUcsRUFBRUMsTUFBTSxDQUFDO0VBRXhELElBQUlnQixLQUFLO0VBQ1QsQ0FBQztJQUFFaEIsTUFBTTtJQUFFRyxLQUFLLEVBQUVhO0VBQU0sQ0FBQyxHQUFHLElBQUFSLGtCQUFTLEVBQUNULEdBQUcsRUFBRUMsTUFBTSxDQUFDO0VBRWxELElBQUlpQixLQUFLO0VBQ1QsQ0FBQztJQUFFakIsTUFBTTtJQUFFRyxLQUFLLEVBQUVjO0VBQU0sQ0FBQyxHQUFHLElBQUFULGtCQUFTLEVBQUNULEdBQUcsRUFBRUMsTUFBTSxDQUFDO0VBRWxELElBQUlrQixVQUFVO0VBQ2QsQ0FBQztJQUFFbEIsTUFBTTtJQUFFRyxLQUFLLEVBQUVlO0VBQVcsQ0FBQyxHQUFHLElBQUFWLGtCQUFTLEVBQUNULEdBQUcsRUFBRUMsTUFBTSxDQUFDO0VBRXZELElBQUltQixXQUFXO0VBQ2YsQ0FBQztJQUFFbkIsTUFBTTtJQUFFRyxLQUFLLEVBQUVnQjtFQUFZLENBQUMsR0FBRyxJQUFBWCxrQkFBUyxFQUFDVCxHQUFHLEVBQUVDLE1BQU0sQ0FBQztFQUV4RCxPQUFPLElBQUlvQixlQUFNLENBQUMsSUFBSUMsb0JBQWEsQ0FBQztJQUNsQ0MsU0FBUyxFQUFFYixhQUFhO0lBQ3hCRyxVQUFVLEVBQUVBLFVBQVU7SUFDdEJFLFFBQVEsRUFBRUEsUUFBUTtJQUNsQlMsV0FBVyxFQUFFO01BQ1hQLEtBQUssRUFBRUEsS0FBSztNQUNaQyxLQUFLLEVBQUVBLEtBQUs7TUFDWkMsVUFBVSxFQUFFQSxVQUFVO01BQ3RCQyxXQUFXLEVBQUVBO0lBQ2Y7RUFDRixDQUFDLENBQUMsRUFBRW5CLE1BQU0sQ0FBQztBQUNiO0FBQUMsSUFBQXdCLFFBQUEsR0FBQUMsT0FBQSxDQUFBQyxPQUFBLEdBRWM1QixjQUFjO0FBQzdCNkIsTUFBTSxDQUFDRixPQUFPLEdBQUczQixjQUFjIn0="],"names":[],"mappings":"AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,OAAO,GAAG,KAAK;AACvB,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,MAAM,iBAAiB;IACrB,GAAG;IACH,GAAG;AACL;AACA,SAAS,eAAe,GAAG,EAAE,MAAM,EAAE,QAAQ;IAC3C,SAAS;IACT,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,WAAW,EACnB,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;IAC3C,IAAI,IAAI,MAAM,GAAG,cAAc,QAAQ;QACrC,MAAM,IAAI,SAAS,kBAAkB,CAAC,cAAc;IACtD;IACA,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,eAAe,EACvB,GAAG,CAAC,GAAG,SAAS,SAAS,EAAE,KAAK,OAAO;IACxC,MAAM,gBAAgB,cAAc,CAAC,gBAAgB;IACrD,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,gBAAgB,EACxB,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;IAC3C,MAAM,aAAa,aAAa,eAAe,CAAC,iBAAiB;IACjE,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,QAAQ,EAChB,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;IAC3C,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,KAAK,EACb,GAAG,CAAC,GAAG,SAAS,SAAS,EAAE,KAAK,OAAO;IACxC,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,KAAK,EACb,GAAG,CAAC,GAAG,SAAS,SAAS,EAAE,KAAK,OAAO;IACxC,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,UAAU,EAClB,GAAG,CAAC,GAAG,SAAS,SAAS,EAAE,KAAK,OAAO;IACxC,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,WAAW,EACnB,GAAG,CAAC,GAAG,SAAS,SAAS,EAAE,KAAK,OAAO;IACxC,OAAO,IAAI,SAAS,MAAM,CAAC,IAAI,OAAO,aAAa,CAAC;QAClD,WAAW;QACX,YAAY;QACZ,UAAU;QACV,aAAa;YACX,OAAO;YACP,OAAO;YACP,YAAY;YACZ,aAAa;QACf;IACF,IAAI;AACN;AACA,IAAI,WAAW,QAAQ,OAAO,GAAG;AACjC,OAAO,OAAO,GAAG,gBACjB,4qKAA4qK","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1008, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/order-token-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _token = require(\"./token\");\nvar _helpers = require(\"./helpers\");\n// s2.2.7.14\n\nfunction orderParser(buf, offset, _options) {\n  // length\n  let tokenLength;\n  ({\n    offset,\n    value: tokenLength\n  } = (0, _helpers.readUInt16LE)(buf, offset));\n  if (buf.length < offset + tokenLength) {\n    throw new _helpers.NotEnoughDataError(offset + tokenLength);\n  }\n  const orderColumns = [];\n  for (let i = 0; i < tokenLength; i += 2) {\n    let column;\n    ({\n      offset,\n      value: column\n    } = (0, _helpers.readUInt16LE)(buf, offset));\n    orderColumns.push(column);\n  }\n  return new _helpers.Result(new _token.OrderToken(orderColumns), offset);\n}\nvar _default = exports.default = orderParser;\nmodule.exports = orderParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9rZW4iLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJvcmRlclBhcnNlciIsImJ1ZiIsIm9mZnNldCIsIl9vcHRpb25zIiwidG9rZW5MZW5ndGgiLCJ2YWx1ZSIsInJlYWRVSW50MTZMRSIsImxlbmd0aCIsIk5vdEVub3VnaERhdGFFcnJvciIsIm9yZGVyQ29sdW1ucyIsImkiLCJjb2x1bW4iLCJwdXNoIiwiUmVzdWx0IiwiT3JkZXJUb2tlbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiLCJtb2R1bGUiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdG9rZW4vb3JkZXItdG9rZW4tcGFyc2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHMyLjIuNy4xNFxuaW1wb3J0IHsgdHlwZSBQYXJzZXJPcHRpb25zIH0gZnJvbSAnLi9zdHJlYW0tcGFyc2VyJztcblxuaW1wb3J0IHsgT3JkZXJUb2tlbiB9IGZyb20gJy4vdG9rZW4nO1xuaW1wb3J0IHsgTm90RW5vdWdoRGF0YUVycm9yLCByZWFkVUludDE2TEUsIFJlc3VsdCB9IGZyb20gJy4vaGVscGVycyc7XG5cbmZ1bmN0aW9uIG9yZGVyUGFyc2VyKGJ1ZjogQnVmZmVyLCBvZmZzZXQ6IG51bWJlciwgX29wdGlvbnM6IFBhcnNlck9wdGlvbnMpOiBSZXN1bHQ8T3JkZXJUb2tlbj4ge1xuICAvLyBsZW5ndGhcbiAgbGV0IHRva2VuTGVuZ3RoO1xuICAoeyBvZmZzZXQsIHZhbHVlOiB0b2tlbkxlbmd0aCB9ID0gcmVhZFVJbnQxNkxFKGJ1Ziwgb2Zmc2V0KSk7XG5cbiAgaWYgKGJ1Zi5sZW5ndGggPCBvZmZzZXQgKyB0b2tlbkxlbmd0aCkge1xuICAgIHRocm93IG5ldyBOb3RFbm91Z2hEYXRhRXJyb3Iob2Zmc2V0ICsgdG9rZW5MZW5ndGgpO1xuICB9XG5cbiAgY29uc3Qgb3JkZXJDb2x1bW5zOiBudW1iZXJbXSA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5MZW5ndGg7IGkgKz0gMikge1xuICAgIGxldCBjb2x1bW47XG4gICAgKHsgb2Zmc2V0LCB2YWx1ZTogY29sdW1uIH0gPSByZWFkVUludDE2TEUoYnVmLCBvZmZzZXQpKTtcblxuICAgIG9yZGVyQ29sdW1ucy5wdXNoKGNvbHVtbik7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlc3VsdChuZXcgT3JkZXJUb2tlbihvcmRlckNvbHVtbnMpLCBvZmZzZXQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvcmRlclBhcnNlcjtcbm1vZHVsZS5leHBvcnRzID0gb3JkZXJQYXJzZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUdBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUQsT0FBQTtBQUpBOztBQU1BLFNBQVNFLFdBQVdBLENBQUNDLEdBQVcsRUFBRUMsTUFBYyxFQUFFQyxRQUF1QixFQUFzQjtFQUM3RjtFQUNBLElBQUlDLFdBQVc7RUFDZixDQUFDO0lBQUVGLE1BQU07SUFBRUcsS0FBSyxFQUFFRDtFQUFZLENBQUMsR0FBRyxJQUFBRSxxQkFBWSxFQUFDTCxHQUFHLEVBQUVDLE1BQU0sQ0FBQztFQUUzRCxJQUFJRCxHQUFHLENBQUNNLE1BQU0sR0FBR0wsTUFBTSxHQUFHRSxXQUFXLEVBQUU7SUFDckMsTUFBTSxJQUFJSSwyQkFBa0IsQ0FBQ04sTUFBTSxHQUFHRSxXQUFXLENBQUM7RUFDcEQ7RUFFQSxNQUFNSyxZQUFzQixHQUFHLEVBQUU7RUFFakMsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdOLFdBQVcsRUFBRU0sQ0FBQyxJQUFJLENBQUMsRUFBRTtJQUN2QyxJQUFJQyxNQUFNO0lBQ1YsQ0FBQztNQUFFVCxNQUFNO01BQUVHLEtBQUssRUFBRU07SUFBTyxDQUFDLEdBQUcsSUFBQUwscUJBQVksRUFBQ0wsR0FBRyxFQUFFQyxNQUFNLENBQUM7SUFFdERPLFlBQVksQ0FBQ0csSUFBSSxDQUFDRCxNQUFNLENBQUM7RUFDM0I7RUFFQSxPQUFPLElBQUlFLGVBQU0sQ0FBQyxJQUFJQyxpQkFBVSxDQUFDTCxZQUFZLENBQUMsRUFBRVAsTUFBTSxDQUFDO0FBQ3pEO0FBQUMsSUFBQWEsUUFBQSxHQUFBQyxPQUFBLENBQUFDLE9BQUEsR0FFY2pCLFdBQVc7QUFDMUJrQixNQUFNLENBQUNGLE9BQU8sR0FBR2hCLFdBQVcifQ=="],"names":[],"mappings":"AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,OAAO,GAAG,KAAK;AACvB,IAAI;AACJ,IAAI;AACJ,YAAY;AAEZ,SAAS,YAAY,GAAG,EAAE,MAAM,EAAE,QAAQ;IACxC,SAAS;IACT,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,WAAW,EACnB,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;IAC3C,IAAI,IAAI,MAAM,GAAG,SAAS,aAAa;QACrC,MAAM,IAAI,SAAS,kBAAkB,CAAC,SAAS;IACjD;IACA,MAAM,eAAe,EAAE;IACvB,IAAK,IAAI,IAAI,GAAG,IAAI,aAAa,KAAK,EAAG;QACvC,IAAI;QACJ,CAAC,EACC,MAAM,EACN,OAAO,MAAM,EACd,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;QAC3C,aAAa,IAAI,CAAC;IACpB;IACA,OAAO,IAAI,SAAS,MAAM,CAAC,IAAI,OAAO,UAAU,CAAC,eAAe;AAClE;AACA,IAAI,WAAW,QAAQ,OAAO,GAAG;AACjC,OAAO,OAAO,GAAG,aACjB,wlFAAwlF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1036, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/returnstatus-token-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _helpers = require(\"./helpers\");\nvar _token = require(\"./token\");\n// s2.2.7.16\n\nfunction returnStatusParser(buf, offset, _options) {\n  let value;\n  ({\n    value,\n    offset\n  } = (0, _helpers.readInt32LE)(buf, offset));\n  return new _helpers.Result(new _token.ReturnStatusToken(value), offset);\n}\nvar _default = exports.default = returnStatusParser;\nmodule.exports = returnStatusParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaGVscGVycyIsInJlcXVpcmUiLCJfdG9rZW4iLCJyZXR1cm5TdGF0dXNQYXJzZXIiLCJidWYiLCJvZmZzZXQiLCJfb3B0aW9ucyIsInZhbHVlIiwicmVhZEludDMyTEUiLCJSZXN1bHQiLCJSZXR1cm5TdGF0dXNUb2tlbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiLCJtb2R1bGUiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdG9rZW4vcmV0dXJuc3RhdHVzLXRva2VuLXBhcnNlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzMi4yLjcuMTZcbmltcG9ydCB7IHJlYWRJbnQzMkxFLCBSZXN1bHQgfSBmcm9tICcuL2hlbHBlcnMnO1xuaW1wb3J0IHsgdHlwZSBQYXJzZXJPcHRpb25zIH0gZnJvbSAnLi9zdHJlYW0tcGFyc2VyJztcblxuaW1wb3J0IHsgUmV0dXJuU3RhdHVzVG9rZW4gfSBmcm9tICcuL3Rva2VuJztcblxuZnVuY3Rpb24gcmV0dXJuU3RhdHVzUGFyc2VyKGJ1ZjogQnVmZmVyLCBvZmZzZXQ6IG51bWJlciwgX29wdGlvbnM6IFBhcnNlck9wdGlvbnMpOiBSZXN1bHQ8UmV0dXJuU3RhdHVzVG9rZW4+IHtcbiAgbGV0IHZhbHVlO1xuICAoeyB2YWx1ZSwgb2Zmc2V0IH0gPSByZWFkSW50MzJMRShidWYsIG9mZnNldCkpO1xuICByZXR1cm4gbmV3IFJlc3VsdChuZXcgUmV0dXJuU3RhdHVzVG9rZW4odmFsdWUpLCBvZmZzZXQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXR1cm5TdGF0dXNQYXJzZXI7XG5tb2R1bGUuZXhwb3J0cyA9IHJldHVyblN0YXR1c1BhcnNlcjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsUUFBQSxHQUFBQyxPQUFBO0FBR0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBSkE7O0FBTUEsU0FBU0Usa0JBQWtCQSxDQUFDQyxHQUFXLEVBQUVDLE1BQWMsRUFBRUMsUUFBdUIsRUFBNkI7RUFDM0csSUFBSUMsS0FBSztFQUNULENBQUM7SUFBRUEsS0FBSztJQUFFRjtFQUFPLENBQUMsR0FBRyxJQUFBRyxvQkFBVyxFQUFDSixHQUFHLEVBQUVDLE1BQU0sQ0FBQztFQUM3QyxPQUFPLElBQUlJLGVBQU0sQ0FBQyxJQUFJQyx3QkFBaUIsQ0FBQ0gsS0FBSyxDQUFDLEVBQUVGLE1BQU0sQ0FBQztBQUN6RDtBQUFDLElBQUFNLFFBQUEsR0FBQUMsT0FBQSxDQUFBQyxPQUFBLEdBRWNWLGtCQUFrQjtBQUNqQ1csTUFBTSxDQUFDRixPQUFPLEdBQUdULGtCQUFrQiJ9"],"names":[],"mappings":"AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,OAAO,GAAG,KAAK;AACvB,IAAI;AACJ,IAAI;AACJ,YAAY;AAEZ,SAAS,mBAAmB,GAAG,EAAE,MAAM,EAAE,QAAQ;IAC/C,IAAI;IACJ,CAAC,EACC,KAAK,EACL,MAAM,EACP,GAAG,CAAC,GAAG,SAAS,WAAW,EAAE,KAAK,OAAO;IAC1C,OAAO,IAAI,SAAS,MAAM,CAAC,IAAI,OAAO,iBAAiB,CAAC,QAAQ;AAClE;AACA,IAAI,WAAW,QAAQ,OAAO,GAAG;AACjC,OAAO,OAAO,GAAG,oBACjB,wkDAAwkD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1054, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/returnvalue-token-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _token = require(\"./token\");\nvar _metadataParser = require(\"../metadata-parser\");\nvar _valueParser = require(\"../value-parser\");\nvar _helpers = require(\"./helpers\");\nvar iconv = _interopRequireWildcard(require(\"iconv-lite\"));\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n// s2.2.7.16\n\nasync function returnParser(parser) {\n  let paramName;\n  let paramOrdinal;\n  let metadata;\n  while (true) {\n    const buf = parser.buffer;\n    let offset = parser.position;\n    try {\n      ({\n        offset,\n        value: paramOrdinal\n      } = (0, _helpers.readUInt16LE)(buf, offset));\n      ({\n        offset,\n        value: paramName\n      } = (0, _helpers.readBVarChar)(buf, offset));\n      // status\n      ({\n        offset\n      } = (0, _helpers.readUInt8)(buf, offset));\n      ({\n        offset,\n        value: metadata\n      } = (0, _metadataParser.readMetadata)(buf, offset, parser.options));\n      if (paramName.charAt(0) === '@') {\n        paramName = paramName.slice(1);\n      }\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        await parser.waitForChunk();\n        continue;\n      }\n      throw err;\n    }\n    parser.position = offset;\n    break;\n  }\n  let value;\n  while (true) {\n    const buf = parser.buffer;\n    let offset = parser.position;\n    if ((0, _valueParser.isPLPStream)(metadata)) {\n      const chunks = await (0, _valueParser.readPLPStream)(parser);\n      if (chunks === null) {\n        value = chunks;\n      } else if (metadata.type.name === 'NVarChar' || metadata.type.name === 'Xml') {\n        value = Buffer.concat(chunks).toString('ucs2');\n      } else if (metadata.type.name === 'VarChar') {\n        value = iconv.decode(Buffer.concat(chunks), metadata.collation?.codepage ?? 'utf8');\n      } else if (metadata.type.name === 'VarBinary' || metadata.type.name === 'UDT') {\n        value = Buffer.concat(chunks);\n      }\n    } else {\n      try {\n        ({\n          value,\n          offset\n        } = (0, _valueParser.readValue)(buf, offset, metadata, parser.options));\n      } catch (err) {\n        if (err instanceof _helpers.NotEnoughDataError) {\n          await parser.waitForChunk();\n          continue;\n        }\n        throw err;\n      }\n      parser.position = offset;\n    }\n    break;\n  }\n  return new _token.ReturnValueToken({\n    paramOrdinal: paramOrdinal,\n    paramName: paramName,\n    metadata: metadata,\n    value: value\n  });\n}\nvar _default = exports.default = returnParser;\nmodule.exports = returnParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1155, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/row-token-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _token = require(\"./token\");\nvar iconv = _interopRequireWildcard(require(\"iconv-lite\"));\nvar _valueParser = require(\"../value-parser\");\nvar _helpers = require(\"./helpers\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n// s2.2.7.17\n\nasync function rowParser(parser) {\n  const columns = [];\n  for (const metadata of parser.colMetadata) {\n    while (true) {\n      if ((0, _valueParser.isPLPStream)(metadata)) {\n        const chunks = await (0, _valueParser.readPLPStream)(parser);\n        if (chunks === null) {\n          columns.push({\n            value: chunks,\n            metadata\n          });\n        } else if (metadata.type.name === 'NVarChar' || metadata.type.name === 'Xml') {\n          columns.push({\n            value: Buffer.concat(chunks).toString('ucs2'),\n            metadata\n          });\n        } else if (metadata.type.name === 'VarChar') {\n          columns.push({\n            value: iconv.decode(Buffer.concat(chunks), metadata.collation?.codepage ?? 'utf8'),\n            metadata\n          });\n        } else if (metadata.type.name === 'VarBinary' || metadata.type.name === 'UDT') {\n          columns.push({\n            value: Buffer.concat(chunks),\n            metadata\n          });\n        }\n      } else {\n        let result;\n        try {\n          result = (0, _valueParser.readValue)(parser.buffer, parser.position, metadata, parser.options);\n        } catch (err) {\n          if (err instanceof _helpers.NotEnoughDataError) {\n            await parser.waitForChunk();\n            continue;\n          }\n          throw err;\n        }\n        parser.position = result.offset;\n        columns.push({\n          value: result.value,\n          metadata\n        });\n      }\n      break;\n    }\n  }\n  if (parser.options.useColumnNames) {\n    const columnsMap = Object.create(null);\n    columns.forEach(column => {\n      const colName = column.metadata.colName;\n      if (columnsMap[colName] == null) {\n        columnsMap[colName] = column;\n      }\n    });\n    return new _token.RowToken(columnsMap);\n  } else {\n    return new _token.RowToken(columns);\n  }\n}\nvar _default = exports.default = rowParser;\nmodule.exports = rowParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdG9rZW4iLCJyZXF1aXJlIiwiaWNvbnYiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIl92YWx1ZVBhcnNlciIsIl9oZWxwZXJzIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0Iiwicm93UGFyc2VyIiwicGFyc2VyIiwiY29sdW1ucyIsIm1ldGFkYXRhIiwiY29sTWV0YWRhdGEiLCJpc1BMUFN0cmVhbSIsImNodW5rcyIsInJlYWRQTFBTdHJlYW0iLCJwdXNoIiwidmFsdWUiLCJ0eXBlIiwibmFtZSIsIkJ1ZmZlciIsImNvbmNhdCIsInRvU3RyaW5nIiwiZGVjb2RlIiwiY29sbGF0aW9uIiwiY29kZXBhZ2UiLCJyZXN1bHQiLCJyZWFkVmFsdWUiLCJidWZmZXIiLCJwb3NpdGlvbiIsIm9wdGlvbnMiLCJlcnIiLCJOb3RFbm91Z2hEYXRhRXJyb3IiLCJ3YWl0Rm9yQ2h1bmsiLCJvZmZzZXQiLCJ1c2VDb2x1bW5OYW1lcyIsImNvbHVtbnNNYXAiLCJjcmVhdGUiLCJmb3JFYWNoIiwiY29sdW1uIiwiY29sTmFtZSIsIlJvd1Rva2VuIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwibW9kdWxlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Rva2VuL3Jvdy10b2tlbi1wYXJzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gczIuMi43LjE3XG5cbmltcG9ydCBQYXJzZXIgZnJvbSAnLi9zdHJlYW0tcGFyc2VyJztcbmltcG9ydCB7IHR5cGUgQ29sdW1uTWV0YWRhdGEgfSBmcm9tICcuL2NvbG1ldGFkYXRhLXRva2VuLXBhcnNlcic7XG5cbmltcG9ydCB7IFJvd1Rva2VuIH0gZnJvbSAnLi90b2tlbic7XG5pbXBvcnQgKiBhcyBpY29udiBmcm9tICdpY29udi1saXRlJztcblxuaW1wb3J0IHsgaXNQTFBTdHJlYW0sIHJlYWRQTFBTdHJlYW0sIHJlYWRWYWx1ZSB9IGZyb20gJy4uL3ZhbHVlLXBhcnNlcic7XG5pbXBvcnQgeyBOb3RFbm91Z2hEYXRhRXJyb3IgfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5pbnRlcmZhY2UgQ29sdW1uIHtcbiAgdmFsdWU6IHVua25vd247XG4gIG1ldGFkYXRhOiBDb2x1bW5NZXRhZGF0YTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcm93UGFyc2VyKHBhcnNlcjogUGFyc2VyKTogUHJvbWlzZTxSb3dUb2tlbj4ge1xuICBjb25zdCBjb2x1bW5zOiBDb2x1bW5bXSA9IFtdO1xuXG4gIGZvciAoY29uc3QgbWV0YWRhdGEgb2YgcGFyc2VyLmNvbE1ldGFkYXRhKSB7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmIChpc1BMUFN0cmVhbShtZXRhZGF0YSkpIHtcbiAgICAgICAgY29uc3QgY2h1bmtzID0gYXdhaXQgcmVhZFBMUFN0cmVhbShwYXJzZXIpO1xuXG4gICAgICAgIGlmIChjaHVua3MgPT09IG51bGwpIHtcbiAgICAgICAgICBjb2x1bW5zLnB1c2goeyB2YWx1ZTogY2h1bmtzLCBtZXRhZGF0YSB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChtZXRhZGF0YS50eXBlLm5hbWUgPT09ICdOVmFyQ2hhcicgfHwgbWV0YWRhdGEudHlwZS5uYW1lID09PSAnWG1sJykge1xuICAgICAgICAgIGNvbHVtbnMucHVzaCh7IHZhbHVlOiBCdWZmZXIuY29uY2F0KGNodW5rcykudG9TdHJpbmcoJ3VjczInKSwgbWV0YWRhdGEgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAobWV0YWRhdGEudHlwZS5uYW1lID09PSAnVmFyQ2hhcicpIHtcbiAgICAgICAgICBjb2x1bW5zLnB1c2goeyB2YWx1ZTogaWNvbnYuZGVjb2RlKEJ1ZmZlci5jb25jYXQoY2h1bmtzKSwgbWV0YWRhdGEuY29sbGF0aW9uPy5jb2RlcGFnZSA/PyAndXRmOCcpLCBtZXRhZGF0YSB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChtZXRhZGF0YS50eXBlLm5hbWUgPT09ICdWYXJCaW5hcnknIHx8IG1ldGFkYXRhLnR5cGUubmFtZSA9PT0gJ1VEVCcpIHtcbiAgICAgICAgICBjb2x1bW5zLnB1c2goeyB2YWx1ZTogQnVmZmVyLmNvbmNhdChjaHVua3MpLCBtZXRhZGF0YSB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXN1bHQgPSByZWFkVmFsdWUocGFyc2VyLmJ1ZmZlciwgcGFyc2VyLnBvc2l0aW9uLCBtZXRhZGF0YSwgcGFyc2VyLm9wdGlvbnMpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgTm90RW5vdWdoRGF0YUVycm9yKSB7XG4gICAgICAgICAgICBhd2FpdCBwYXJzZXIud2FpdEZvckNodW5rKCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZXIucG9zaXRpb24gPSByZXN1bHQub2Zmc2V0O1xuICAgICAgICBjb2x1bW5zLnB1c2goeyB2YWx1ZTogcmVzdWx0LnZhbHVlLCBtZXRhZGF0YSB9KTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhcnNlci5vcHRpb25zLnVzZUNvbHVtbk5hbWVzKSB7XG4gICAgY29uc3QgY29sdW1uc01hcDogeyBba2V5OiBzdHJpbmddOiBDb2x1bW4gfSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBjb2x1bW5zLmZvckVhY2goKGNvbHVtbikgPT4ge1xuICAgICAgY29uc3QgY29sTmFtZSA9IGNvbHVtbi5tZXRhZGF0YS5jb2xOYW1lO1xuICAgICAgaWYgKGNvbHVtbnNNYXBbY29sTmFtZV0gPT0gbnVsbCkge1xuICAgICAgICBjb2x1bW5zTWFwW2NvbE5hbWVdID0gY29sdW1uO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ldyBSb3dUb2tlbihjb2x1bW5zTWFwKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IFJvd1Rva2VuKGNvbHVtbnMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJvd1BhcnNlcjtcbm1vZHVsZS5leHBvcnRzID0gcm93UGFyc2VyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFLQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFDLHVCQUFBLENBQUFGLE9BQUE7QUFFQSxJQUFBRyxZQUFBLEdBQUFILE9BQUE7QUFDQSxJQUFBSSxRQUFBLEdBQUFKLE9BQUE7QUFBK0MsU0FBQUsseUJBQUFDLENBQUEsNkJBQUFDLE9BQUEsbUJBQUFDLENBQUEsT0FBQUQsT0FBQSxJQUFBRSxDQUFBLE9BQUFGLE9BQUEsWUFBQUYsd0JBQUEsWUFBQUEsQ0FBQUMsQ0FBQSxXQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQSxLQUFBRixDQUFBO0FBQUEsU0FBQUosd0JBQUFJLENBQUEsRUFBQUUsQ0FBQSxTQUFBQSxDQUFBLElBQUFGLENBQUEsSUFBQUEsQ0FBQSxDQUFBSSxVQUFBLFNBQUFKLENBQUEsZUFBQUEsQ0FBQSx1QkFBQUEsQ0FBQSx5QkFBQUEsQ0FBQSxXQUFBSyxPQUFBLEVBQUFMLENBQUEsUUFBQUcsQ0FBQSxHQUFBSix3QkFBQSxDQUFBRyxDQUFBLE9BQUFDLENBQUEsSUFBQUEsQ0FBQSxDQUFBRyxHQUFBLENBQUFOLENBQUEsVUFBQUcsQ0FBQSxDQUFBSSxHQUFBLENBQUFQLENBQUEsT0FBQVEsQ0FBQSxLQUFBQyxTQUFBLFVBQUFDLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxjQUFBLElBQUFELE1BQUEsQ0FBQUUsd0JBQUEsV0FBQUMsQ0FB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"],"names":[],"mappings":"AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,OAAO,GAAG,KAAK;AACvB,IAAI;AACJ,IAAI,QAAQ;AACZ,IAAI;AACJ,IAAI;AACJ,SAAS,yBAAyB,CAAC;IAAI,IAAI,cAAc,OAAO,SAAS,OAAO;IAAM,IAAI,IAAI,IAAI,WAAW,IAAI,IAAI;IAAW,OAAO,CAAC,2BAA2B,SAAU,CAAC;QAAI,OAAO,IAAI,IAAI;IAAG,CAAC,EAAE;AAAI;AAC3M,SAAS,wBAAwB,CAAC,EAAE,CAAC;IAAI,IAAI,CAAC,KAAK,KAAK,EAAE,UAAU,EAAE,OAAO;IAAG,IAAI,SAAS,KAAK,YAAY,OAAO,KAAK,cAAc,OAAO,GAAG,OAAO;QAAE,SAAS;IAAE;IAAG,IAAI,IAAI,yBAAyB;IAAI,IAAI,KAAK,EAAE,GAAG,CAAC,IAAI,OAAO,EAAE,GAAG,CAAC;IAAI,IAAI,IAAI;QAAE,WAAW;IAAK,GAAG,IAAI,OAAO,cAAc,IAAI,OAAO,wBAAwB;IAAE,IAAK,IAAI,KAAK,EAAG,IAAI,cAAc,KAAK,OAAO,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,IAAI;QAAE,IAAI,IAAI,IAAI,OAAO,wBAAwB,CAAC,GAAG,KAAK;QAAM,KAAK,CAAC,EAAE,GAAG,IAAI,EAAE,GAAG,IAAI,OAAO,cAAc,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;IAAE;IAAE,OAAO,EAAE,OAAO,GAAG,GAAG,KAAK,EAAE,GAAG,CAAC,GAAG,IAAI;AAAG;AAChlB,YAAY;AAEZ,eAAe,UAAU,MAAM;IAC7B,MAAM,UAAU,EAAE;IAClB,KAAK,MAAM,YAAY,OAAO,WAAW,CAAE;QACzC,MAAO,KAAM;YACX,IAAI,CAAC,GAAG,aAAa,WAAW,EAAE,WAAW;gBAC3C,MAAM,SAAS,MAAM,CAAC,GAAG,aAAa,aAAa,EAAE;gBACrD,IAAI,WAAW,MAAM;oBACnB,QAAQ,IAAI,CAAC;wBACX,OAAO;wBACP;oBACF;gBACF,OAAO,IAAI,SAAS,IAAI,CAAC,IAAI,KAAK,cAAc,SAAS,IAAI,CAAC,IAAI,KAAK,OAAO;oBAC5E,QAAQ,IAAI,CAAC;wBACX,OAAO,OAAO,MAAM,CAAC,QAAQ,QAAQ,CAAC;wBACtC;oBACF;gBACF,OAAO,IAAI,SAAS,IAAI,CAAC,IAAI,KAAK,WAAW;oBAC3C,QAAQ,IAAI,CAAC;wBACX,OAAO,MAAM,MAAM,CAAC,OAAO,MAAM,CAAC,SAAS,SAAS,SAAS,EAAE,YAAY;wBAC3E;oBACF;gBACF,OAAO,IAAI,SAAS,IAAI,CAAC,IAAI,KAAK,eAAe,SAAS,IAAI,CAAC,IAAI,KAAK,OAAO;oBAC7E,QAAQ,IAAI,CAAC;wBACX,OAAO,OAAO,MAAM,CAAC;wBACrB;oBACF;gBACF;YACF,OAAO;gBACL,IAAI;gBACJ,IAAI;oBACF,SAAS,CAAC,GAAG,aAAa,SAAS,EAAE,OAAO,MAAM,EAAE,OAAO,QAAQ,EAAE,UAAU,OAAO,OAAO;gBAC/F,EAAE,OAAO,KAAK;oBACZ,IAAI,eAAe,SAAS,kBAAkB,EAAE;wBAC9C,MAAM,OAAO,YAAY;wBACzB;oBACF;oBACA,MAAM;gBACR;gBACA,OAAO,QAAQ,GAAG,OAAO,MAAM;gBAC/B,QAAQ,IAAI,CAAC;oBACX,OAAO,OAAO,KAAK;oBACnB;gBACF;YACF;YACA;QACF;IACF;IACA,IAAI,OAAO,OAAO,CAAC,cAAc,EAAE;QACjC,MAAM,aAAa,OAAO,MAAM,CAAC;QACjC,QAAQ,OAAO,CAAC,CAAA;YACd,MAAM,UAAU,OAAO,QAAQ,CAAC,OAAO;YACvC,IAAI,UAAU,CAAC,QAAQ,IAAI,MAAM;gBAC/B,UAAU,CAAC,QAAQ,GAAG;YACxB;QACF;QACA,OAAO,IAAI,OAAO,QAAQ,CAAC;IAC7B,OAAO;QACL,OAAO,IAAI,OAAO,QAAQ,CAAC;IAC7B;AACF;AACA,IAAI,WAAW,QAAQ,OAAO,GAAG;AACjC,OAAO,OAAO,GAAG,WACjB,w1PAAw1P","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1253, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/nbcrow-token-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _token = require(\"./token\");\nvar iconv = _interopRequireWildcard(require(\"iconv-lite\"));\nvar _valueParser = require(\"../value-parser\");\nvar _helpers = require(\"./helpers\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\n// s2.2.7.13 (introduced in TDS 7.3.B)\n\nasync function nbcRowParser(parser) {\n  const colMetadata = parser.colMetadata;\n  const columns = [];\n  const bitmap = [];\n  const bitmapByteLength = Math.ceil(colMetadata.length / 8);\n  while (parser.buffer.length - parser.position < bitmapByteLength) {\n    await parser.waitForChunk();\n  }\n  const bytes = parser.buffer.slice(parser.position, parser.position + bitmapByteLength);\n  parser.position += bitmapByteLength;\n  for (let i = 0, len = bytes.length; i < len; i++) {\n    const byte = bytes[i];\n    bitmap.push(byte & 0b1 ? true : false);\n    bitmap.push(byte & 0b10 ? true : false);\n    bitmap.push(byte & 0b100 ? true : false);\n    bitmap.push(byte & 0b1000 ? true : false);\n    bitmap.push(byte & 0b10000 ? true : false);\n    bitmap.push(byte & 0b100000 ? true : false);\n    bitmap.push(byte & 0b1000000 ? true : false);\n    bitmap.push(byte & 0b10000000 ? true : false);\n  }\n  for (let i = 0; i < colMetadata.length; i++) {\n    const metadata = colMetadata[i];\n    if (bitmap[i]) {\n      columns.push({\n        value: null,\n        metadata\n      });\n      continue;\n    }\n    while (true) {\n      if ((0, _valueParser.isPLPStream)(metadata)) {\n        const chunks = await (0, _valueParser.readPLPStream)(parser);\n        if (chunks === null) {\n          columns.push({\n            value: chunks,\n            metadata\n          });\n        } else if (metadata.type.name === 'NVarChar' || metadata.type.name === 'Xml') {\n          columns.push({\n            value: Buffer.concat(chunks).toString('ucs2'),\n            metadata\n          });\n        } else if (metadata.type.name === 'VarChar') {\n          columns.push({\n            value: iconv.decode(Buffer.concat(chunks), metadata.collation?.codepage ?? 'utf8'),\n            metadata\n          });\n        } else if (metadata.type.name === 'VarBinary' || metadata.type.name === 'UDT') {\n          columns.push({\n            value: Buffer.concat(chunks),\n            metadata\n          });\n        }\n      } else {\n        let result;\n        try {\n          result = (0, _valueParser.readValue)(parser.buffer, parser.position, metadata, parser.options);\n        } catch (err) {\n          if (err instanceof _helpers.NotEnoughDataError) {\n            await parser.waitForChunk();\n            continue;\n          }\n          throw err;\n        }\n        parser.position = result.offset;\n        columns.push({\n          value: result.value,\n          metadata\n        });\n      }\n      break;\n    }\n  }\n  if (parser.options.useColumnNames) {\n    const columnsMap = Object.create(null);\n    columns.forEach(column => {\n      const colName = column.metadata.colName;\n      if (columnsMap[colName] == null) {\n        columnsMap[colName] = column;\n      }\n    });\n    return new _token.NBCRowToken(columnsMap);\n  } else {\n    return new _token.NBCRowToken(columns);\n  }\n}\nvar _default = exports.default = nbcRowParser;\nmodule.exports = nbcRowParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1378, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/sspi-token-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _helpers = require(\"./helpers\");\nvar _token = require(\"./token\");\nfunction parseChallenge(buffer) {\n  const challenge = {};\n  challenge.magic = buffer.slice(0, 8).toString('utf8');\n  challenge.type = buffer.readInt32LE(8);\n  challenge.domainLen = buffer.readInt16LE(12);\n  challenge.domainMax = buffer.readInt16LE(14);\n  challenge.domainOffset = buffer.readInt32LE(16);\n  challenge.flags = buffer.readInt32LE(20);\n  challenge.nonce = buffer.slice(24, 32);\n  challenge.zeroes = buffer.slice(32, 40);\n  challenge.targetLen = buffer.readInt16LE(40);\n  challenge.targetMax = buffer.readInt16LE(42);\n  challenge.targetOffset = buffer.readInt32LE(44);\n  challenge.oddData = buffer.slice(48, 56);\n  challenge.domain = buffer.slice(56, 56 + challenge.domainLen).toString('ucs2');\n  challenge.target = buffer.slice(56 + challenge.domainLen, 56 + challenge.domainLen + challenge.targetLen);\n  return challenge;\n}\nfunction sspiParser(buf, offset, _options) {\n  let tokenLength;\n  ({\n    offset,\n    value: tokenLength\n  } = (0, _helpers.readUInt16LE)(buf, offset));\n  if (buf.length < offset + tokenLength) {\n    throw new _helpers.NotEnoughDataError(offset + tokenLength);\n  }\n  const data = buf.slice(offset, offset + tokenLength);\n  offset += tokenLength;\n  return new _helpers.Result(new _token.SSPIToken(parseChallenge(data), data), offset);\n}\nvar _default = exports.default = sspiParser;\nmodule.exports = sspiParser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaGVscGVycyIsInJlcXVpcmUiLCJfdG9rZW4iLCJwYXJzZUNoYWxsZW5nZSIsImJ1ZmZlciIsImNoYWxsZW5nZSIsIm1hZ2ljIiwic2xpY2UiLCJ0b1N0cmluZyIsInR5cGUiLCJyZWFkSW50MzJMRSIsImRvbWFpbkxlbiIsInJlYWRJbnQxNkxFIiwiZG9tYWluTWF4IiwiZG9tYWluT2Zmc2V0IiwiZmxhZ3MiLCJub25jZSIsInplcm9lcyIsInRhcmdldExlbiIsInRhcmdldE1heCIsInRhcmdldE9mZnNldCIsIm9kZERhdGEiLCJkb21haW4iLCJ0YXJnZXQiLCJzc3BpUGFyc2VyIiwiYnVmIiwib2Zmc2V0IiwiX29wdGlvbnMiLCJ0b2tlbkxlbmd0aCIsInZhbHVlIiwicmVhZFVJbnQxNkxFIiwibGVuZ3RoIiwiTm90RW5vdWdoRGF0YUVycm9yIiwiZGF0YSIsIlJlc3VsdCIsIlNTUElUb2tlbiIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImRlZmF1bHQiLCJtb2R1bGUiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvdG9rZW4vc3NwaS10b2tlbi1wYXJzZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm90RW5vdWdoRGF0YUVycm9yLCByZWFkVUludDE2TEUsIFJlc3VsdCB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyB0eXBlIFBhcnNlck9wdGlvbnMgfSBmcm9tICcuL3N0cmVhbS1wYXJzZXInO1xuXG5pbXBvcnQgeyBTU1BJVG9rZW4gfSBmcm9tICcuL3Rva2VuJztcblxuaW50ZXJmYWNlIERhdGEge1xuICBtYWdpYzogc3RyaW5nO1xuICB0eXBlOiBudW1iZXI7XG4gIGRvbWFpbkxlbjogbnVtYmVyO1xuICBkb21haW5NYXg6IG51bWJlcjtcbiAgZG9tYWluT2Zmc2V0OiBudW1iZXI7XG4gIGZsYWdzOiBudW1iZXI7XG4gIG5vbmNlOiBCdWZmZXI7XG4gIHplcm9lczogQnVmZmVyO1xuICB0YXJnZXRMZW46IG51bWJlcjtcbiAgdGFyZ2V0TWF4OiBudW1iZXI7XG4gIHRhcmdldE9mZnNldDogbnVtYmVyO1xuICBvZGREYXRhOiBCdWZmZXI7XG4gIGRvbWFpbjogc3RyaW5nO1xuICB0YXJnZXQ6IEJ1ZmZlcjtcbn1cblxuZnVuY3Rpb24gcGFyc2VDaGFsbGVuZ2UoYnVmZmVyOiBCdWZmZXIpIHtcbiAgY29uc3QgY2hhbGxlbmdlOiBQYXJ0aWFsPERhdGE+ID0ge307XG5cbiAgY2hhbGxlbmdlLm1hZ2ljID0gYnVmZmVyLnNsaWNlKDAsIDgpLnRvU3RyaW5nKCd1dGY4Jyk7XG4gIGNoYWxsZW5nZS50eXBlID0gYnVmZmVyLnJlYWRJbnQzMkxFKDgpO1xuICBjaGFsbGVuZ2UuZG9tYWluTGVuID0gYnVmZmVyLnJlYWRJbnQxNkxFKDEyKTtcbiAgY2hhbGxlbmdlLmRvbWFpbk1heCA9IGJ1ZmZlci5yZWFkSW50MTZMRSgxNCk7XG4gIGNoYWxsZW5nZS5kb21haW5PZmZzZXQgPSBidWZmZXIucmVhZEludDMyTEUoMTYpO1xuICBjaGFsbGVuZ2UuZmxhZ3MgPSBidWZmZXIucmVhZEludDMyTEUoMjApO1xuICBjaGFsbGVuZ2Uubm9uY2UgPSBidWZmZXIuc2xpY2UoMjQsIDMyKTtcbiAgY2hhbGxlbmdlLnplcm9lcyA9IGJ1ZmZlci5zbGljZSgzMiwgNDApO1xuICBjaGFsbGVuZ2UudGFyZ2V0TGVuID0gYnVmZmVyLnJlYWRJbnQxNkxFKDQwKTtcbiAgY2hhbGxlbmdlLnRhcmdldE1heCA9IGJ1ZmZlci5yZWFkSW50MTZMRSg0Mik7XG4gIGNoYWxsZW5nZS50YXJnZXRPZmZzZXQgPSBidWZmZXIucmVhZEludDMyTEUoNDQpO1xuICBjaGFsbGVuZ2Uub2RkRGF0YSA9IGJ1ZmZlci5zbGljZSg0OCwgNTYpO1xuICBjaGFsbGVuZ2UuZG9tYWluID0gYnVmZmVyLnNsaWNlKDU2LCA1NiArIGNoYWxsZW5nZS5kb21haW5MZW4pLnRvU3RyaW5nKCd1Y3MyJyk7XG4gIGNoYWxsZW5nZS50YXJnZXQgPSBidWZmZXIuc2xpY2UoNTYgKyBjaGFsbGVuZ2UuZG9tYWluTGVuLCA1NiArIGNoYWxsZW5nZS5kb21haW5MZW4gKyBjaGFsbGVuZ2UudGFyZ2V0TGVuKTtcblxuICByZXR1cm4gY2hhbGxlbmdlIGFzIERhdGE7XG59XG5cbmZ1bmN0aW9uIHNzcGlQYXJzZXIoYnVmOiBCdWZmZXIsIG9mZnNldDogbnVtYmVyLCBfb3B0aW9uczogUGFyc2VyT3B0aW9ucyk6IFJlc3VsdDxTU1BJVG9rZW4+IHtcbiAgbGV0IHRva2VuTGVuZ3RoO1xuICAoeyBvZmZzZXQsIHZhbHVlOiB0b2tlbkxlbmd0aCB9ID0gcmVhZFVJbnQxNkxFKGJ1Ziwgb2Zmc2V0KSk7XG5cbiAgaWYgKGJ1Zi5sZW5ndGggPCBvZmZzZXQgKyB0b2tlbkxlbmd0aCkge1xuICAgIHRocm93IG5ldyBOb3RFbm91Z2hEYXRhRXJyb3Iob2Zmc2V0ICsgdG9rZW5MZW5ndGgpO1xuICB9XG5cbiAgY29uc3QgZGF0YSA9IGJ1Zi5zbGljZShvZmZzZXQsIG9mZnNldCArIHRva2VuTGVuZ3RoKTtcbiAgb2Zmc2V0ICs9IHRva2VuTGVuZ3RoO1xuXG4gIHJldHVybiBuZXcgUmVzdWx0KG5ldyBTU1BJVG9rZW4ocGFyc2VDaGFsbGVuZ2UoZGF0YSksIGRhdGEpLCBvZmZzZXQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzc3BpUGFyc2VyO1xubW9kdWxlLmV4cG9ydHMgPSBzc3BpUGFyc2VyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFHQSxJQUFBQyxNQUFBLEdBQUFELE9BQUE7QUFtQkEsU0FBU0UsY0FBY0EsQ0FBQ0MsTUFBYyxFQUFFO0VBQ3RDLE1BQU1DLFNBQXdCLEdBQUcsQ0FBQyxDQUFDO0VBRW5DQSxTQUFTLENBQUNDLEtBQUssR0FBR0YsTUFBTSxDQUFDRyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDQyxRQUFRLENBQUMsTUFBTSxDQUFDO0VBQ3JESCxTQUFTLENBQUNJLElBQUksR0FBR0wsTUFBTSxDQUFDTSxXQUFXLENBQUMsQ0FBQyxDQUFDO0VBQ3RDTCxTQUFTLENBQUNNLFNBQVMsR0FBR1AsTUFBTSxDQUFDUSxXQUFXLENBQUMsRUFBRSxDQUFDO0VBQzVDUCxTQUFTLENBQUNRLFNBQVMsR0FBR1QsTUFBTSxDQUFDUSxXQUFXLENBQUMsRUFBRSxDQUFDO0VBQzVDUCxTQUFTLENBQUNTLFlBQVksR0FBR1YsTUFBTSxDQUFDTSxXQUFXLENBQUMsRUFBRSxDQUFDO0VBQy9DTCxTQUFTLENBQUNVLEtBQUssR0FBR1gsTUFBTSxDQUFDTSxXQUFXLENBQUMsRUFBRSxDQUFDO0VBQ3hDTCxTQUFTLENBQUNXLEtBQUssR0FBR1osTUFBTSxDQUFDRyxLQUFLLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztFQUN0Q0YsU0FBUyxDQUFDWSxNQUFNLEdBQUdiLE1BQU0sQ0FBQ0csS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7RUFDdkNGLFNBQVMsQ0FBQ2EsU0FBUyxHQUFHZCxNQUFNLENBQUNRLFdBQVcsQ0FBQyxFQUFFLENBQUM7RUFDNUNQLFNBQVMsQ0FBQ2MsU0FBUyxHQUFHZixNQUFNLENBQUNRLFdBQVcsQ0FBQyxFQUFFLENBQUM7RUFDNUNQLFNBQVMsQ0FBQ2UsWUFBWSxHQUFHaEIsTUFBTSxDQUFDTSxXQUFXLENBQUMsRUFBRSxDQUFDO0VBQy9DTCxTQUFTLENBQUNnQixPQUFPLEdBQUdqQixNQUFNLENBQUNHLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDO0VBQ3hDRixTQUFTLENBQUNpQixNQUFNLEdBQUdsQixNQUFNLENBQUNHLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxHQUFHRixTQUFTLENBQUNNLFNBQVMsQ0FBQyxDQUFDSCxRQUFRLENBQUMsTUFBTSxDQUFDO0VBQzlFSCxTQUFTLENBQUNrQixNQUFNLEdBQUduQixNQUFNLENBQUNHLEtBQUssQ0FBQyxFQUFFLEdBQUdGLFNBQVMsQ0FBQ00sU0FBUyxFQUFFLEVBQUUsR0FBR04sU0FBUyxDQUFDTSxTQUFTLEdBQUdOLFNBQVMsQ0FBQ2EsU0FBUyxDQUFDO0VBRXpHLE9BQU9iLFNBQVM7QUFDbEI7QUFFQSxTQUFTbUIsVUFBVUEsQ0FBQ0MsR0FBVyxFQUFFQyxNQUFjLEVBQUVDLFFBQXVCLEVBQXFCO0VBQzNGLElBQUlDLFdBQVc7RUFDZixDQUFDO0lBQUVGLE1BQU07SUFBRUcsS0FBSyxFQUFFRDtFQUFZLENBQUMsR0FBRyxJQUFBRSxxQkFBWSxFQUFDTCxHQUFHLEVBQUVDLE1BQU0sQ0FBQztFQUUzRCxJQUFJRCxHQUFHLENBQUNNLE1BQU0sR0FBR0wsTUFBTSxHQUFHRSxXQUFXLEVBQUU7SUFDckMsTUFBTSxJQUFJSSwyQkFBa0IsQ0FBQ04sTUFBTSxHQUFHRSxXQUFXLENBQUM7RUFDcEQ7RUFFQSxNQUFNSyxJQUFJLEdBQUdSLEdBQUcsQ0FBQ2xCLEtBQUssQ0FBQ21CLE1BQU0sRUFBRUEsTUFBTSxHQUFHRSxXQUFXLENBQUM7RUFDcERGLE1BQU0sSUFBSUUsV0FBVztFQUVyQixPQUFPLElBQUlNLGVBQU0sQ0FBQyxJQUFJQyxnQkFBUyxDQUFDaEMsY0FBYyxDQUFDOEIsSUFBSSxDQUFDLEVBQUVBLElBQUksQ0FBQyxFQUFFUCxNQUFNLENBQUM7QUFDdEU7QUFBQyxJQUFBVSxRQUFBLEdBQUFDLE9BQUEsQ0FBQUMsT0FBQSxHQUVjZCxVQUFVO0FBQ3pCZSxNQUFNLENBQUNGLE9BQU8sR0FBR2IsVUFBVSJ9"],"names":[],"mappings":"AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,OAAO,GAAG,KAAK;AACvB,IAAI;AACJ,IAAI;AACJ,SAAS,eAAe,MAAM;IAC5B,MAAM,YAAY,CAAC;IACnB,UAAU,KAAK,GAAG,OAAO,KAAK,CAAC,GAAG,GAAG,QAAQ,CAAC;IAC9C,UAAU,IAAI,GAAG,OAAO,WAAW,CAAC;IACpC,UAAU,SAAS,GAAG,OAAO,WAAW,CAAC;IACzC,UAAU,SAAS,GAAG,OAAO,WAAW,CAAC;IACzC,UAAU,YAAY,GAAG,OAAO,WAAW,CAAC;IAC5C,UAAU,KAAK,GAAG,OAAO,WAAW,CAAC;IACrC,UAAU,KAAK,GAAG,OAAO,KAAK,CAAC,IAAI;IACnC,UAAU,MAAM,GAAG,OAAO,KAAK,CAAC,IAAI;IACpC,UAAU,SAAS,GAAG,OAAO,WAAW,CAAC;IACzC,UAAU,SAAS,GAAG,OAAO,WAAW,CAAC;IACzC,UAAU,YAAY,GAAG,OAAO,WAAW,CAAC;IAC5C,UAAU,OAAO,GAAG,OAAO,KAAK,CAAC,IAAI;IACrC,UAAU,MAAM,GAAG,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU,SAAS,EAAE,QAAQ,CAAC;IACvE,UAAU,MAAM,GAAG,OAAO,KAAK,CAAC,KAAK,UAAU,SAAS,EAAE,KAAK,UAAU,SAAS,GAAG,UAAU,SAAS;IACxG,OAAO;AACT;AACA,SAAS,WAAW,GAAG,EAAE,MAAM,EAAE,QAAQ;IACvC,IAAI;IACJ,CAAC,EACC,MAAM,EACN,OAAO,WAAW,EACnB,GAAG,CAAC,GAAG,SAAS,YAAY,EAAE,KAAK,OAAO;IAC3C,IAAI,IAAI,MAAM,GAAG,SAAS,aAAa;QACrC,MAAM,IAAI,SAAS,kBAAkB,CAAC,SAAS;IACjD;IACA,MAAM,OAAO,IAAI,KAAK,CAAC,QAAQ,SAAS;IACxC,UAAU;IACV,OAAO,IAAI,SAAS,MAAM,CAAC,IAAI,OAAO,SAAS,CAAC,eAAe,OAAO,OAAO;AAC/E;AACA,IAAI,WAAW,QAAQ,OAAO,GAAG;AACjC,OAAO,OAAO,GAAG,YACjB,ohLAAohL","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1418, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/stream-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _token = require(\"./token\");\nvar _colmetadataTokenParser = _interopRequireDefault(require(\"./colmetadata-token-parser\"));\nvar _doneTokenParser = require(\"./done-token-parser\");\nvar _envChangeTokenParser = _interopRequireDefault(require(\"./env-change-token-parser\"));\nvar _infoerrorTokenParser = require(\"./infoerror-token-parser\");\nvar _fedauthInfoParser = _interopRequireDefault(require(\"./fedauth-info-parser\"));\nvar _featureExtAckParser = _interopRequireDefault(require(\"./feature-ext-ack-parser\"));\nvar _loginackTokenParser = _interopRequireDefault(require(\"./loginack-token-parser\"));\nvar _orderTokenParser = _interopRequireDefault(require(\"./order-token-parser\"));\nvar _returnstatusTokenParser = _interopRequireDefault(require(\"./returnstatus-token-parser\"));\nvar _returnvalueTokenParser = _interopRequireDefault(require(\"./returnvalue-token-parser\"));\nvar _rowTokenParser = _interopRequireDefault(require(\"./row-token-parser\"));\nvar _nbcrowTokenParser = _interopRequireDefault(require(\"./nbcrow-token-parser\"));\nvar _sspiTokenParser = _interopRequireDefault(require(\"./sspi-token-parser\"));\nvar _helpers = require(\"./helpers\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nclass Parser {\n  debug;\n  colMetadata;\n  options;\n  iterator;\n  buffer;\n  position;\n  static async *parseTokens(iterable, debug, options, colMetadata = []) {\n    const parser = new Parser(iterable, debug, options);\n    parser.colMetadata = colMetadata;\n    while (true) {\n      try {\n        await parser.waitForChunk();\n      } catch (err) {\n        if (parser.position === parser.buffer.length) {\n          return;\n        }\n        throw err;\n      }\n      while (parser.buffer.length >= parser.position + 1) {\n        const type = parser.buffer.readUInt8(parser.position);\n        parser.position += 1;\n        const token = parser.readToken(type);\n        if (token !== undefined) {\n          yield token;\n        }\n      }\n    }\n  }\n  readToken(type) {\n    switch (type) {\n      case _token.TYPE.DONE:\n        {\n          return this.readDoneToken();\n        }\n      case _token.TYPE.DONEPROC:\n        {\n          return this.readDoneProcToken();\n        }\n      case _token.TYPE.DONEINPROC:\n        {\n          return this.readDoneInProcToken();\n        }\n      case _token.TYPE.ERROR:\n        {\n          return this.readErrorToken();\n        }\n      case _token.TYPE.INFO:\n        {\n          return this.readInfoToken();\n        }\n      case _token.TYPE.ENVCHANGE:\n        {\n          return this.readEnvChangeToken();\n        }\n      case _token.TYPE.LOGINACK:\n        {\n          return this.readLoginAckToken();\n        }\n      case _token.TYPE.RETURNSTATUS:\n        {\n          return this.readReturnStatusToken();\n        }\n      case _token.TYPE.ORDER:\n        {\n          return this.readOrderToken();\n        }\n      case _token.TYPE.FEDAUTHINFO:\n        {\n          return this.readFedAuthInfoToken();\n        }\n      case _token.TYPE.SSPI:\n        {\n          return this.readSSPIToken();\n        }\n      case _token.TYPE.COLMETADATA:\n        {\n          return this.readColMetadataToken();\n        }\n      case _token.TYPE.RETURNVALUE:\n        {\n          return this.readReturnValueToken();\n        }\n      case _token.TYPE.ROW:\n        {\n          return this.readRowToken();\n        }\n      case _token.TYPE.NBCROW:\n        {\n          return this.readNbcRowToken();\n        }\n      case _token.TYPE.FEATUREEXTACK:\n        {\n          return this.readFeatureExtAckToken();\n        }\n      default:\n        {\n          throw new Error('Unknown type: ' + type);\n        }\n    }\n  }\n  readFeatureExtAckToken() {\n    let result;\n    try {\n      result = (0, _featureExtAckParser.default)(this.buffer, this.position, this.options);\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readFeatureExtAckToken();\n        });\n      }\n      throw err;\n    }\n    this.position = result.offset;\n    return result.value;\n  }\n  async readNbcRowToken() {\n    return await (0, _nbcrowTokenParser.default)(this);\n  }\n  async readReturnValueToken() {\n    return await (0, _returnvalueTokenParser.default)(this);\n  }\n  async readColMetadataToken() {\n    const token = await (0, _colmetadataTokenParser.default)(this);\n    this.colMetadata = token.columns;\n    return token;\n  }\n  readSSPIToken() {\n    let result;\n    try {\n      result = (0, _sspiTokenParser.default)(this.buffer, this.position, this.options);\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readSSPIToken();\n        });\n      }\n      throw err;\n    }\n    this.position = result.offset;\n    return result.value;\n  }\n  readFedAuthInfoToken() {\n    let result;\n    try {\n      result = (0, _fedauthInfoParser.default)(this.buffer, this.position, this.options);\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readFedAuthInfoToken();\n        });\n      }\n      throw err;\n    }\n    this.position = result.offset;\n    return result.value;\n  }\n  readOrderToken() {\n    let result;\n    try {\n      result = (0, _orderTokenParser.default)(this.buffer, this.position, this.options);\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readOrderToken();\n        });\n      }\n      throw err;\n    }\n    this.position = result.offset;\n    return result.value;\n  }\n  readReturnStatusToken() {\n    let result;\n    try {\n      result = (0, _returnstatusTokenParser.default)(this.buffer, this.position, this.options);\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readReturnStatusToken();\n        });\n      }\n      throw err;\n    }\n    this.position = result.offset;\n    return result.value;\n  }\n  readLoginAckToken() {\n    let result;\n    try {\n      result = (0, _loginackTokenParser.default)(this.buffer, this.position, this.options);\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readLoginAckToken();\n        });\n      }\n      throw err;\n    }\n    this.position = result.offset;\n    return result.value;\n  }\n  readEnvChangeToken() {\n    let result;\n    try {\n      result = (0, _envChangeTokenParser.default)(this.buffer, this.position, this.options);\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readEnvChangeToken();\n        });\n      }\n      throw err;\n    }\n    this.position = result.offset;\n    return result.value;\n  }\n  readRowToken() {\n    return (0, _rowTokenParser.default)(this);\n  }\n  readInfoToken() {\n    let result;\n    try {\n      result = (0, _infoerrorTokenParser.infoParser)(this.buffer, this.position, this.options);\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readInfoToken();\n        });\n      }\n      throw err;\n    }\n    this.position = result.offset;\n    return result.value;\n  }\n  readErrorToken() {\n    let result;\n    try {\n      result = (0, _infoerrorTokenParser.errorParser)(this.buffer, this.position, this.options);\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readErrorToken();\n        });\n      }\n      throw err;\n    }\n    this.position = result.offset;\n    return result.value;\n  }\n  readDoneInProcToken() {\n    let result;\n    try {\n      result = (0, _doneTokenParser.doneInProcParser)(this.buffer, this.position, this.options);\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readDoneInProcToken();\n        });\n      }\n      throw err;\n    }\n    this.position = result.offset;\n    return result.value;\n  }\n  readDoneProcToken() {\n    let result;\n    try {\n      result = (0, _doneTokenParser.doneProcParser)(this.buffer, this.position, this.options);\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readDoneProcToken();\n        });\n      }\n      throw err;\n    }\n    this.position = result.offset;\n    return result.value;\n  }\n  readDoneToken() {\n    let result;\n    try {\n      result = (0, _doneTokenParser.doneParser)(this.buffer, this.position, this.options);\n    } catch (err) {\n      if (err instanceof _helpers.NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readDoneToken();\n        });\n      }\n      throw err;\n    }\n    this.position = result.offset;\n    return result.value;\n  }\n  constructor(iterable, debug, options) {\n    this.debug = debug;\n    this.colMetadata = [];\n    this.options = options;\n    this.iterator = (iterable[Symbol.asyncIterator] || iterable[Symbol.iterator]).call(iterable);\n    this.buffer = Buffer.alloc(0);\n    this.position = 0;\n  }\n  async waitForChunk() {\n    const result = await this.iterator.next();\n    if (result.done) {\n      throw new Error('unexpected end of data');\n    }\n    if (this.position === this.buffer.length) {\n      this.buffer = result.value;\n    } else {\n      this.buffer = Buffer.concat([this.buffer.slice(this.position), result.value]);\n    }\n    this.position = 0;\n  }\n}\nvar _default = exports.default = Parser;\nmodule.exports = Parser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1767, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/token-stream-parser.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Parser = void 0;\nvar _events = require(\"events\");\nvar _streamParser = _interopRequireDefault(require(\"./stream-parser\"));\nvar _stream = require(\"stream\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nclass Parser extends _events.EventEmitter {\n  constructor(message, debug, handler, options) {\n    super();\n    this.debug = debug;\n    this.options = options;\n    this.parser = _stream.Readable.from(_streamParser.default.parseTokens(message, this.debug, this.options));\n    this.parser.on('data', token => {\n      debug.token(token);\n      handler[token.handlerName](token);\n    });\n    this.parser.on('drain', () => {\n      this.emit('drain');\n    });\n    this.parser.on('end', () => {\n      this.emit('end');\n    });\n  }\n  pause() {\n    return this.parser.pause();\n  }\n  resume() {\n    return this.parser.resume();\n  }\n}\nexports.Parser = Parser;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZXZlbnRzIiwicmVxdWlyZSIsIl9zdHJlYW1QYXJzZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3N0cmVhbSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiUGFyc2VyIiwiRXZlbnRFbWl0dGVyIiwiY29uc3RydWN0b3IiLCJtZXNzYWdlIiwiZGVidWciLCJoYW5kbGVyIiwib3B0aW9ucyIsInBhcnNlciIsIlJlYWRhYmxlIiwiZnJvbSIsIlN0cmVhbVBhcnNlciIsInBhcnNlVG9rZW5zIiwib24iLCJ0b2tlbiIsImhhbmRsZXJOYW1lIiwiZW1pdCIsInBhdXNlIiwicmVzdW1lIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90b2tlbi90b2tlbi1zdHJlYW0tcGFyc2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgU3RyZWFtUGFyc2VyLCB7IHR5cGUgUGFyc2VyT3B0aW9ucyB9IGZyb20gJy4vc3RyZWFtLXBhcnNlcic7XG5pbXBvcnQgRGVidWcgZnJvbSAnLi4vZGVidWcnO1xuaW1wb3J0IHsgVG9rZW4gfSBmcm9tICcuL3Rva2VuJztcbmltcG9ydCB7IFJlYWRhYmxlIH0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCBNZXNzYWdlIGZyb20gJy4uL21lc3NhZ2UnO1xuaW1wb3J0IHsgVG9rZW5IYW5kbGVyIH0gZnJvbSAnLi9oYW5kbGVyJztcblxuZXhwb3J0IGNsYXNzIFBhcnNlciBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG4gIGRlY2xhcmUgZGVidWc6IERlYnVnO1xuICBkZWNsYXJlIG9wdGlvbnM6IFBhcnNlck9wdGlvbnM7XG4gIGRlY2xhcmUgcGFyc2VyOiBSZWFkYWJsZTtcblxuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBNZXNzYWdlLCBkZWJ1ZzogRGVidWcsIGhhbmRsZXI6IFRva2VuSGFuZGxlciwgb3B0aW9uczogUGFyc2VyT3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmRlYnVnID0gZGVidWc7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIHRoaXMucGFyc2VyID0gUmVhZGFibGUuZnJvbShTdHJlYW1QYXJzZXIucGFyc2VUb2tlbnMobWVzc2FnZSwgdGhpcy5kZWJ1ZywgdGhpcy5vcHRpb25zKSk7XG4gICAgdGhpcy5wYXJzZXIub24oJ2RhdGEnLCAodG9rZW46IFRva2VuKSA9PiB7XG4gICAgICBkZWJ1Zy50b2tlbih0b2tlbik7XG4gICAgICBoYW5kbGVyW3Rva2VuLmhhbmRsZXJOYW1lIGFzIGtleW9mIFRva2VuSGFuZGxlcl0odG9rZW4gYXMgYW55KTtcbiAgICB9KTtcblxuICAgIHRoaXMucGFyc2VyLm9uKCdkcmFpbicsICgpID0+IHtcbiAgICAgIHRoaXMuZW1pdCgnZHJhaW4nKTtcbiAgICB9KTtcblxuICAgIHRoaXMucGFyc2VyLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICB0aGlzLmVtaXQoJ2VuZCcpO1xuICAgIH0pO1xuICB9XG5cbiAgZGVjbGFyZSBvbjogKFxuICAgICgoZXZlbnQ6ICdlbmQnLCBsaXN0ZW5lcjogKCkgPT4gdm9pZCkgPT4gdGhpcykgJlxuICAgICgoZXZlbnQ6IHN0cmluZyB8IHN5bWJvbCwgbGlzdGVuZXI6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCkgPT4gdGhpcylcbiAgKTtcblxuICBwYXVzZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZXIucGF1c2UoKTtcbiAgfVxuXG4gIHJlc3VtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJzZXIucmVzdW1lKCk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsT0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsYUFBQSxHQUFBQyxzQkFBQSxDQUFBRixPQUFBO0FBR0EsSUFBQUcsT0FBQSxHQUFBSCxPQUFBO0FBQWtDLFNBQUFFLHVCQUFBRSxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBSTNCLE1BQU1HLE1BQU0sU0FBU0Msb0JBQVksQ0FBQztFQUt2Q0MsV0FBV0EsQ0FBQ0MsT0FBZ0IsRUFBRUMsS0FBWSxFQUFFQyxPQUFxQixFQUFFQyxPQUFzQixFQUFFO0lBQ3pGLEtBQUssQ0FBQyxDQUFDO0lBRVAsSUFBSSxDQUFDRixLQUFLLEdBQUdBLEtBQUs7SUFDbEIsSUFBSSxDQUFDRSxPQUFPLEdBQUdBLE9BQU87SUFFdEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdDLGdCQUFRLENBQUNDLElBQUksQ0FBQ0MscUJBQVksQ0FBQ0MsV0FBVyxDQUFDUixPQUFPLEVBQUUsSUFBSSxDQUFDQyxLQUFLLEVBQUUsSUFBSSxDQUFDRSxPQUFPLENBQUMsQ0FBQztJQUN4RixJQUFJLENBQUNDLE1BQU0sQ0FBQ0ssRUFBRSxDQUFDLE1BQU0sRUFBR0MsS0FBWSxJQUFLO01BQ3ZDVCxLQUFLLENBQUNTLEtBQUssQ0FBQ0EsS0FBSyxDQUFDO01BQ2xCUixPQUFPLENBQUNRLEtBQUssQ0FBQ0MsV0FBVyxDQUF1QixDQUFDRCxLQUFZLENBQUM7SUFDaEUsQ0FBQyxDQUFDO0lBRUYsSUFBSSxDQUFDTixNQUFNLENBQUNLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTTtNQUM1QixJQUFJLENBQUNHLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0lBRUYsSUFBSSxDQUFDUixNQUFNLENBQUNLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTTtNQUMxQixJQUFJLENBQUNHLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDbEIsQ0FBQyxDQUFDO0VBQ0o7RUFPQUMsS0FBS0EsQ0FBQSxFQUFHO0lBQ04sT0FBTyxJQUFJLENBQUNULE1BQU0sQ0FBQ1MsS0FBSyxDQUFDLENBQUM7RUFDNUI7RUFFQUMsTUFBTUEsQ0FBQSxFQUFHO0lBQ1AsT0FBTyxJQUFJLENBQUNWLE1BQU0sQ0FBQ1UsTUFBTSxDQUFDLENBQUM7RUFDN0I7QUFDRjtBQUFDQyxPQUFBLENBQUFsQixNQUFBLEdBQUFBLE1BQUEifQ=="],"names":[],"mappings":"AAEA,OAAO,cAAc,CAAC,SAAS,cAAc;IAC3C,OAAO;AACT;AACA,QAAQ,MAAM,GAAG,KAAK;AACtB,IAAI;AACJ,IAAI,gBAAgB;AACpB,IAAI;AACJ,SAAS,uBAAuB,GAAG;IAAI,OAAO,OAAO,IAAI,UAAU,GAAG,MAAM;QAAE,SAAS;IAAI;AAAG;AAC9F,MAAM,eAAe,QAAQ,YAAY;IACvC,YAAY,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAE;QAC5C,KAAK;QACL,IAAI,CAAC,KAAK,GAAG;QACb,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,MAAM,GAAG,QAAQ,QAAQ,CAAC,IAAI,CAAC,cAAc,OAAO,CAAC,WAAW,CAAC,SAAS,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO;QACvG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAA;YACrB,MAAM,KAAK,CAAC;YACZ,OAAO,CAAC,MAAM,WAAW,CAAC,CAAC;QAC7B;QACA,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,SAAS;YACtB,IAAI,CAAC,IAAI,CAAC;QACZ;QACA,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO;YACpB,IAAI,CAAC,IAAI,CAAC;QACZ;IACF;IACA,QAAQ;QACN,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK;IAC1B;IACA,SAAS;QACP,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM;IAC3B;AACF;AACA,QAAQ,MAAM,GAAG,QACjB,4oHAA4oH","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1808, "column": 0}, "map": {"version":3,"sources":["file:///Users/maxmeireles/Downloads/mrpii%202/node_modules/tedious/lib/token/handler.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnexpectedTokenError = exports.TokenHandler = exports.RequestTokenHandler = exports.Login7TokenHandler = exports.InitialSqlTokenHandler = exports.AttentionTokenHandler = void 0;\nvar _request = _interopRequireDefault(require(\"../request\"));\nvar _errors = require(\"../errors\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nclass UnexpectedTokenError extends Error {\n  constructor(handler, token) {\n    super('Unexpected token `' + token.name + '` in `' + handler.constructor.name + '`');\n  }\n}\nexports.UnexpectedTokenError = UnexpectedTokenError;\nclass TokenHandler {\n  onInfoMessage(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onErrorMessage(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onSSPI(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDatabaseChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onLanguageChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onCharsetChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onSqlCollationChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onRoutingChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onPacketSizeChange(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onResetConnection(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onBeginTransaction(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onCommitTransaction(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onRollbackTransaction(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onFedAuthInfo(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onFeatureExtAck(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onLoginAck(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onColMetadata(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onOrder(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onRow(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onReturnStatus(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onReturnValue(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDoneProc(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDoneInProc(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDone(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n  onDatabaseMirroringPartner(token) {\n    throw new UnexpectedTokenError(this, token);\n  }\n}\n\n/**\n * A handler for tokens received in the response message to the initial SQL Batch request\n * that sets up different connection settings.\n */\nexports.TokenHandler = TokenHandler;\nclass InitialSqlTokenHandler extends TokenHandler {\n  constructor(connection) {\n    super();\n    this.connection = connection;\n  }\n  onInfoMessage(token) {\n    this.connection.emit('infoMessage', token);\n  }\n  onErrorMessage(token) {\n    this.connection.emit('errorMessage', token);\n  }\n  onDatabaseChange(token) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n  onLanguageChange(token) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n  onCharsetChange(token) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n  onSqlCollationChange(token) {\n    this.connection.databaseCollation = token.newValue;\n  }\n  onPacketSizeChange(token) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n  onBeginTransaction(token) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n  onCommitTransaction(token) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n  onRollbackTransaction(token) {\n    this.connection.transactionDescriptors.length = 1;\n    // An outermost transaction was rolled back. Reset the transaction counter\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n  onColMetadata(token) {\n    this.connection.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n  onOrder(token) {\n    this.connection.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n  onRow(token) {\n    this.connection.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n  onReturnStatus(token) {\n    // Do nothing\n  }\n  onReturnValue(token) {\n    // Do nothing\n  }\n  onDoneProc(token) {\n    // Do nothing\n  }\n  onDoneInProc(token) {\n    // Do nothing\n  }\n  onDone(token) {\n    // Do nothing\n  }\n  onResetConnection(token) {\n    this.connection.emit('resetConnection');\n  }\n}\n\n/**\n * A handler for tokens received in the response message to a Login7 message.\n */\nexports.InitialSqlTokenHandler = InitialSqlTokenHandler;\nclass Login7TokenHandler extends TokenHandler {\n  constructor(connection) {\n    super();\n    this.loginAckReceived = false;\n    this.connection = connection;\n  }\n  onInfoMessage(token) {\n    this.connection.emit('infoMessage', token);\n  }\n  onErrorMessage(token) {\n    this.connection.emit('errorMessage', token);\n    const error = new _errors.ConnectionError(token.message, 'ELOGIN');\n    const isLoginErrorTransient = this.connection.transientErrorLookup.isTransientError(token.number);\n    if (isLoginErrorTransient && this.connection.curTransientRetryCount !== this.connection.config.options.maxRetriesOnTransientErrors) {\n      error.isTransient = true;\n    }\n    this.connection.loginError = error;\n  }\n  onSSPI(token) {\n    if (token.ntlmpacket) {\n      this.connection.ntlmpacket = token.ntlmpacket;\n      this.connection.ntlmpacketBuffer = token.ntlmpacketBuffer;\n    }\n  }\n  onDatabaseChange(token) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n  onLanguageChange(token) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n  onCharsetChange(token) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n  onSqlCollationChange(token) {\n    this.connection.databaseCollation = token.newValue;\n  }\n  onFedAuthInfo(token) {\n    this.fedAuthInfoToken = token;\n  }\n  onFeatureExtAck(token) {\n    const {\n      authentication\n    } = this.connection.config;\n    if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret' || authentication.type === 'azure-active-directory-default') {\n      if (token.fedAuth === undefined) {\n        this.connection.loginError = new _errors.ConnectionError('Did not receive Active Directory authentication acknowledgement');\n      } else if (token.fedAuth.length !== 0) {\n        this.connection.loginError = new _errors.ConnectionError(`Active Directory authentication acknowledgment for ${authentication.type} authentication method includes extra data`);\n      }\n    } else if (token.fedAuth === undefined && token.utf8Support === undefined) {\n      this.connection.loginError = new _errors.ConnectionError('Received acknowledgement for unknown feature');\n    } else if (token.fedAuth) {\n      this.connection.loginError = new _errors.ConnectionError('Did not request Active Directory authentication, but received the acknowledgment');\n    }\n  }\n  onLoginAck(token) {\n    if (!token.tdsVersion) {\n      // unsupported TDS version\n      this.connection.loginError = new _errors.ConnectionError('Server responded with unknown TDS version.', 'ETDS');\n      return;\n    }\n    if (!token.interface) {\n      // unsupported interface\n      this.connection.loginError = new _errors.ConnectionError('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n      return;\n    }\n\n    // use negotiated version\n    this.connection.config.options.tdsVersion = token.tdsVersion;\n    this.loginAckReceived = true;\n  }\n  onRoutingChange(token) {\n    // Removes instance name attached to the redirect url. E.g., redirect.db.net\\instance1 --> redirect.db.net\n    const [server] = token.newValue.server.split('\\\\');\n    this.routingData = {\n      server,\n      port: token.newValue.port\n    };\n  }\n  onDoneInProc(token) {\n    // Do nothing\n  }\n  onDone(token) {\n    // Do nothing\n  }\n  onPacketSizeChange(token) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n  onDatabaseMirroringPartner(token) {\n    // Do nothing\n  }\n}\n\n/**\n * A handler for tokens received in the response message to a RPC Request,\n * a SQL Batch Request, a Bulk Load BCP Request or a Transaction Manager Request.\n */\nexports.Login7TokenHandler = Login7TokenHandler;\nclass RequestTokenHandler extends TokenHandler {\n  constructor(connection, request) {\n    super();\n    this.connection = connection;\n    this.request = request;\n    this.errors = [];\n  }\n  onInfoMessage(token) {\n    this.connection.emit('infoMessage', token);\n  }\n  onErrorMessage(token) {\n    this.connection.emit('errorMessage', token);\n    if (!this.request.canceled) {\n      const error = new _errors.RequestError(token.message, 'EREQUEST');\n      error.number = token.number;\n      error.state = token.state;\n      error.class = token.class;\n      error.serverName = token.serverName;\n      error.procName = token.procName;\n      error.lineNumber = token.lineNumber;\n      this.errors.push(error);\n      this.request.error = error;\n      if (this.request instanceof _request.default && this.errors.length > 1) {\n        this.request.error = new AggregateError(this.errors);\n      }\n    }\n  }\n  onDatabaseChange(token) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n  onLanguageChange(token) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n  onCharsetChange(token) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n  onSqlCollationChange(token) {\n    this.connection.databaseCollation = token.newValue;\n  }\n  onPacketSizeChange(token) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n  onBeginTransaction(token) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n  onCommitTransaction(token) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n  onRollbackTransaction(token) {\n    this.connection.transactionDescriptors.length = 1;\n    // An outermost transaction was rolled back. Reset the transaction counter\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n  onColMetadata(token) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.useColumnNames) {\n        const columns = Object.create(null);\n        for (let j = 0, len = token.columns.length; j < len; j++) {\n          const col = token.columns[j];\n          if (columns[col.colName] == null) {\n            columns[col.colName] = col;\n          }\n        }\n        this.request.emit('columnMetadata', columns);\n      } else {\n        this.request.emit('columnMetadata', token.columns);\n      }\n    }\n  }\n  onOrder(token) {\n    if (!this.request.canceled) {\n      this.request.emit('order', token.orderColumns);\n    }\n  }\n  onRow(token) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.rowCollectionOnRequestCompletion) {\n        this.request.rows.push(token.columns);\n      }\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst.push(token.columns);\n      }\n      this.request.emit('row', token.columns);\n    }\n  }\n  onReturnStatus(token) {\n    if (!this.request.canceled) {\n      // Keep value for passing in 'doneProc' event.\n      this.connection.procReturnStatusValue = token.value;\n    }\n  }\n  onReturnValue(token) {\n    if (!this.request.canceled) {\n      this.request.emit('returnValue', token.paramName, token.value, token.metadata);\n    }\n  }\n  onDoneProc(token) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new _errors.RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n      this.request.emit('doneProc', token.rowCount, token.more, this.connection.procReturnStatusValue, this.request.rst);\n      this.connection.procReturnStatusValue = undefined;\n      if (token.rowCount !== undefined) {\n        this.request.rowCount += token.rowCount;\n      }\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n  onDoneInProc(token) {\n    if (!this.request.canceled) {\n      this.request.emit('doneInProc', token.rowCount, token.more, this.request.rst);\n      if (token.rowCount !== undefined) {\n        this.request.rowCount += token.rowCount;\n      }\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n  onDone(token) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new _errors.RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n      this.request.emit('done', token.rowCount, token.more, this.request.rst);\n      if (token.rowCount !== undefined) {\n        this.request.rowCount += token.rowCount;\n      }\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n  onResetConnection(token) {\n    this.connection.emit('resetConnection');\n  }\n}\n\n/**\n * A handler for the attention acknowledgement message.\n *\n * This message only contains a `DONE` token that acknowledges\n * that the attention message was received by the server.\n */\nexports.RequestTokenHandler = RequestTokenHandler;\nclass AttentionTokenHandler extends TokenHandler {\n  /**\n   * Returns whether an attention acknowledgement was received.\n   */\n\n  constructor(connection, request) {\n    super();\n    this.connection = connection;\n    this.request = request;\n    this.attentionReceived = false;\n  }\n  onDone(token) {\n    if (token.attention) {\n      this.attentionReceived = true;\n    }\n  }\n}\nexports.AttentionTokenHandler = AttentionTokenHandler;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}